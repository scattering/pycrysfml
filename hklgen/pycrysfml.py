# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pycrysfml')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pycrysfml')
    _pycrysfml = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycrysfml', [dirname(__file__)])
        except ImportError:
            import _pycrysfml
            return _pycrysfml
        try:
            _mod = imp.load_module('_pycrysfml', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pycrysfml = swig_import_helper()
    del swig_import_helper
else:
    import _pycrysfml
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _pycrysfml.intp_assign(self, value)

    def value(self):
        return _pycrysfml.intp_value(self)

    def cast(self):
        return _pycrysfml.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_pycrysfml.intp_frompointer)
    else:
        frompointer = _pycrysfml.intp_frompointer
intp_swigregister = _pycrysfml.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _pycrysfml.intp_frompointer(t)
intp_frompointer = _pycrysfml.intp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_doublep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_doublep
    __del__ = lambda self: None

    def assign(self, value):
        return _pycrysfml.doublep_assign(self, value)

    def value(self):
        return _pycrysfml.doublep_value(self)

    def cast(self):
        return _pycrysfml.doublep_cast(self)
    if _newclass:
        frompointer = staticmethod(_pycrysfml.doublep_frompointer)
    else:
        frompointer = _pycrysfml.doublep_frompointer
doublep_swigregister = _pycrysfml.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t):
    return _pycrysfml.doublep_frompointer(t)
doublep_frompointer = _pycrysfml.doublep_frompointer

class floatp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_floatp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_floatp
    __del__ = lambda self: None

    def assign(self, value):
        return _pycrysfml.floatp_assign(self, value)

    def value(self):
        return _pycrysfml.floatp_value(self)

    def cast(self):
        return _pycrysfml.floatp_cast(self)
    if _newclass:
        frompointer = staticmethod(_pycrysfml.floatp_frompointer)
    else:
        frompointer = _pycrysfml.floatp_frompointer
floatp_swigregister = _pycrysfml.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(t):
    return _pycrysfml.floatp_frompointer(t)
floatp_frompointer = _pycrysfml.floatp_frompointer

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycrysfml.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pycrysfml.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pycrysfml.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pycrysfml.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pycrysfml.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pycrysfml.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pycrysfml.SwigPyIterator_copy(self)

    def next(self):
        return _pycrysfml.SwigPyIterator_next(self)

    def __next__(self):
        return _pycrysfml.SwigPyIterator___next__(self)

    def previous(self):
        return _pycrysfml.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pycrysfml.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pycrysfml.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pycrysfml.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pycrysfml.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pycrysfml.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pycrysfml.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pycrysfml.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pycrysfml.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycrysfml.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycrysfml.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pycrysfml.FloatVector___bool__(self)

    def __len__(self):
        return _pycrysfml.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pycrysfml.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycrysfml.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycrysfml.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycrysfml.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycrysfml.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycrysfml.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pycrysfml.FloatVector_pop(self)

    def append(self, x):
        return _pycrysfml.FloatVector_append(self, x)

    def empty(self):
        return _pycrysfml.FloatVector_empty(self)

    def size(self):
        return _pycrysfml.FloatVector_size(self)

    def swap(self, v):
        return _pycrysfml.FloatVector_swap(self, v)

    def begin(self):
        return _pycrysfml.FloatVector_begin(self)

    def end(self):
        return _pycrysfml.FloatVector_end(self)

    def rbegin(self):
        return _pycrysfml.FloatVector_rbegin(self)

    def rend(self):
        return _pycrysfml.FloatVector_rend(self)

    def clear(self):
        return _pycrysfml.FloatVector_clear(self)

    def get_allocator(self):
        return _pycrysfml.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pycrysfml.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pycrysfml.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycrysfml.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycrysfml.FloatVector_push_back(self, x)

    def front(self):
        return _pycrysfml.FloatVector_front(self)

    def back(self):
        return _pycrysfml.FloatVector_back(self)

    def assign(self, n, x):
        return _pycrysfml.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pycrysfml.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pycrysfml.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pycrysfml.FloatVector_reserve(self, n)

    def capacity(self):
        return _pycrysfml.FloatVector_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _pycrysfml.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycrysfml.FloatMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycrysfml.FloatMatrix___nonzero__(self)

    def __bool__(self):
        return _pycrysfml.FloatMatrix___bool__(self)

    def __len__(self):
        return _pycrysfml.FloatMatrix___len__(self)

    def __getslice__(self, i, j):
        return _pycrysfml.FloatMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycrysfml.FloatMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycrysfml.FloatMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycrysfml.FloatMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycrysfml.FloatMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycrysfml.FloatMatrix___setitem__(self, *args)

    def pop(self):
        return _pycrysfml.FloatMatrix_pop(self)

    def append(self, x):
        return _pycrysfml.FloatMatrix_append(self, x)

    def empty(self):
        return _pycrysfml.FloatMatrix_empty(self)

    def size(self):
        return _pycrysfml.FloatMatrix_size(self)

    def swap(self, v):
        return _pycrysfml.FloatMatrix_swap(self, v)

    def begin(self):
        return _pycrysfml.FloatMatrix_begin(self)

    def end(self):
        return _pycrysfml.FloatMatrix_end(self)

    def rbegin(self):
        return _pycrysfml.FloatMatrix_rbegin(self)

    def rend(self):
        return _pycrysfml.FloatMatrix_rend(self)

    def clear(self):
        return _pycrysfml.FloatMatrix_clear(self)

    def get_allocator(self):
        return _pycrysfml.FloatMatrix_get_allocator(self)

    def pop_back(self):
        return _pycrysfml.FloatMatrix_pop_back(self)

    def erase(self, *args):
        return _pycrysfml.FloatMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _pycrysfml.new_FloatMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycrysfml.FloatMatrix_push_back(self, x)

    def front(self):
        return _pycrysfml.FloatMatrix_front(self)

    def back(self):
        return _pycrysfml.FloatMatrix_back(self)

    def assign(self, n, x):
        return _pycrysfml.FloatMatrix_assign(self, n, x)

    def resize(self, *args):
        return _pycrysfml.FloatMatrix_resize(self, *args)

    def insert(self, *args):
        return _pycrysfml.FloatMatrix_insert(self, *args)

    def reserve(self, n):
        return _pycrysfml.FloatMatrix_reserve(self, n)

    def capacity(self):
        return _pycrysfml.FloatMatrix_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_FloatMatrix
    __del__ = lambda self: None
FloatMatrix_swigregister = _pycrysfml.FloatMatrix_swigregister
FloatMatrix_swigregister(FloatMatrix)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pycrysfml.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycrysfml.IntVector___nonzero__(self)

    def __bool__(self):
        return _pycrysfml.IntVector___bool__(self)

    def __len__(self):
        return _pycrysfml.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pycrysfml.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycrysfml.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycrysfml.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycrysfml.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycrysfml.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycrysfml.IntVector___setitem__(self, *args)

    def pop(self):
        return _pycrysfml.IntVector_pop(self)

    def append(self, x):
        return _pycrysfml.IntVector_append(self, x)

    def empty(self):
        return _pycrysfml.IntVector_empty(self)

    def size(self):
        return _pycrysfml.IntVector_size(self)

    def swap(self, v):
        return _pycrysfml.IntVector_swap(self, v)

    def begin(self):
        return _pycrysfml.IntVector_begin(self)

    def end(self):
        return _pycrysfml.IntVector_end(self)

    def rbegin(self):
        return _pycrysfml.IntVector_rbegin(self)

    def rend(self):
        return _pycrysfml.IntVector_rend(self)

    def clear(self):
        return _pycrysfml.IntVector_clear(self)

    def get_allocator(self):
        return _pycrysfml.IntVector_get_allocator(self)

    def pop_back(self):
        return _pycrysfml.IntVector_pop_back(self)

    def erase(self, *args):
        return _pycrysfml.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pycrysfml.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pycrysfml.IntVector_push_back(self, x)

    def front(self):
        return _pycrysfml.IntVector_front(self)

    def back(self):
        return _pycrysfml.IntVector_back(self)

    def assign(self, n, x):
        return _pycrysfml.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pycrysfml.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pycrysfml.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pycrysfml.IntVector_reserve(self, n)

    def capacity(self):
        return _pycrysfml.IntVector_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pycrysfml.IntVector_swigregister
IntVector_swigregister(IntVector)

class angle_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, angle_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, angle_restraint_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_angle_restraint_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_angle_restraint_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.angle_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.angle_restraint_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.angle_restraint_type_data_ptr_get, _pycrysfml.angle_restraint_type_data_ptr_set)
angle_restraint_type_swigregister = _pycrysfml.angle_restraint_type_swigregister
angle_restraint_type_swigregister(angle_restraint_type)

class anomalous_sc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anomalous_sc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anomalous_sc_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_anomalous_sc_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_anomalous_sc_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.anomalous_sc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.anomalous_sc_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.anomalous_sc_type_data_ptr_get, _pycrysfml.anomalous_sc_type_data_ptr_set)
anomalous_sc_type_swigregister = _pycrysfml.anomalous_sc_type_swigregister
anomalous_sc_type_swigregister(anomalous_sc_type)

class atom_equiv_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_equiv_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_equiv_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_atom_equiv_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_list_type
    __del__ = lambda self: None

    def get_atom_equiv_list_element(self, elem, ind):
        return _pycrysfml.atom_equiv_list_type_get_atom_equiv_list_element(self, elem, ind)

    def set_atom_equiv_list_element(self, elem, ind):
        return _pycrysfml.atom_equiv_list_type_set_atom_equiv_list_element(self, elem, ind)

    def get_atom_equiv_list_nauas(self):
        return _pycrysfml.atom_equiv_list_type_get_atom_equiv_list_nauas(self)

    def set_atom_equiv_list_nauas(self, new_value):
        return _pycrysfml.atom_equiv_list_type_set_atom_equiv_list_nauas(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_equiv_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_equiv_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.atom_equiv_list_type_data_ptr_get, _pycrysfml.atom_equiv_list_type_data_ptr_set)
atom_equiv_list_type_swigregister = _pycrysfml.atom_equiv_list_type_swigregister
atom_equiv_list_type_swigregister(atom_equiv_list_type)

class atom_equiv_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_equiv_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_equiv_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_atom_equiv_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_type
    __del__ = lambda self: None

    def get_atom_equiv_chemsymb(self, output_value):
        return _pycrysfml.atom_equiv_type_get_atom_equiv_chemsymb(self, output_value)

    def set_atom_equiv_chemsymb(self, new_value):
        return _pycrysfml.atom_equiv_type_set_atom_equiv_chemsymb(self, new_value)

    def get_atom_equiv_mult(self):
        return _pycrysfml.atom_equiv_type_get_atom_equiv_mult(self)

    def set_atom_equiv_mult(self, new_value):
        return _pycrysfml.atom_equiv_type_set_atom_equiv_mult(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_equiv_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_equiv_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.atom_equiv_type_data_ptr_get, _pycrysfml.atom_equiv_type_data_ptr_set)
atom_equiv_type_swigregister = _pycrysfml.atom_equiv_type_swigregister
atom_equiv_type_swigregister(atom_equiv_type)

class atomic_properties_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atomic_properties_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atomic_properties_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_atomic_properties_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_atomic_properties_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.atomic_properties_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atomic_properties_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.atomic_properties_type_data_ptr_get, _pycrysfml.atomic_properties_type_data_ptr_set)
atomic_properties_type_swigregister = _pycrysfml.atomic_properties_type_swigregister
atomic_properties_type_swigregister(atomic_properties_type)

class atom_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_atom_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_list_type
    __del__ = lambda self: None

    def set_form_factors(self, scf, ok, mess, arg5=None, lun=None, add_scatt=None):
        return _pycrysfml.atom_list_type_set_form_factors(self, scf, ok, mess, arg5, lun, add_scatt)

    def get_atom_list_element(self, elem, ind):
        return _pycrysfml.atom_list_type_get_atom_list_element(self, elem, ind)

    def set_atom_list_element(self, elem, ind):
        return _pycrysfml.atom_list_type_set_atom_list_element(self, elem, ind)

    def get_atom_list_natoms(self):
        return _pycrysfml.atom_list_type_get_atom_list_natoms(self)

    def set_atom_list_natoms(self, new_value):
        return _pycrysfml.atom_list_type_set_atom_list_natoms(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.atom_list_type_data_ptr_get, _pycrysfml.atom_list_type_data_ptr_set)
atom_list_type_swigregister = _pycrysfml.atom_list_type_swigregister
atom_list_type_swigregister(atom_list_type)

class atoms_cell_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atoms_cell_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atoms_cell_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_atoms_cell_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_atoms_cell_type
    __del__ = lambda self: None

    def get_atoms_cell_ndist(self):
        return _pycrysfml.atoms_cell_type_get_atoms_cell_ndist(self)

    def set_atoms_cell_ndist(self, new_value):
        return _pycrysfml.atoms_cell_type_set_atoms_cell_ndist(self, new_value)

    def get_atoms_cell_nat(self):
        return _pycrysfml.atoms_cell_type_get_atoms_cell_nat(self)

    def set_atoms_cell_nat(self, new_value):
        return _pycrysfml.atoms_cell_type_set_atoms_cell_nat(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atoms_cell_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atoms_cell_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.atoms_cell_type_data_ptr_get, _pycrysfml.atoms_cell_type_data_ptr_set)
atoms_cell_type_swigregister = _pycrysfml.atoms_cell_type_swigregister
atoms_cell_type_swigregister(atoms_cell_type)

class atoms_conf_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atoms_conf_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atoms_conf_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_atoms_conf_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_atoms_conf_list_type
    __del__ = lambda self: None

    def set_table_bvel_params(self, n_bvel=None, soft=None, nread=None):
        return _pycrysfml.atoms_conf_list_type_set_table_bvel_params(self, n_bvel, soft, nread)

    def set_table_d0_b(self, n_bvsm=None, soft=None):
        return _pycrysfml.atoms_conf_list_type_set_table_d0_b(self, n_bvsm, soft)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atoms_conf_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atoms_conf_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.atoms_conf_list_type_data_ptr_get, _pycrysfml.atoms_conf_list_type_data_ptr_set)
atoms_conf_list_type_swigregister = _pycrysfml.atoms_conf_list_type_swigregister
atoms_conf_list_type_swigregister(atoms_conf_list_type)

class atom_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_atom_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_type
    __del__ = lambda self: None

    def get_atom_locc(self):
        return _pycrysfml.atom_type_get_atom_locc(self)

    def set_atom_locc(self, new_value):
        return _pycrysfml.atom_type_set_atom_locc(self, new_value)

    def get_atom_lvarf(self, output_value):
        return _pycrysfml.atom_type_get_atom_lvarf(self, output_value)

    def set_atom_lvarf(self, new_value):
        return _pycrysfml.atom_type_set_atom_lvarf(self, new_value)

    def get_atom_utype(self, output_value):
        return _pycrysfml.atom_type_get_atom_utype(self, output_value)

    def set_atom_utype(self, new_value):
        return _pycrysfml.atom_type_set_atom_utype(self, new_value)

    def get_atom_mbiso(self):
        return _pycrysfml.atom_type_get_atom_mbiso(self)

    def set_atom_mbiso(self, new_value):
        return _pycrysfml.atom_type_set_atom_mbiso(self, new_value)

    def get_atom_occ(self):
        return _pycrysfml.atom_type_get_atom_occ(self)

    def set_atom_occ(self, new_value):
        return _pycrysfml.atom_type_set_atom_occ(self, new_value)

    def get_atom_charge(self):
        return _pycrysfml.atom_type_get_atom_charge(self)

    def set_atom_charge(self, new_value):
        return _pycrysfml.atom_type_set_atom_charge(self, new_value)

    def get_atom_sfacsymb(self, output_value):
        return _pycrysfml.atom_type_get_atom_sfacsymb(self, output_value)

    def set_atom_sfacsymb(self, new_value):
        return _pycrysfml.atom_type_set_atom_sfacsymb(self, new_value)

    def get_atom_lab(self, output_value):
        return _pycrysfml.atom_type_get_atom_lab(self, output_value)

    def set_atom_lab(self, new_value):
        return _pycrysfml.atom_type_set_atom_lab(self, new_value)

    def get_atom_mvarf(self, output_value):
        return _pycrysfml.atom_type_get_atom_mvarf(self, output_value)

    def set_atom_mvarf(self, new_value):
        return _pycrysfml.atom_type_set_atom_mvarf(self, new_value)

    def get_atom_moment(self):
        return _pycrysfml.atom_type_get_atom_moment(self)

    def set_atom_moment(self, new_value):
        return _pycrysfml.atom_type_set_atom_moment(self, new_value)

    def get_atom_lu(self, output_value):
        return _pycrysfml.atom_type_get_atom_lu(self, output_value)

    def set_atom_lu(self, new_value):
        return _pycrysfml.atom_type_set_atom_lu(self, new_value)

    def get_atom_mocc(self):
        return _pycrysfml.atom_type_get_atom_mocc(self)

    def set_atom_mocc(self, new_value):
        return _pycrysfml.atom_type_set_atom_mocc(self, new_value)

    def get_atom_active(self):
        return _pycrysfml.atom_type_get_atom_active(self)

    def set_atom_active(self, new_value):
        return _pycrysfml.atom_type_set_atom_active(self, new_value)

    def get_atom_mult(self):
        return _pycrysfml.atom_type_get_atom_mult(self)

    def set_atom_mult(self, new_value):
        return _pycrysfml.atom_type_set_atom_mult(self, new_value)

    def get_atom_x_std(self, output_value):
        return _pycrysfml.atom_type_get_atom_x_std(self, output_value)

    def set_atom_x_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_x_std(self, new_value)

    def get_atom_u_std(self, output_value):
        return _pycrysfml.atom_type_get_atom_u_std(self, output_value)

    def set_atom_u_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_u_std(self, new_value)

    def get_atom_nvar(self):
        return _pycrysfml.atom_type_get_atom_nvar(self)

    def set_atom_nvar(self, new_value):
        return _pycrysfml.atom_type_set_atom_nvar(self, new_value)

    def get_atom_wyck(self, output_value):
        return _pycrysfml.atom_type_get_atom_wyck(self, output_value)

    def set_atom_wyck(self, new_value):
        return _pycrysfml.atom_type_set_atom_wyck(self, new_value)

    def get_atom_biso_std(self):
        return _pycrysfml.atom_type_get_atom_biso_std(self)

    def set_atom_biso_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_biso_std(self, new_value)

    def get_atom_lbiso(self):
        return _pycrysfml.atom_type_get_atom_lbiso(self)

    def set_atom_lbiso(self, new_value):
        return _pycrysfml.atom_type_set_atom_lbiso(self, new_value)

    def get_atom_biso(self):
        return _pycrysfml.atom_type_get_atom_biso(self)

    def set_atom_biso(self, new_value):
        return _pycrysfml.atom_type_set_atom_biso(self, new_value)

    def get_atom_varf(self, output_value):
        return _pycrysfml.atom_type_get_atom_varf(self, output_value)

    def set_atom_varf(self, new_value):
        return _pycrysfml.atom_type_set_atom_varf(self, new_value)

    def get_atom_u(self, output_value):
        return _pycrysfml.atom_type_get_atom_u(self, output_value)

    def set_atom_u(self, new_value):
        return _pycrysfml.atom_type_set_atom_u(self, new_value)

    def get_atom_occ_std(self):
        return _pycrysfml.atom_type_get_atom_occ_std(self)

    def set_atom_occ_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_occ_std(self, new_value)

    def get_atom_x(self, output_value):
        return _pycrysfml.atom_type_get_atom_x(self, output_value)

    def set_atom_x(self, new_value):
        return _pycrysfml.atom_type_set_atom_x(self, new_value)

    def get_atom_z(self):
        return _pycrysfml.atom_type_get_atom_z(self)

    def set_atom_z(self, new_value):
        return _pycrysfml.atom_type_set_atom_z(self, new_value)

    def get_atom_mu(self, output_value):
        return _pycrysfml.atom_type_get_atom_mu(self, output_value)

    def set_atom_mu(self, new_value):
        return _pycrysfml.atom_type_set_atom_mu(self, new_value)

    def get_atom_lx(self, output_value):
        return _pycrysfml.atom_type_get_atom_lx(self, output_value)

    def set_atom_lx(self, new_value):
        return _pycrysfml.atom_type_set_atom_lx(self, new_value)

    def get_atom_chemsymb(self, output_value):
        return _pycrysfml.atom_type_get_atom_chemsymb(self, output_value)

    def set_atom_chemsymb(self, new_value):
        return _pycrysfml.atom_type_set_atom_chemsymb(self, new_value)

    def get_atom_ind(self, output_value):
        return _pycrysfml.atom_type_get_atom_ind(self, output_value)

    def set_atom_ind(self, new_value):
        return _pycrysfml.atom_type_set_atom_ind(self, new_value)

    def get_atom_thtype(self, output_value):
        return _pycrysfml.atom_type_get_atom_thtype(self, output_value)

    def set_atom_thtype(self, new_value):
        return _pycrysfml.atom_type_set_atom_thtype(self, new_value)

    def get_atom_atminfo(self, output_value):
        return _pycrysfml.atom_type_get_atom_atminfo(self, output_value)

    def set_atom_atminfo(self, new_value):
        return _pycrysfml.atom_type_set_atom_atminfo(self, new_value)

    def get_atom_ueq(self):
        return _pycrysfml.atom_type_get_atom_ueq(self)

    def set_atom_ueq(self, new_value):
        return _pycrysfml.atom_type_set_atom_ueq(self, new_value)

    def get_atom_mx(self, output_value):
        return _pycrysfml.atom_type_get_atom_mx(self, output_value)

    def set_atom_mx(self, new_value):
        return _pycrysfml.atom_type_set_atom_mx(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.atom_type_data_ptr_get, _pycrysfml.atom_type_data_ptr_set)
atom_type_swigregister = _pycrysfml.atom_type_swigregister
atom_type_swigregister(atom_type)

class basic_numc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numc_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_basic_numc_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numc_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numc_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.basic_numc_type_data_ptr_get, _pycrysfml.basic_numc_type_data_ptr_set)
basic_numc_type_swigregister = _pycrysfml.basic_numc_type_swigregister
basic_numc_type_swigregister(basic_numc_type)

class basic_numi_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numi_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numi_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_basic_numi_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numi_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numi_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numi_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.basic_numi_type_data_ptr_get, _pycrysfml.basic_numi_type_data_ptr_set)
basic_numi_type_swigregister = _pycrysfml.basic_numi_type_swigregister
basic_numi_type_swigregister(basic_numi_type)

class basic_numr_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numr_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numr_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_basic_numr_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numr_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numr_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numr_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.basic_numr_type_data_ptr_get, _pycrysfml.basic_numr_type_data_ptr_set)
basic_numr_type_swigregister = _pycrysfml.basic_numr_type_swigregister
basic_numr_type_swigregister(basic_numr_type)

class bvel_par_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvel_par_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvel_par_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_bvel_par_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_bvel_par_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.bvel_par_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.bvel_par_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.bvel_par_type_data_ptr_get, _pycrysfml.bvel_par_type_data_ptr_set)
bvel_par_type_swigregister = _pycrysfml.bvel_par_type_swigregister
bvel_par_type_swigregister(bvel_par_type)

class bvs_par_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvs_par_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvs_par_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_bvs_par_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_bvs_par_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.bvs_par_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.bvs_par_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.bvs_par_type_data_ptr_get, _pycrysfml.bvs_par_type_data_ptr_set)
bvs_par_type_swigregister = _pycrysfml.bvs_par_type_swigregister
bvs_par_type_swigregister(bvs_par_type)

class calibration_detector_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_detector_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_detector_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_calibration_detector_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_calibration_detector_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.calibration_detector_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.calibration_detector_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.calibration_detector_type_data_ptr_get, _pycrysfml.calibration_detector_type_data_ptr_set)
calibration_detector_type_swigregister = _pycrysfml.calibration_detector_type_swigregister
calibration_detector_type_swigregister(calibration_detector_type)

class chem_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chem_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chem_info_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_chem_info_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_chem_info_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.chem_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.chem_info_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.chem_info_type_data_ptr_get, _pycrysfml.chem_info_type_data_ptr_set)
chem_info_type_swigregister = _pycrysfml.chem_info_type_swigregister
chem_info_type_swigregister(chem_info_type)

class coordination_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coordination_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coordination_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_coordination_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_coordination_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.coordination_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.coordination_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.coordination_type_data_ptr_get, _pycrysfml.coordination_type_data_ptr_set)
coordination_type_swigregister = _pycrysfml.coordination_type_swigregister
coordination_type_swigregister(coordination_type)

class crystal_cell_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, crystal_cell_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, crystal_cell_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_crystal_cell_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_crystal_cell_type
    __del__ = lambda self: None

    def change_setting_cell(self, mat, celln, matkind=None):
        return _pycrysfml.crystal_cell_type_change_setting_cell(self, mat, celln, matkind)

    def get_cryst_family(self, car_family, car_symbol, car_system):
        return _pycrysfml.crystal_cell_type_get_cryst_family(self, car_family, car_symbol, car_system)

    def get_deriv_orth_cell(self, de_orthcell, cartypein=None):
        return _pycrysfml.crystal_cell_type_get_deriv_orth_cell(self, de_orthcell, cartypein)

    def get_transfm_matrix(self, cellb, trm, ok, tol=None):
        return _pycrysfml.crystal_cell_type_get_transfm_matrix(self, cellb, trm, ok, tol)

    def get_twofold_axes(self, tol, twofold):
        return _pycrysfml.crystal_cell_type_get_twofold_axes(self, tol, twofold)

    def get_crystal_cell_lang(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_lang(self, output_value)

    def set_crystal_cell_lang(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_lang(self, new_value)

    def get_crystal_cell_rcellvol(self):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_rcellvol(self)

    def set_crystal_cell_rcellvol(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_rcellvol(self, new_value)

    def get_crystal_cell_cell_std(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cell_std(self, output_value)

    def set_crystal_cell_cell_std(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cell_std(self, new_value)

    def get_crystal_cell_ang(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_ang(self, output_value)

    def set_crystal_cell_ang(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_ang(self, new_value)

    def get_crystal_cell_bl_minv(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_bl_minv(self, output_value)

    def set_crystal_cell_bl_minv(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_bl_minv(self, new_value)

    def get_crystal_cell_gr(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_gr(self, output_value)

    def set_crystal_cell_gr(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_gr(self, new_value)

    def get_crystal_cell_cr_orth_cel(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cr_orth_cel(self, output_value)

    def set_crystal_cell_cr_orth_cel(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cr_orth_cel(self, new_value)

    def get_crystal_cell_bl_m(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_bl_m(self, output_value)

    def set_crystal_cell_bl_m(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_bl_m(self, new_value)

    def get_crystal_cell_orth_cr_cel(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_orth_cr_cel(self, output_value)

    def set_crystal_cell_orth_cr_cel(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_orth_cr_cel(self, new_value)

    def get_crystal_cell_carttype(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_carttype(self, output_value)

    def set_crystal_cell_carttype(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_carttype(self, new_value)

    def get_crystal_cell_rang(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_rang(self, output_value)

    def set_crystal_cell_rang(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_rang(self, new_value)

    def get_crystal_cell_rcell(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_rcell(self, output_value)

    def set_crystal_cell_rcell(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_rcell(self, new_value)

    def get_crystal_cell_cell(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cell(self, output_value)

    def set_crystal_cell_cell(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cell(self, new_value)

    def get_crystal_cell_gd(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_gd(self, output_value)

    def set_crystal_cell_gd(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_gd(self, new_value)

    def get_crystal_cell_cellvol(self):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cellvol(self)

    def set_crystal_cell_cellvol(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cellvol(self, new_value)

    def get_crystal_cell_ang_std(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_ang_std(self, output_value)

    def set_crystal_cell_ang_std(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_ang_std(self, new_value)

    def get_crystal_cell_lcell(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_lcell(self, output_value)

    def set_crystal_cell_lcell(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_lcell(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.crystal_cell_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.crystal_cell_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.crystal_cell_type_data_ptr_get, _pycrysfml.crystal_cell_type_data_ptr_set)
crystal_cell_type_swigregister = _pycrysfml.crystal_cell_type_swigregister
crystal_cell_type_swigregister(crystal_cell_type)

class cube_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cube_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cube_info_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_cube_info_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_cube_info_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.cube_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.cube_info_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.cube_info_type_data_ptr_get, _pycrysfml.cube_info_type_data_ptr_set)
cube_info_type_swigregister = _pycrysfml.cube_info_type_swigregister
cube_info_type_swigregister(cube_info_type)

class deriv_tof_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deriv_tof_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deriv_tof_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_deriv_tof_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_deriv_tof_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.deriv_tof_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.deriv_tof_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.deriv_tof_type_data_ptr_get, _pycrysfml.deriv_tof_type_data_ptr_set)
deriv_tof_type_swigregister = _pycrysfml.deriv_tof_type_swigregister
deriv_tof_type_swigregister(deriv_tof_type)

class diffraction_pattern_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diffraction_pattern_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diffraction_pattern_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_diffraction_pattern_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_diffraction_pattern_type
    __del__ = lambda self: None

    def get_diffraction_pattern_scal(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_scal(self)

    def set_diffraction_pattern_scal(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_scal(self, new_value)

    def get_diffraction_pattern_conv(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_conv(self, output_value)

    def set_diffraction_pattern_conv(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_conv(self, new_value)

    def get_diffraction_pattern_instr(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_instr(self, output_value)

    def set_diffraction_pattern_instr(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_instr(self, new_value)

    def get_diffraction_pattern_yax_text(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_yax_text(self, output_value)

    def set_diffraction_pattern_yax_text(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_yax_text(self, new_value)

    def get_diffraction_pattern_diff_kind(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_diff_kind(self, output_value)

    def set_diffraction_pattern_diff_kind(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_diff_kind(self, new_value)

    def get_diffraction_pattern_xmin(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xmin(self)

    def set_diffraction_pattern_xmin(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xmin(self, new_value)

    def get_diffraction_pattern_norm_mon(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_norm_mon(self)

    def set_diffraction_pattern_norm_mon(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_norm_mon(self, new_value)

    def get_diffraction_pattern_ymin(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ymin(self)

    def set_diffraction_pattern_ymin(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ymin(self, new_value)

    def get_diffraction_pattern_monitor(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_monitor(self)

    def set_diffraction_pattern_monitor(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_monitor(self, new_value)

    def get_diffraction_pattern_filepath(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_filepath(self, output_value)

    def set_diffraction_pattern_filepath(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_filepath(self, new_value)

    def get_diffraction_pattern_title(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_title(self, output_value)

    def set_diffraction_pattern_title(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_title(self, new_value)

    def get_diffraction_pattern_filename(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_filename(self, output_value)

    def set_diffraction_pattern_filename(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_filename(self, new_value)

    def get_diffraction_pattern_scat_var(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_scat_var(self, output_value)

    def set_diffraction_pattern_scat_var(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_scat_var(self, new_value)

    def get_diffraction_pattern_step(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_step(self)

    def set_diffraction_pattern_step(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_step(self, new_value)

    def get_diffraction_pattern_x(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_x(self, output_value)

    def set_diffraction_pattern_x(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_x(self, new_value)

    def get_diffraction_pattern_ct_step(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ct_step(self)

    def set_diffraction_pattern_ct_step(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ct_step(self, new_value)

    def get_diffraction_pattern_xax_text(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xax_text(self, output_value)

    def set_diffraction_pattern_xax_text(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xax_text(self, new_value)

    def get_diffraction_pattern_ymax(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ymax(self)

    def set_diffraction_pattern_ymax(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ymax(self, new_value)

    def get_diffraction_pattern_col_time(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_col_time(self)

    def set_diffraction_pattern_col_time(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_col_time(self, new_value)

    def get_diffraction_pattern_tset(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_tset(self)

    def set_diffraction_pattern_tset(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_tset(self, new_value)

    def get_diffraction_pattern_tsamp(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_tsamp(self)

    def set_diffraction_pattern_tsamp(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_tsamp(self, new_value)

    def get_diffraction_pattern_bgr(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_bgr(self, output_value)

    def set_diffraction_pattern_bgr(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_bgr(self, new_value)

    def get_diffraction_pattern_xmax(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xmax(self)

    def set_diffraction_pattern_xmax(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xmax(self, new_value)

    def get_diffraction_pattern_y(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_y(self, output_value)

    def set_diffraction_pattern_y(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_y(self, new_value)

    def get_diffraction_pattern_npts(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_npts(self)

    def set_diffraction_pattern_npts(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_npts(self, new_value)

    def get_diffraction_pattern_sigma(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_sigma(self, output_value)

    def set_diffraction_pattern_sigma(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_sigma(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.diffraction_pattern_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.diffraction_pattern_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.diffraction_pattern_type_data_ptr_get, _pycrysfml.diffraction_pattern_type_data_ptr_set)
diffraction_pattern_type_swigregister = _pycrysfml.diffraction_pattern_type_swigregister
diffraction_pattern_type_swigregister(diffraction_pattern_type)

class diffractometer_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diffractometer_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diffractometer_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_diffractometer_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_diffractometer_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.diffractometer_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.diffractometer_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.diffractometer_type_data_ptr_get, _pycrysfml.diffractometer_type_data_ptr_set)
diffractometer_type_swigregister = _pycrysfml.diffractometer_type_swigregister
diffractometer_type_swigregister(diffractometer_type)

class distance_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, distance_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, distance_restraint_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_distance_restraint_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_distance_restraint_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.distance_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.distance_restraint_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.distance_restraint_type_data_ptr_get, _pycrysfml.distance_restraint_type_data_ptr_set)
distance_restraint_type_swigregister = _pycrysfml.distance_restraint_type_swigregister
distance_restraint_type_swigregister(distance_restraint_type)

class file_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, file_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, file_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_file_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_file_list_type
    __del__ = lambda self: None

    def get_file_list_nlines(self):
        return _pycrysfml.file_list_type_get_file_list_nlines(self)

    def set_file_list_nlines(self, new_value):
        return _pycrysfml.file_list_type_set_file_list_nlines(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.file_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.file_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.file_list_type_data_ptr_get, _pycrysfml.file_list_type_data_ptr_set)
file_list_type_swigregister = _pycrysfml.file_list_type_swigregister
file_list_type_swigregister(file_list_type)

class FortFuncs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FortFuncs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FortFuncs, name)
    __repr__ = _swig_repr
    if _newclass:
        equiv_atm = staticmethod(_pycrysfml.FortFuncs_equiv_atm)
    else:
        equiv_atm = _pycrysfml.FortFuncs_equiv_atm
    if _newclass:
        allocate_atoms_cell = staticmethod(_pycrysfml.FortFuncs_allocate_atoms_cell)
    else:
        allocate_atoms_cell = _pycrysfml.FortFuncs_allocate_atoms_cell
    if _newclass:
        allocate_atom_list = staticmethod(_pycrysfml.FortFuncs_allocate_atom_list)
    else:
        allocate_atom_list = _pycrysfml.FortFuncs_allocate_atom_list
    if _newclass:
        allocate_matom_list = staticmethod(_pycrysfml.FortFuncs_allocate_matom_list)
    else:
        allocate_matom_list = _pycrysfml.FortFuncs_allocate_matom_list
    if _newclass:
        atlist1_extencell_atlist2 = staticmethod(_pycrysfml.FortFuncs_atlist1_extencell_atlist2)
    else:
        atlist1_extencell_atlist2 = _pycrysfml.FortFuncs_atlist1_extencell_atlist2
    if _newclass:
        atoms_cell_to_list = staticmethod(_pycrysfml.FortFuncs_atoms_cell_to_list)
    else:
        atoms_cell_to_list = _pycrysfml.FortFuncs_atoms_cell_to_list
    if _newclass:
        atom_list_to_cell = staticmethod(_pycrysfml.FortFuncs_atom_list_to_cell)
    else:
        atom_list_to_cell = _pycrysfml.FortFuncs_atom_list_to_cell
    if _newclass:
        atom_uequi_list = staticmethod(_pycrysfml.FortFuncs_atom_uequi_list)
    else:
        atom_uequi_list = _pycrysfml.FortFuncs_atom_uequi_list
    if _newclass:
        copy_atom_list = staticmethod(_pycrysfml.FortFuncs_copy_atom_list)
    else:
        copy_atom_list = _pycrysfml.FortFuncs_copy_atom_list
    if _newclass:
        deallocate_atoms_cell = staticmethod(_pycrysfml.FortFuncs_deallocate_atoms_cell)
    else:
        deallocate_atoms_cell = _pycrysfml.FortFuncs_deallocate_atoms_cell
    if _newclass:
        deallocate_atom_list = staticmethod(_pycrysfml.FortFuncs_deallocate_atom_list)
    else:
        deallocate_atom_list = _pycrysfml.FortFuncs_deallocate_atom_list
    if _newclass:
        deallocate_matom_list = staticmethod(_pycrysfml.FortFuncs_deallocate_matom_list)
    else:
        deallocate_matom_list = _pycrysfml.FortFuncs_deallocate_matom_list
    if _newclass:
        get_atom_2nd_tensor_ctr = staticmethod(_pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr)
    else:
        get_atom_2nd_tensor_ctr = _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr
    if _newclass:
        init_atom_type = staticmethod(_pycrysfml.FortFuncs_init_atom_type)
    else:
        init_atom_type = _pycrysfml.FortFuncs_init_atom_type
    if _newclass:
        init_matom_type = staticmethod(_pycrysfml.FortFuncs_init_matom_type)
    else:
        init_matom_type = _pycrysfml.FortFuncs_init_matom_type
    if _newclass:
        init_err_atmd = staticmethod(_pycrysfml.FortFuncs_init_err_atmd)
    else:
        init_err_atmd = _pycrysfml.FortFuncs_init_err_atmd
    if _newclass:
        multi = staticmethod(_pycrysfml.FortFuncs_multi)
    else:
        multi = _pycrysfml.FortFuncs_multi
    if _newclass:
        read_bin_atom_list = staticmethod(_pycrysfml.FortFuncs_read_bin_atom_list)
    else:
        read_bin_atom_list = _pycrysfml.FortFuncs_read_bin_atom_list
    if _newclass:
        write_atom_list = staticmethod(_pycrysfml.FortFuncs_write_atom_list)
    else:
        write_atom_list = _pycrysfml.FortFuncs_write_atom_list
    if _newclass:
        write_bin_atom_list = staticmethod(_pycrysfml.FortFuncs_write_bin_atom_list)
    else:
        write_bin_atom_list = _pycrysfml.FortFuncs_write_bin_atom_list
    if _newclass:
        deallocate_ap_table = staticmethod(_pycrysfml.FortFuncs_deallocate_ap_table)
    else:
        deallocate_ap_table = _pycrysfml.FortFuncs_deallocate_ap_table
    if _newclass:
        deallocate_bvel_table = staticmethod(_pycrysfml.FortFuncs_deallocate_bvel_table)
    else:
        deallocate_bvel_table = _pycrysfml.FortFuncs_deallocate_bvel_table
    if _newclass:
        deallocate_bvs_table = staticmethod(_pycrysfml.FortFuncs_deallocate_bvs_table)
    else:
        deallocate_bvs_table = _pycrysfml.FortFuncs_deallocate_bvs_table
    if _newclass:
        deallocate_sbvs_table = staticmethod(_pycrysfml.FortFuncs_deallocate_sbvs_table)
    else:
        deallocate_sbvs_table = _pycrysfml.FortFuncs_deallocate_sbvs_table
    if _newclass:
        set_atomic_properties = staticmethod(_pycrysfml.FortFuncs_set_atomic_properties)
    else:
        set_atomic_properties = _pycrysfml.FortFuncs_set_atomic_properties
    if _newclass:
        set_bvel_table = staticmethod(_pycrysfml.FortFuncs_set_bvel_table)
    else:
        set_bvel_table = _pycrysfml.FortFuncs_set_bvel_table
    if _newclass:
        set_bvs_table = staticmethod(_pycrysfml.FortFuncs_set_bvs_table)
    else:
        set_bvs_table = _pycrysfml.FortFuncs_set_bvs_table
    if _newclass:
        set_sbvs_table = staticmethod(_pycrysfml.FortFuncs_set_sbvs_table)
    else:
        set_sbvs_table = _pycrysfml.FortFuncs_set_sbvs_table
    if _newclass:
        set_common_oxidation_states_table = staticmethod(_pycrysfml.FortFuncs_set_common_oxidation_states_table)
    else:
        set_common_oxidation_states_table = _pycrysfml.FortFuncs_set_common_oxidation_states_table
    if _newclass:
        set_oxidation_states_table = staticmethod(_pycrysfml.FortFuncs_set_oxidation_states_table)
    else:
        set_oxidation_states_table = _pycrysfml.FortFuncs_set_oxidation_states_table
    if _newclass:
        set_pauling_electronegativity = staticmethod(_pycrysfml.FortFuncs_set_pauling_electronegativity)
    else:
        set_pauling_electronegativity = _pycrysfml.FortFuncs_set_pauling_electronegativity
    if _newclass:
        init_err_bond = staticmethod(_pycrysfml.FortFuncs_init_err_bond)
    else:
        init_err_bond = _pycrysfml.FortFuncs_init_err_bond
    if _newclass:
        remove_bonds_table = staticmethod(_pycrysfml.FortFuncs_remove_bonds_table)
    else:
        remove_bonds_table = _pycrysfml.FortFuncs_remove_bonds_table
    if _newclass:
        set_bonds_table = staticmethod(_pycrysfml.FortFuncs_set_bonds_table)
    else:
        set_bonds_table = _pycrysfml.FortFuncs_set_bonds_table
    if _newclass:
        get_atomic_mass = staticmethod(_pycrysfml.FortFuncs_get_atomic_mass)
    else:
        get_atomic_mass = _pycrysfml.FortFuncs_get_atomic_mass
    if _newclass:
        get_atomic_vol = staticmethod(_pycrysfml.FortFuncs_get_atomic_vol)
    else:
        get_atomic_vol = _pycrysfml.FortFuncs_get_atomic_vol
    if _newclass:
        get_chemsymb = staticmethod(_pycrysfml.FortFuncs_get_chemsymb)
    else:
        get_chemsymb = _pycrysfml.FortFuncs_get_chemsymb
    if _newclass:
        get_covalent_radius = staticmethod(_pycrysfml.FortFuncs_get_covalent_radius)
    else:
        get_covalent_radius = _pycrysfml.FortFuncs_get_covalent_radius
    if _newclass:
        get_fermi_length = staticmethod(_pycrysfml.FortFuncs_get_fermi_length)
    else:
        get_fermi_length = _pycrysfml.FortFuncs_get_fermi_length
    if _newclass:
        get_inc_xs = staticmethod(_pycrysfml.FortFuncs_get_inc_xs)
    else:
        get_inc_xs = _pycrysfml.FortFuncs_get_inc_xs
    if _newclass:
        get_abs_xs = staticmethod(_pycrysfml.FortFuncs_get_abs_xs)
    else:
        get_abs_xs = _pycrysfml.FortFuncs_get_abs_xs
    if _newclass:
        get_ionic_radius = staticmethod(_pycrysfml.FortFuncs_get_ionic_radius)
    else:
        get_ionic_radius = _pycrysfml.FortFuncs_get_ionic_radius
    if _newclass:
        remove_chem_info = staticmethod(_pycrysfml.FortFuncs_remove_chem_info)
    else:
        remove_chem_info = _pycrysfml.FortFuncs_remove_chem_info
    if _newclass:
        remove_delta_fp_fpp = staticmethod(_pycrysfml.FortFuncs_remove_delta_fp_fpp)
    else:
        remove_delta_fp_fpp = _pycrysfml.FortFuncs_remove_delta_fp_fpp
    if _newclass:
        remove_magnetic_form = staticmethod(_pycrysfml.FortFuncs_remove_magnetic_form)
    else:
        remove_magnetic_form = _pycrysfml.FortFuncs_remove_magnetic_form
    if _newclass:
        remove_xray_form = staticmethod(_pycrysfml.FortFuncs_remove_xray_form)
    else:
        remove_xray_form = _pycrysfml.FortFuncs_remove_xray_form
    if _newclass:
        set_chem_info = staticmethod(_pycrysfml.FortFuncs_set_chem_info)
    else:
        set_chem_info = _pycrysfml.FortFuncs_set_chem_info
    if _newclass:
        set_delta_fp_fpp = staticmethod(_pycrysfml.FortFuncs_set_delta_fp_fpp)
    else:
        set_delta_fp_fpp = _pycrysfml.FortFuncs_set_delta_fp_fpp
    if _newclass:
        set_magnetic_form = staticmethod(_pycrysfml.FortFuncs_set_magnetic_form)
    else:
        set_magnetic_form = _pycrysfml.FortFuncs_set_magnetic_form
    if _newclass:
        set_xray_form = staticmethod(_pycrysfml.FortFuncs_set_xray_form)
    else:
        set_xray_form = _pycrysfml.FortFuncs_set_xray_form
    if _newclass:
        allocate_atoms_conf_list = staticmethod(_pycrysfml.FortFuncs_allocate_atoms_conf_list)
    else:
        allocate_atoms_conf_list = _pycrysfml.FortFuncs_allocate_atoms_conf_list
    if _newclass:
        calc_bvs = staticmethod(_pycrysfml.FortFuncs_calc_bvs)
    else:
        calc_bvs = _pycrysfml.FortFuncs_calc_bvs
    if _newclass:
        calc_map_bvel = staticmethod(_pycrysfml.FortFuncs_calc_map_bvel)
    else:
        calc_map_bvel = _pycrysfml.FortFuncs_calc_map_bvel
    if _newclass:
        calc_map_bvs = staticmethod(_pycrysfml.FortFuncs_calc_map_bvs)
    else:
        calc_map_bvs = _pycrysfml.FortFuncs_calc_map_bvs
    if _newclass:
        cost_bvs = staticmethod(_pycrysfml.FortFuncs_cost_bvs)
    else:
        cost_bvs = _pycrysfml.FortFuncs_cost_bvs
    if _newclass:
        cost_bvs_coulombrep = staticmethod(_pycrysfml.FortFuncs_cost_bvs_coulombrep)
    else:
        cost_bvs_coulombrep = _pycrysfml.FortFuncs_cost_bvs_coulombrep
    if _newclass:
        deallocate_atoms_conf_list = staticmethod(_pycrysfml.FortFuncs_deallocate_atoms_conf_list)
    else:
        deallocate_atoms_conf_list = _pycrysfml.FortFuncs_deallocate_atoms_conf_list
    if _newclass:
        ewald = staticmethod(_pycrysfml.FortFuncs_ewald)
    else:
        ewald = _pycrysfml.FortFuncs_ewald
    if _newclass:
        init_err_conf = staticmethod(_pycrysfml.FortFuncs_init_err_conf)
    else:
        init_err_conf = _pycrysfml.FortFuncs_init_err_conf
    if _newclass:
        species_on_list = staticmethod(_pycrysfml.FortFuncs_species_on_list)
    else:
        species_on_list = _pycrysfml.FortFuncs_species_on_list
    if _newclass:
        cell_volume_sigma = staticmethod(_pycrysfml.FortFuncs_cell_volume_sigma)
    else:
        cell_volume_sigma = _pycrysfml.FortFuncs_cell_volume_sigma
    if _newclass:
        u_equiv = staticmethod(_pycrysfml.FortFuncs_u_equiv)
    else:
        u_equiv = _pycrysfml.FortFuncs_u_equiv
    if _newclass:
        volume_from_cell = staticmethod(_pycrysfml.FortFuncs_volume_from_cell)
    else:
        volume_from_cell = _pycrysfml.FortFuncs_volume_from_cell
    if _newclass:
        calc_cell_strain = staticmethod(_pycrysfml.FortFuncs_calc_cell_strain)
    else:
        calc_cell_strain = _pycrysfml.FortFuncs_calc_cell_strain
    if _newclass:
        get_basis_from_uvw = staticmethod(_pycrysfml.FortFuncs_get_basis_from_uvw)
    else:
        get_basis_from_uvw = _pycrysfml.FortFuncs_get_basis_from_uvw
    if _newclass:
        get_conventional_cell = staticmethod(_pycrysfml.FortFuncs_get_conventional_cell)
    else:
        get_conventional_cell = _pycrysfml.FortFuncs_get_conventional_cell
    if _newclass:
        get_cryst_orthog_matrix = staticmethod(_pycrysfml.FortFuncs_get_cryst_orthog_matrix)
    else:
        get_cryst_orthog_matrix = _pycrysfml.FortFuncs_get_cryst_orthog_matrix
    if _newclass:
        get_primitive_cell = staticmethod(_pycrysfml.FortFuncs_get_primitive_cell)
    else:
        get_primitive_cell = _pycrysfml.FortFuncs_get_primitive_cell
    if _newclass:
        init_err_crys = staticmethod(_pycrysfml.FortFuncs_init_err_crys)
    else:
        init_err_crys = _pycrysfml.FortFuncs_init_err_crys
    if _newclass:
        orient_eigenvectors = staticmethod(_pycrysfml.FortFuncs_orient_eigenvectors)
    else:
        orient_eigenvectors = _pycrysfml.FortFuncs_orient_eigenvectors
    if _newclass:
        read_bin_crystal_cell = staticmethod(_pycrysfml.FortFuncs_read_bin_crystal_cell)
    else:
        read_bin_crystal_cell = _pycrysfml.FortFuncs_read_bin_crystal_cell
    if _newclass:
        set_crystal_cell = staticmethod(_pycrysfml.FortFuncs_set_crystal_cell)
    else:
        set_crystal_cell = _pycrysfml.FortFuncs_set_crystal_cell
    if _newclass:
        volume_sigma_from_cell = staticmethod(_pycrysfml.FortFuncs_volume_sigma_from_cell)
    else:
        volume_sigma_from_cell = _pycrysfml.FortFuncs_volume_sigma_from_cell
    if _newclass:
        write_bin_crystal_cell = staticmethod(_pycrysfml.FortFuncs_write_bin_crystal_cell)
    else:
        write_bin_crystal_cell = _pycrysfml.FortFuncs_write_bin_crystal_cell
    if _newclass:
        write_crystal_cell = staticmethod(_pycrysfml.FortFuncs_write_crystal_cell)
    else:
        write_crystal_cell = _pycrysfml.FortFuncs_write_crystal_cell
    if _newclass:
        calc_fwhm_peak = staticmethod(_pycrysfml.FortFuncs_calc_fwhm_peak)
    else:
        calc_fwhm_peak = _pycrysfml.FortFuncs_calc_fwhm_peak
    if _newclass:
        allocate_diffraction_pattern = staticmethod(_pycrysfml.FortFuncs_allocate_diffraction_pattern)
    else:
        allocate_diffraction_pattern = _pycrysfml.FortFuncs_allocate_diffraction_pattern
    if _newclass:
        calc_background = staticmethod(_pycrysfml.FortFuncs_calc_background)
    else:
        calc_background = _pycrysfml.FortFuncs_calc_background
    if _newclass:
        delete_noisy_points = staticmethod(_pycrysfml.FortFuncs_delete_noisy_points)
    else:
        delete_noisy_points = _pycrysfml.FortFuncs_delete_noisy_points
    if _newclass:
        init_err_diffpatt = staticmethod(_pycrysfml.FortFuncs_init_err_diffpatt)
    else:
        init_err_diffpatt = _pycrysfml.FortFuncs_init_err_diffpatt
    if _newclass:
        purge_diffraction_pattern = staticmethod(_pycrysfml.FortFuncs_purge_diffraction_pattern)
    else:
        purge_diffraction_pattern = _pycrysfml.FortFuncs_purge_diffraction_pattern
    if _newclass:
        read_background_file = staticmethod(_pycrysfml.FortFuncs_read_background_file)
    else:
        read_background_file = _pycrysfml.FortFuncs_read_background_file
    if _newclass:
        write_pattern_freeformat = staticmethod(_pycrysfml.FortFuncs_write_pattern_freeformat)
    else:
        write_pattern_freeformat = _pycrysfml.FortFuncs_write_pattern_freeformat
    if _newclass:
        write_pattern_instrm5 = staticmethod(_pycrysfml.FortFuncs_write_pattern_instrm5)
    else:
        write_pattern_instrm5 = _pycrysfml.FortFuncs_write_pattern_instrm5
    if _newclass:
        write_pattern_xysig = staticmethod(_pycrysfml.FortFuncs_write_pattern_xysig)
    else:
        write_pattern_xysig = _pycrysfml.FortFuncs_write_pattern_xysig
    if _newclass:
        unitcell_to_pdbfile = staticmethod(_pycrysfml.FortFuncs_unitcell_to_pdbfile)
    else:
        unitcell_to_pdbfile = _pycrysfml.FortFuncs_unitcell_to_pdbfile
    if _newclass:
        ag_theta = staticmethod(_pycrysfml.FortFuncs_ag_theta)
    else:
        ag_theta = _pycrysfml.FortFuncs_ag_theta
    if _newclass:
        al_theta = staticmethod(_pycrysfml.FortFuncs_al_theta)
    else:
        al_theta = _pycrysfml.FortFuncs_al_theta
    if _newclass:
        bg_theta = staticmethod(_pycrysfml.FortFuncs_bg_theta)
    else:
        bg_theta = _pycrysfml.FortFuncs_bg_theta
    if _newclass:
        bl_theta = staticmethod(_pycrysfml.FortFuncs_bl_theta)
    else:
        bl_theta = _pycrysfml.FortFuncs_bl_theta
    if _newclass:
        becker_coppens = staticmethod(_pycrysfml.FortFuncs_becker_coppens)
    else:
        becker_coppens = _pycrysfml.FortFuncs_becker_coppens
    if _newclass:
        shelx_extinction = staticmethod(_pycrysfml.FortFuncs_shelx_extinction)
    else:
        shelx_extinction = _pycrysfml.FortFuncs_shelx_extinction
    if _newclass:
        correct_flippingratios = staticmethod(_pycrysfml.FortFuncs_correct_flippingratios)
    else:
        correct_flippingratios = _pycrysfml.FortFuncs_correct_flippingratios
    if _newclass:
        file_to_filelist = staticmethod(_pycrysfml.FortFuncs_file_to_filelist)
    else:
        file_to_filelist = _pycrysfml.FortFuncs_file_to_filelist
    if _newclass:
        init_err_form = staticmethod(_pycrysfml.FortFuncs_init_err_form)
    else:
        init_err_form = _pycrysfml.FortFuncs_init_err_form
    if _newclass:
        read_uvals = staticmethod(_pycrysfml.FortFuncs_read_uvals)
    else:
        read_uvals = _pycrysfml.FortFuncs_read_uvals
    if _newclass:
        write_cif_powder_profile = staticmethod(_pycrysfml.FortFuncs_write_cif_powder_profile)
    else:
        write_cif_powder_profile = _pycrysfml.FortFuncs_write_cif_powder_profile
    if _newclass:
        write_cif_template = staticmethod(_pycrysfml.FortFuncs_write_cif_template)
    else:
        write_cif_template = _pycrysfml.FortFuncs_write_cif_template
    if _newclass:
        write_shx_template = staticmethod(_pycrysfml.FortFuncs_write_shx_template)
    else:
        write_shx_template = _pycrysfml.FortFuncs_write_shx_template
    if _newclass:
        allocate_coordination_type = staticmethod(_pycrysfml.FortFuncs_allocate_coordination_type)
    else:
        allocate_coordination_type = _pycrysfml.FortFuncs_allocate_coordination_type
    if _newclass:
        allocate_point_list = staticmethod(_pycrysfml.FortFuncs_allocate_point_list)
    else:
        allocate_point_list = _pycrysfml.FortFuncs_allocate_point_list
    if _newclass:
        angle_and_sigma = staticmethod(_pycrysfml.FortFuncs_angle_and_sigma)
    else:
        angle_and_sigma = _pycrysfml.FortFuncs_angle_and_sigma
    if _newclass:
        calc_dist_angle = staticmethod(_pycrysfml.FortFuncs_calc_dist_angle)
    else:
        calc_dist_angle = _pycrysfml.FortFuncs_calc_dist_angle
    if _newclass:
        calc_dist_angle_sigma = staticmethod(_pycrysfml.FortFuncs_calc_dist_angle_sigma)
    else:
        calc_dist_angle_sigma = _pycrysfml.FortFuncs_calc_dist_angle_sigma
    if _newclass:
        deallocate_coordination_type = staticmethod(_pycrysfml.FortFuncs_deallocate_coordination_type)
    else:
        deallocate_coordination_type = _pycrysfml.FortFuncs_deallocate_coordination_type
    if _newclass:
        deallocate_point_list = staticmethod(_pycrysfml.FortFuncs_deallocate_point_list)
    else:
        deallocate_point_list = _pycrysfml.FortFuncs_deallocate_point_list
    if _newclass:
        distance_and_sigma = staticmethod(_pycrysfml.FortFuncs_distance_and_sigma)
    else:
        distance_and_sigma = _pycrysfml.FortFuncs_distance_and_sigma
    if _newclass:
        get_anglen_axis_from_rotmat = staticmethod(_pycrysfml.FortFuncs_get_anglen_axis_from_rotmat)
    else:
        get_anglen_axis_from_rotmat = _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat
    if _newclass:
        get_euler_from_fract = staticmethod(_pycrysfml.FortFuncs_get_euler_from_fract)
    else:
        get_euler_from_fract = _pycrysfml.FortFuncs_get_euler_from_fract
    if _newclass:
        get_matrix_moving_v_to_u = staticmethod(_pycrysfml.FortFuncs_get_matrix_moving_v_to_u)
    else:
        get_matrix_moving_v_to_u = _pycrysfml.FortFuncs_get_matrix_moving_v_to_u
    if _newclass:
        get_omegachiphi = staticmethod(_pycrysfml.FortFuncs_get_omegachiphi)
    else:
        get_omegachiphi = _pycrysfml.FortFuncs_get_omegachiphi
    if _newclass:
        get_phithechi = staticmethod(_pycrysfml.FortFuncs_get_phithechi)
    else:
        get_phithechi = _pycrysfml.FortFuncs_get_phithechi
    if _newclass:
        get_transf_list = staticmethod(_pycrysfml.FortFuncs_get_transf_list)
    else:
        get_transf_list = _pycrysfml.FortFuncs_get_transf_list
    if _newclass:
        init_err_geom = staticmethod(_pycrysfml.FortFuncs_init_err_geom)
    else:
        init_err_geom = _pycrysfml.FortFuncs_init_err_geom
    if _newclass:
        p1_dist = staticmethod(_pycrysfml.FortFuncs_p1_dist)
    else:
        p1_dist = _pycrysfml.FortFuncs_p1_dist
    if _newclass:
        print_distances = staticmethod(_pycrysfml.FortFuncs_print_distances)
    else:
        print_distances = _pycrysfml.FortFuncs_print_distances
    if _newclass:
        set_rotation_matrix = staticmethod(_pycrysfml.FortFuncs_set_rotation_matrix)
    else:
        set_rotation_matrix = _pycrysfml.FortFuncs_set_rotation_matrix
    if _newclass:
        set_tdist_coordination = staticmethod(_pycrysfml.FortFuncs_set_tdist_coordination)
    else:
        set_tdist_coordination = _pycrysfml.FortFuncs_set_tdist_coordination
    if _newclass:
        set_tdist_partial_coordination = staticmethod(_pycrysfml.FortFuncs_set_tdist_partial_coordination)
    else:
        set_tdist_partial_coordination = _pycrysfml.FortFuncs_set_tdist_partial_coordination
    if _newclass:
        torsion_and_sigma = staticmethod(_pycrysfml.FortFuncs_torsion_and_sigma)
    else:
        torsion_and_sigma = _pycrysfml.FortFuncs_torsion_and_sigma
    if _newclass:
        directory_exists = staticmethod(_pycrysfml.FortFuncs_directory_exists)
    else:
        directory_exists = _pycrysfml.FortFuncs_directory_exists
    if _newclass:
        write_date_time = staticmethod(_pycrysfml.FortFuncs_write_date_time)
    else:
        write_date_time = _pycrysfml.FortFuncs_write_date_time
    if _newclass:
        define_uncompress_program = staticmethod(_pycrysfml.FortFuncs_define_uncompress_program)
    else:
        define_uncompress_program = _pycrysfml.FortFuncs_define_uncompress_program
    if _newclass:
        get_absolute_data_path = staticmethod(_pycrysfml.FortFuncs_get_absolute_data_path)
    else:
        get_absolute_data_path = _pycrysfml.FortFuncs_get_absolute_data_path
    if _newclass:
        get_next_yearcycle = staticmethod(_pycrysfml.FortFuncs_get_next_yearcycle)
    else:
        get_next_yearcycle = _pycrysfml.FortFuncs_get_next_yearcycle
    if _newclass:
        init_err_illdata = staticmethod(_pycrysfml.FortFuncs_init_err_illdata)
    else:
        init_err_illdata = _pycrysfml.FortFuncs_init_err_illdata
    if _newclass:
        init_sxtal_numor = staticmethod(_pycrysfml.FortFuncs_init_sxtal_numor)
    else:
        init_sxtal_numor = _pycrysfml.FortFuncs_init_sxtal_numor
    if _newclass:
        initialize_data_directory = staticmethod(_pycrysfml.FortFuncs_initialize_data_directory)
    else:
        initialize_data_directory = _pycrysfml.FortFuncs_initialize_data_directory
    if _newclass:
        read_current_instrm = staticmethod(_pycrysfml.FortFuncs_read_current_instrm)
    else:
        read_current_instrm = _pycrysfml.FortFuncs_read_current_instrm
    if _newclass:
        set_current_orient = staticmethod(_pycrysfml.FortFuncs_set_current_orient)
    else:
        set_current_orient = _pycrysfml.FortFuncs_set_current_orient
    if _newclass:
        set_default_instrument = staticmethod(_pycrysfml.FortFuncs_set_default_instrument)
    else:
        set_default_instrument = _pycrysfml.FortFuncs_set_default_instrument
    if _newclass:
        set_ill_data_directory = staticmethod(_pycrysfml.FortFuncs_set_ill_data_directory)
    else:
        set_ill_data_directory = _pycrysfml.FortFuncs_set_ill_data_directory
    if _newclass:
        set_instrm_directory = staticmethod(_pycrysfml.FortFuncs_set_instrm_directory)
    else:
        set_instrm_directory = _pycrysfml.FortFuncs_set_instrm_directory
    if _newclass:
        set_instrm_geometry_directory = staticmethod(_pycrysfml.FortFuncs_set_instrm_geometry_directory)
    else:
        set_instrm_geometry_directory = _pycrysfml.FortFuncs_set_instrm_geometry_directory
    if _newclass:
        update_current_instrm_ub = staticmethod(_pycrysfml.FortFuncs_update_current_instrm_ub)
    else:
        update_current_instrm_ub = _pycrysfml.FortFuncs_update_current_instrm_ub
    if _newclass:
        write_current_instrm_data = staticmethod(_pycrysfml.FortFuncs_write_current_instrm_data)
    else:
        write_current_instrm_data = _pycrysfml.FortFuncs_write_current_instrm_data
    if _newclass:
        write_generic_numor = staticmethod(_pycrysfml.FortFuncs_write_generic_numor)
    else:
        write_generic_numor = _pycrysfml.FortFuncs_write_generic_numor
    if _newclass:
        write_headerinfo_sxtal_numor = staticmethod(_pycrysfml.FortFuncs_write_headerinfo_sxtal_numor)
    else:
        write_headerinfo_sxtal_numor = _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor
    if _newclass:
        write_sxtal_numor = staticmethod(_pycrysfml.FortFuncs_write_sxtal_numor)
    else:
        write_sxtal_numor = _pycrysfml.FortFuncs_write_sxtal_numor
    if _newclass:
        read_calibration_file = staticmethod(_pycrysfml.FortFuncs_read_calibration_file)
    else:
        read_calibration_file = _pycrysfml.FortFuncs_read_calibration_file
    if _newclass:
        error_message = staticmethod(_pycrysfml.FortFuncs_error_message)
    else:
        error_message = _pycrysfml.FortFuncs_error_message
    if _newclass:
        info_message = staticmethod(_pycrysfml.FortFuncs_info_message)
    else:
        info_message = _pycrysfml.FortFuncs_info_message
    if _newclass:
        print_message = staticmethod(_pycrysfml.FortFuncs_print_message)
    else:
        print_message = _pycrysfml.FortFuncs_print_message
    if _newclass:
        wait_message = staticmethod(_pycrysfml.FortFuncs_wait_message)
    else:
        wait_message = _pycrysfml.FortFuncs_wait_message
    if _newclass:
        write_scroll_text = staticmethod(_pycrysfml.FortFuncs_write_scroll_text)
    else:
        write_scroll_text = _pycrysfml.FortFuncs_write_scroll_text
    if _newclass:
        calc_induced_sk = staticmethod(_pycrysfml.FortFuncs_calc_induced_sk)
    else:
        calc_induced_sk = _pycrysfml.FortFuncs_calc_induced_sk
    if _newclass:
        cleanup_symmetry_operators = staticmethod(_pycrysfml.FortFuncs_cleanup_symmetry_operators)
    else:
        cleanup_symmetry_operators = _pycrysfml.FortFuncs_cleanup_symmetry_operators
    if _newclass:
        init_magsymm_k_type = staticmethod(_pycrysfml.FortFuncs_init_magsymm_k_type)
    else:
        init_magsymm_k_type = _pycrysfml.FortFuncs_init_magsymm_k_type
    if _newclass:
        get_moment_ctr = staticmethod(_pycrysfml.FortFuncs_get_moment_ctr)
    else:
        get_moment_ctr = _pycrysfml.FortFuncs_get_moment_ctr
    if _newclass:
        set_magnetic_space_group = staticmethod(_pycrysfml.FortFuncs_set_magnetic_space_group)
    else:
        set_magnetic_space_group = _pycrysfml.FortFuncs_set_magnetic_space_group
    if _newclass:
        set_shubnikov_group = staticmethod(_pycrysfml.FortFuncs_set_shubnikov_group)
    else:
        set_shubnikov_group = _pycrysfml.FortFuncs_set_shubnikov_group
    if _newclass:
        setting_change_maggroup = staticmethod(_pycrysfml.FortFuncs_setting_change_maggroup)
    else:
        setting_change_maggroup = _pycrysfml.FortFuncs_setting_change_maggroup
    if _newclass:
        write_magnetic_structure = staticmethod(_pycrysfml.FortFuncs_write_magnetic_structure)
    else:
        write_magnetic_structure = _pycrysfml.FortFuncs_write_magnetic_structure
    if _newclass:
        write_mcif = staticmethod(_pycrysfml.FortFuncs_write_mcif)
    else:
        write_mcif = _pycrysfml.FortFuncs_write_mcif
    if _newclass:
        write_shubnikov_group = staticmethod(_pycrysfml.FortFuncs_write_shubnikov_group)
    else:
        write_shubnikov_group = _pycrysfml.FortFuncs_write_shubnikov_group
    if _newclass:
        index_cube = staticmethod(_pycrysfml.FortFuncs_index_cube)
    else:
        index_cube = _pycrysfml.FortFuncs_index_cube
    if _newclass:
        vpoint_in_cube = staticmethod(_pycrysfml.FortFuncs_vpoint_in_cube)
    else:
        vpoint_in_cube = _pycrysfml.FortFuncs_vpoint_in_cube
    if _newclass:
        vpoint_in_line = staticmethod(_pycrysfml.FortFuncs_vpoint_in_line)
    else:
        vpoint_in_line = _pycrysfml.FortFuncs_vpoint_in_line
    if _newclass:
        vpoint_in_square = staticmethod(_pycrysfml.FortFuncs_vpoint_in_square)
    else:
        vpoint_in_square = _pycrysfml.FortFuncs_vpoint_in_square
    if _newclass:
        init_err_maps = staticmethod(_pycrysfml.FortFuncs_init_err_maps)
    else:
        init_err_maps = _pycrysfml.FortFuncs_init_err_maps
    if _newclass:
        set_cube_info = staticmethod(_pycrysfml.FortFuncs_set_cube_info)
    else:
        set_cube_info = _pycrysfml.FortFuncs_set_cube_info
    if _newclass:
        veclength = staticmethod(_pycrysfml.FortFuncs_veclength)
    else:
        veclength = _pycrysfml.FortFuncs_veclength
    if _newclass:
        init_err_math3d = staticmethod(_pycrysfml.FortFuncs_init_err_math3d)
    else:
        init_err_math3d = _pycrysfml.FortFuncs_init_err_math3d
    if _newclass:
        set_eps = staticmethod(_pycrysfml.FortFuncs_set_eps)
    else:
        set_eps = _pycrysfml.FortFuncs_set_eps
    if _newclass:
        set_eps_default = staticmethod(_pycrysfml.FortFuncs_set_eps_default)
    else:
        set_eps_default = _pycrysfml.FortFuncs_set_eps_default
    if _newclass:
        get_plane_from_3points = staticmethod(_pycrysfml.FortFuncs_get_plane_from_3points)
    else:
        get_plane_from_3points = _pycrysfml.FortFuncs_get_plane_from_3points
    if _newclass:
        matrix_diageigen = staticmethod(_pycrysfml.FortFuncs_matrix_diageigen)
    else:
        matrix_diageigen = _pycrysfml.FortFuncs_matrix_diageigen
    if _newclass:
        matrix_inverse = staticmethod(_pycrysfml.FortFuncs_matrix_inverse)
    else:
        matrix_inverse = _pycrysfml.FortFuncs_matrix_inverse
    if _newclass:
        resolv_sist_1x2 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_1x2)
    else:
        resolv_sist_1x2 = _pycrysfml.FortFuncs_resolv_sist_1x2
    if _newclass:
        resolv_sist_1x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_1x3)
    else:
        resolv_sist_1x3 = _pycrysfml.FortFuncs_resolv_sist_1x3
    if _newclass:
        resolv_sist_2x2 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_2x2)
    else:
        resolv_sist_2x2 = _pycrysfml.FortFuncs_resolv_sist_2x2
    if _newclass:
        resolv_sist_2x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_2x3)
    else:
        resolv_sist_2x3 = _pycrysfml.FortFuncs_resolv_sist_2x3
    if _newclass:
        resolv_sist_3x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_3x3)
    else:
        resolv_sist_3x3 = _pycrysfml.FortFuncs_resolv_sist_3x3
    if _newclass:
        bessj0 = staticmethod(_pycrysfml.FortFuncs_bessj0)
    else:
        bessj0 = _pycrysfml.FortFuncs_bessj0
    if _newclass:
        bessj1 = staticmethod(_pycrysfml.FortFuncs_bessj1)
    else:
        bessj1 = _pycrysfml.FortFuncs_bessj1
    if _newclass:
        bessj = staticmethod(_pycrysfml.FortFuncs_bessj)
    else:
        bessj = _pycrysfml.FortFuncs_bessj
    if _newclass:
        pgcd = staticmethod(_pycrysfml.FortFuncs_pgcd)
    else:
        pgcd = _pycrysfml.FortFuncs_pgcd
    if _newclass:
        ppcm = staticmethod(_pycrysfml.FortFuncs_ppcm)
    else:
        ppcm = _pycrysfml.FortFuncs_ppcm
    if _newclass:
        epss_val = staticmethod(_pycrysfml.FortFuncs_epss_val)
    else:
        epss_val = _pycrysfml.FortFuncs_epss_val
    if _newclass:
        ep_ss_val = staticmethod(_pycrysfml.FortFuncs_ep_ss_val)
    else:
        ep_ss_val = _pycrysfml.FortFuncs_ep_ss_val
    if _newclass:
        init_err_mathgen = staticmethod(_pycrysfml.FortFuncs_init_err_mathgen)
    else:
        init_err_mathgen = _pycrysfml.FortFuncs_init_err_mathgen
    if _newclass:
        set_epsg_default = staticmethod(_pycrysfml.FortFuncs_set_epsg_default)
    else:
        set_epsg_default = _pycrysfml.FortFuncs_set_epsg_default
    if _newclass:
        cartesian_to_fractional = staticmethod(_pycrysfml.FortFuncs_cartesian_to_fractional)
    else:
        cartesian_to_fractional = _pycrysfml.FortFuncs_cartesian_to_fractional
    if _newclass:
        cartesian_to_spherical = staticmethod(_pycrysfml.FortFuncs_cartesian_to_spherical)
    else:
        cartesian_to_spherical = _pycrysfml.FortFuncs_cartesian_to_spherical
    if _newclass:
        cartesian_to_zmatrix = staticmethod(_pycrysfml.FortFuncs_cartesian_to_zmatrix)
    else:
        cartesian_to_zmatrix = _pycrysfml.FortFuncs_cartesian_to_zmatrix
    if _newclass:
        fix_reference = staticmethod(_pycrysfml.FortFuncs_fix_reference)
    else:
        fix_reference = _pycrysfml.FortFuncs_fix_reference
    if _newclass:
        fix_orient_cartesian = staticmethod(_pycrysfml.FortFuncs_fix_orient_cartesian)
    else:
        fix_orient_cartesian = _pycrysfml.FortFuncs_fix_orient_cartesian
    if _newclass:
        fractional_to_cartesian = staticmethod(_pycrysfml.FortFuncs_fractional_to_cartesian)
    else:
        fractional_to_cartesian = _pycrysfml.FortFuncs_fractional_to_cartesian
    if _newclass:
        fractional_to_spherical = staticmethod(_pycrysfml.FortFuncs_fractional_to_spherical)
    else:
        fractional_to_spherical = _pycrysfml.FortFuncs_fractional_to_spherical
    if _newclass:
        fractional_to_zmatrix = staticmethod(_pycrysfml.FortFuncs_fractional_to_zmatrix)
    else:
        fractional_to_zmatrix = _pycrysfml.FortFuncs_fractional_to_zmatrix
    if _newclass:
        init_err_molec = staticmethod(_pycrysfml.FortFuncs_init_err_molec)
    else:
        init_err_molec = _pycrysfml.FortFuncs_init_err_molec
    if _newclass:
        init_molecule = staticmethod(_pycrysfml.FortFuncs_init_molecule)
    else:
        init_molecule = _pycrysfml.FortFuncs_init_molecule
    if _newclass:
        init_mol_crys = staticmethod(_pycrysfml.FortFuncs_init_mol_crys)
    else:
        init_mol_crys = _pycrysfml.FortFuncs_init_mol_crys
    if _newclass:
        molcrys_to_atomlist = staticmethod(_pycrysfml.FortFuncs_molcrys_to_atomlist)
    else:
        molcrys_to_atomlist = _pycrysfml.FortFuncs_molcrys_to_atomlist
    if _newclass:
        molec_to_atomlist = staticmethod(_pycrysfml.FortFuncs_molec_to_atomlist)
    else:
        molec_to_atomlist = _pycrysfml.FortFuncs_molec_to_atomlist
    if _newclass:
        set_euler_matrix = staticmethod(_pycrysfml.FortFuncs_set_euler_matrix)
    else:
        set_euler_matrix = _pycrysfml.FortFuncs_set_euler_matrix
    if _newclass:
        spherical_to_cartesian = staticmethod(_pycrysfml.FortFuncs_spherical_to_cartesian)
    else:
        spherical_to_cartesian = _pycrysfml.FortFuncs_spherical_to_cartesian
    if _newclass:
        spherical_to_fractional = staticmethod(_pycrysfml.FortFuncs_spherical_to_fractional)
    else:
        spherical_to_fractional = _pycrysfml.FortFuncs_spherical_to_fractional
    if _newclass:
        spherical_to_zmatrix = staticmethod(_pycrysfml.FortFuncs_spherical_to_zmatrix)
    else:
        spherical_to_zmatrix = _pycrysfml.FortFuncs_spherical_to_zmatrix
    if _newclass:
        write_molecular_crystal = staticmethod(_pycrysfml.FortFuncs_write_molecular_crystal)
    else:
        write_molecular_crystal = _pycrysfml.FortFuncs_write_molecular_crystal
    if _newclass:
        write_molecule = staticmethod(_pycrysfml.FortFuncs_write_molecule)
    else:
        write_molecule = _pycrysfml.FortFuncs_write_molecule
    if _newclass:
        zmatrix_to_cartesian = staticmethod(_pycrysfml.FortFuncs_zmatrix_to_cartesian)
    else:
        zmatrix_to_cartesian = _pycrysfml.FortFuncs_zmatrix_to_cartesian
    if _newclass:
        zmatrix_to_fractional = staticmethod(_pycrysfml.FortFuncs_zmatrix_to_fractional)
    else:
        zmatrix_to_fractional = _pycrysfml.FortFuncs_zmatrix_to_fractional
    if _newclass:
        zmatrix_to_spherical = staticmethod(_pycrysfml.FortFuncs_zmatrix_to_spherical)
    else:
        zmatrix_to_spherical = _pycrysfml.FortFuncs_zmatrix_to_spherical
    if _newclass:
        calc_mag_interaction_vector = staticmethod(_pycrysfml.FortFuncs_calc_mag_interaction_vector)
    else:
        calc_mag_interaction_vector = _pycrysfml.FortFuncs_calc_mag_interaction_vector
    if _newclass:
        calc_magnetic_strf_miv = staticmethod(_pycrysfml.FortFuncs_calc_magnetic_strf_miv)
    else:
        calc_magnetic_strf_miv = _pycrysfml.FortFuncs_calc_magnetic_strf_miv
    if _newclass:
        calc_magnetic_strf_miv_dom = staticmethod(_pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom)
    else:
        calc_magnetic_strf_miv_dom = _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom
    if _newclass:
        calc_magnetic_strf_tensor = staticmethod(_pycrysfml.FortFuncs_calc_magnetic_strf_tensor)
    else:
        calc_magnetic_strf_tensor = _pycrysfml.FortFuncs_calc_magnetic_strf_tensor
    if _newclass:
        gen_satellites = staticmethod(_pycrysfml.FortFuncs_gen_satellites)
    else:
        gen_satellites = _pycrysfml.FortFuncs_gen_satellites
    if _newclass:
        init_err_msfac = staticmethod(_pycrysfml.FortFuncs_init_err_msfac)
    else:
        init_err_msfac = _pycrysfml.FortFuncs_init_err_msfac
    if _newclass:
        init_mag_structure_factors = staticmethod(_pycrysfml.FortFuncs_init_mag_structure_factors)
    else:
        init_mag_structure_factors = _pycrysfml.FortFuncs_init_mag_structure_factors
    if _newclass:
        mag_structure_factors = staticmethod(_pycrysfml.FortFuncs_mag_structure_factors)
    else:
        mag_structure_factors = _pycrysfml.FortFuncs_mag_structure_factors
    if _newclass:
        write_mag_structure_factors = staticmethod(_pycrysfml.FortFuncs_write_mag_structure_factors)
    else:
        write_mag_structure_factors = _pycrysfml.FortFuncs_write_mag_structure_factors
    if _newclass:
        init_err_optim = staticmethod(_pycrysfml.FortFuncs_init_err_optim)
    else:
        init_err_optim = _pycrysfml.FortFuncs_init_err_optim
    if _newclass:
        init_opt_conditions = staticmethod(_pycrysfml.FortFuncs_init_opt_conditions)
    else:
        init_opt_conditions = _pycrysfml.FortFuncs_init_opt_conditions
    if _newclass:
        write_optimization_conditions = staticmethod(_pycrysfml.FortFuncs_write_optimization_conditions)
    else:
        write_optimization_conditions = _pycrysfml.FortFuncs_write_optimization_conditions
    if _newclass:
        write_polar_info = staticmethod(_pycrysfml.FortFuncs_write_polar_info)
    else:
        write_polar_info = _pycrysfml.FortFuncs_write_polar_info
    if _newclass:
        write_polar_line = staticmethod(_pycrysfml.FortFuncs_write_polar_line)
    else:
        write_polar_line = _pycrysfml.FortFuncs_write_polar_line
    if _newclass:
        init_prof_val = staticmethod(_pycrysfml.FortFuncs_init_prof_val)
    else:
        init_prof_val = _pycrysfml.FortFuncs_init_prof_val
    if _newclass:
        prof_val = staticmethod(_pycrysfml.FortFuncs_prof_val)
    else:
        prof_val = _pycrysfml.FortFuncs_prof_val
    if _newclass:
        tof_carpenter = staticmethod(_pycrysfml.FortFuncs_tof_carpenter)
    else:
        tof_carpenter = _pycrysfml.FortFuncs_tof_carpenter
    if _newclass:
        tof_jorgensen = staticmethod(_pycrysfml.FortFuncs_tof_jorgensen)
    else:
        tof_jorgensen = _pycrysfml.FortFuncs_tof_jorgensen
    if _newclass:
        tof_jorgensen_vondreele = staticmethod(_pycrysfml.FortFuncs_tof_jorgensen_vondreele)
    else:
        tof_jorgensen_vondreele = _pycrysfml.FortFuncs_tof_jorgensen_vondreele
    if _newclass:
        hk_equiv = staticmethod(_pycrysfml.FortFuncs_hk_equiv)
    else:
        hk_equiv = _pycrysfml.FortFuncs_hk_equiv
    if _newclass:
        k_equiv = staticmethod(_pycrysfml.FortFuncs_k_equiv)
    else:
        k_equiv = _pycrysfml.FortFuncs_k_equiv
    if _newclass:
        k_equiv_minus_k = staticmethod(_pycrysfml.FortFuncs_k_equiv_minus_k)
    else:
        k_equiv_minus_k = _pycrysfml.FortFuncs_k_equiv_minus_k
    if _newclass:
        k_star = staticmethod(_pycrysfml.FortFuncs_k_star)
    else:
        k_star = _pycrysfml.FortFuncs_k_star
    if _newclass:
        write_group_k = staticmethod(_pycrysfml.FortFuncs_write_group_k)
    else:
        write_group_k = _pycrysfml.FortFuncs_write_group_k
    if _newclass:
        init_err_random = staticmethod(_pycrysfml.FortFuncs_init_err_random)
    else:
        init_err_random = _pycrysfml.FortFuncs_init_err_random
    if _newclass:
        random_beta = staticmethod(_pycrysfml.FortFuncs_random_beta)
    else:
        random_beta = _pycrysfml.FortFuncs_random_beta
    if _newclass:
        random_binomial1 = staticmethod(_pycrysfml.FortFuncs_random_binomial1)
    else:
        random_binomial1 = _pycrysfml.FortFuncs_random_binomial1
    if _newclass:
        random_binomial2 = staticmethod(_pycrysfml.FortFuncs_random_binomial2)
    else:
        random_binomial2 = _pycrysfml.FortFuncs_random_binomial2
    if _newclass:
        random_cauchy = staticmethod(_pycrysfml.FortFuncs_random_cauchy)
    else:
        random_cauchy = _pycrysfml.FortFuncs_random_cauchy
    if _newclass:
        random_chisq = staticmethod(_pycrysfml.FortFuncs_random_chisq)
    else:
        random_chisq = _pycrysfml.FortFuncs_random_chisq
    if _newclass:
        random_exponential = staticmethod(_pycrysfml.FortFuncs_random_exponential)
    else:
        random_exponential = _pycrysfml.FortFuncs_random_exponential
    if _newclass:
        random_gamma = staticmethod(_pycrysfml.FortFuncs_random_gamma)
    else:
        random_gamma = _pycrysfml.FortFuncs_random_gamma
    if _newclass:
        random_gamma1 = staticmethod(_pycrysfml.FortFuncs_random_gamma1)
    else:
        random_gamma1 = _pycrysfml.FortFuncs_random_gamma1
    if _newclass:
        random_gamma2 = staticmethod(_pycrysfml.FortFuncs_random_gamma2)
    else:
        random_gamma2 = _pycrysfml.FortFuncs_random_gamma2
    if _newclass:
        random_inv_gauss = staticmethod(_pycrysfml.FortFuncs_random_inv_gauss)
    else:
        random_inv_gauss = _pycrysfml.FortFuncs_random_inv_gauss
    if _newclass:
        random_mvnorm = staticmethod(_pycrysfml.FortFuncs_random_mvnorm)
    else:
        random_mvnorm = _pycrysfml.FortFuncs_random_mvnorm
    if _newclass:
        random_neg_binomial = staticmethod(_pycrysfml.FortFuncs_random_neg_binomial)
    else:
        random_neg_binomial = _pycrysfml.FortFuncs_random_neg_binomial
    if _newclass:
        random_normal = staticmethod(_pycrysfml.FortFuncs_random_normal)
    else:
        random_normal = _pycrysfml.FortFuncs_random_normal
    if _newclass:
        random_order = staticmethod(_pycrysfml.FortFuncs_random_order)
    else:
        random_order = _pycrysfml.FortFuncs_random_order
    if _newclass:
        random_poisson = staticmethod(_pycrysfml.FortFuncs_random_poisson)
    else:
        random_poisson = _pycrysfml.FortFuncs_random_poisson
    if _newclass:
        random_t = staticmethod(_pycrysfml.FortFuncs_random_t)
    else:
        random_t = _pycrysfml.FortFuncs_random_t
    if _newclass:
        random_von_mises = staticmethod(_pycrysfml.FortFuncs_random_von_mises)
    else:
        random_von_mises = _pycrysfml.FortFuncs_random_von_mises
    if _newclass:
        random_weibull = staticmethod(_pycrysfml.FortFuncs_random_weibull)
    else:
        random_weibull = _pycrysfml.FortFuncs_random_weibull
    if _newclass:
        seed_random_number = staticmethod(_pycrysfml.FortFuncs_seed_random_number)
    else:
        seed_random_number = _pycrysfml.FortFuncs_seed_random_number
    if _newclass:
        allocate_vparam = staticmethod(_pycrysfml.FortFuncs_allocate_vparam)
    else:
        allocate_vparam = _pycrysfml.FortFuncs_allocate_vparam
    if _newclass:
        get_restang_line = staticmethod(_pycrysfml.FortFuncs_get_restang_line)
    else:
        get_restang_line = _pycrysfml.FortFuncs_get_restang_line
    if _newclass:
        get_restdis_line = staticmethod(_pycrysfml.FortFuncs_get_restdis_line)
    else:
        get_restdis_line = _pycrysfml.FortFuncs_get_restdis_line
    if _newclass:
        get_resttor_line = staticmethod(_pycrysfml.FortFuncs_get_resttor_line)
    else:
        get_resttor_line = _pycrysfml.FortFuncs_get_resttor_line
    if _newclass:
        init_err_refcodes = staticmethod(_pycrysfml.FortFuncs_init_err_refcodes)
    else:
        init_err_refcodes = _pycrysfml.FortFuncs_init_err_refcodes
    if _newclass:
        init_refcodes = staticmethod(_pycrysfml.FortFuncs_init_refcodes)
    else:
        init_refcodes = _pycrysfml.FortFuncs_init_refcodes
    if _newclass:
        read_refgcodes_file = staticmethod(_pycrysfml.FortFuncs_read_refgcodes_file)
    else:
        read_refgcodes_file = _pycrysfml.FortFuncs_read_refgcodes_file
    if _newclass:
        vstate_to_modelpar = staticmethod(_pycrysfml.FortFuncs_vstate_to_modelpar)
    else:
        vstate_to_modelpar = _pycrysfml.FortFuncs_vstate_to_modelpar
    if _newclass:
        write_info_refgcodes = staticmethod(_pycrysfml.FortFuncs_write_info_refgcodes)
    else:
        write_info_refgcodes = _pycrysfml.FortFuncs_write_info_refgcodes
    if _newclass:
        write_info_refparams = staticmethod(_pycrysfml.FortFuncs_write_info_refparams)
    else:
        write_info_refparams = _pycrysfml.FortFuncs_write_info_refparams
    if _newclass:
        write_restraints_obscalc = staticmethod(_pycrysfml.FortFuncs_write_restraints_obscalc)
    else:
        write_restraints_obscalc = _pycrysfml.FortFuncs_write_restraints_obscalc
    if _newclass:
        get_maxnumref = staticmethod(_pycrysfml.FortFuncs_get_maxnumref)
    else:
        get_maxnumref = _pycrysfml.FortFuncs_get_maxnumref
    if _newclass:
        mhkl_absent = staticmethod(_pycrysfml.FortFuncs_mhkl_absent)
    else:
        mhkl_absent = _pycrysfml.FortFuncs_mhkl_absent
    if _newclass:
        init_err_refl = staticmethod(_pycrysfml.FortFuncs_init_err_refl)
    else:
        init_err_refl = _pycrysfml.FortFuncs_init_err_refl
    if _newclass:
        init_reflist = staticmethod(_pycrysfml.FortFuncs_init_reflist)
    else:
        init_reflist = _pycrysfml.FortFuncs_init_reflist
    if _newclass:
        write_asu = staticmethod(_pycrysfml.FortFuncs_write_asu)
    else:
        write_asu = _pycrysfml.FortFuncs_write_asu
    if _newclass:
        write_reflist_info = staticmethod(_pycrysfml.FortFuncs_write_reflist_info)
    else:
        write_reflist_info = _pycrysfml.FortFuncs_write_reflist_info
    if _newclass:
        angs_4c_bisecting = staticmethod(_pycrysfml.FortFuncs_angs_4c_bisecting)
    else:
        angs_4c_bisecting = _pycrysfml.FortFuncs_angs_4c_bisecting
    if _newclass:
        calang = staticmethod(_pycrysfml.FortFuncs_calang)
    else:
        calang = _pycrysfml.FortFuncs_calang
    if _newclass:
        calc_om_chi_phi = staticmethod(_pycrysfml.FortFuncs_calc_om_chi_phi)
    else:
        calc_om_chi_phi = _pycrysfml.FortFuncs_calc_om_chi_phi
    if _newclass:
        calc_psi = staticmethod(_pycrysfml.FortFuncs_calc_psi)
    else:
        calc_psi = _pycrysfml.FortFuncs_calc_psi
    if _newclass:
        cell_fr_ub = staticmethod(_pycrysfml.FortFuncs_cell_fr_ub)
    else:
        cell_fr_ub = _pycrysfml.FortFuncs_cell_fr_ub
    if _newclass:
        chi_mat = staticmethod(_pycrysfml.FortFuncs_chi_mat)
    else:
        chi_mat = _pycrysfml.FortFuncs_chi_mat
    if _newclass:
        psd_convert = staticmethod(_pycrysfml.FortFuncs_psd_convert)
    else:
        psd_convert = _pycrysfml.FortFuncs_psd_convert
    if _newclass:
        d19psd = staticmethod(_pycrysfml.FortFuncs_d19psd)
    else:
        d19psd = _pycrysfml.FortFuncs_d19psd
    if _newclass:
        dspace = staticmethod(_pycrysfml.FortFuncs_dspace)
    else:
        dspace = _pycrysfml.FortFuncs_dspace
    if _newclass:
        equatorial_chi_phi = staticmethod(_pycrysfml.FortFuncs_equatorial_chi_phi)
    else:
        equatorial_chi_phi = _pycrysfml.FortFuncs_equatorial_chi_phi
    if _newclass:
        fixdnu = staticmethod(_pycrysfml.FortFuncs_fixdnu)
    else:
        fixdnu = _pycrysfml.FortFuncs_fixdnu
    if _newclass:
        flat_cone_vertdet = staticmethod(_pycrysfml.FortFuncs_flat_cone_vertdet)
    else:
        flat_cone_vertdet = _pycrysfml.FortFuncs_flat_cone_vertdet
    if _newclass:
        genb = staticmethod(_pycrysfml.FortFuncs_genb)
    else:
        genb = _pycrysfml.FortFuncs_genb
    if _newclass:
        genub = staticmethod(_pycrysfml.FortFuncs_genub)
    else:
        genub = _pycrysfml.FortFuncs_genub
    if _newclass:
        get_angs_nb = staticmethod(_pycrysfml.FortFuncs_get_angs_nb)
    else:
        get_angs_nb = _pycrysfml.FortFuncs_get_angs_nb
    if _newclass:
        get_dspacing_theta = staticmethod(_pycrysfml.FortFuncs_get_dspacing_theta)
    else:
        get_dspacing_theta = _pycrysfml.FortFuncs_get_dspacing_theta
    if _newclass:
        get_gaomnu_frchiphi = staticmethod(_pycrysfml.FortFuncs_get_gaomnu_frchiphi)
    else:
        get_gaomnu_frchiphi = _pycrysfml.FortFuncs_get_gaomnu_frchiphi
    if _newclass:
        get_ub_from_hkl_hkl_omega = staticmethod(_pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega)
    else:
        get_ub_from_hkl_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega
    if _newclass:
        get_ub_from_uvw_hkl_omega = staticmethod(_pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega)
    else:
        get_ub_from_uvw_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega
    if _newclass:
        get_waveganu_frz4 = staticmethod(_pycrysfml.FortFuncs_get_waveganu_frz4)
    else:
        get_waveganu_frz4 = _pycrysfml.FortFuncs_get_waveganu_frz4
    if _newclass:
        get_z1_d9angls = staticmethod(_pycrysfml.FortFuncs_get_z1_d9angls)
    else:
        get_z1_d9angls = _pycrysfml.FortFuncs_get_z1_d9angls
    if _newclass:
        normal = staticmethod(_pycrysfml.FortFuncs_normal)
    else:
        normal = _pycrysfml.FortFuncs_normal
    if _newclass:
        phi_mat = staticmethod(_pycrysfml.FortFuncs_phi_mat)
    else:
        phi_mat = _pycrysfml.FortFuncs_phi_mat
    if _newclass:
        psi_mat = staticmethod(_pycrysfml.FortFuncs_psi_mat)
    else:
        psi_mat = _pycrysfml.FortFuncs_psi_mat
    if _newclass:
        read_twinlaw = staticmethod(_pycrysfml.FortFuncs_read_twinlaw)
    else:
        read_twinlaw = _pycrysfml.FortFuncs_read_twinlaw
    if _newclass:
        refvec = staticmethod(_pycrysfml.FortFuncs_refvec)
    else:
        refvec = _pycrysfml.FortFuncs_refvec
    if _newclass:
        s4cnb = staticmethod(_pycrysfml.FortFuncs_s4cnb)
    else:
        s4cnb = _pycrysfml.FortFuncs_s4cnb
    if _newclass:
        set_psd = staticmethod(_pycrysfml.FortFuncs_set_psd)
    else:
        set_psd = _pycrysfml.FortFuncs_set_psd
    if _newclass:
        snb4c = staticmethod(_pycrysfml.FortFuncs_snb4c)
    else:
        snb4c = _pycrysfml.FortFuncs_snb4c
    if _newclass:
        sxdpsd = staticmethod(_pycrysfml.FortFuncs_sxdpsd)
    else:
        sxdpsd = _pycrysfml.FortFuncs_sxdpsd
    if _newclass:
        triple = staticmethod(_pycrysfml.FortFuncs_triple)
    else:
        triple = _pycrysfml.FortFuncs_triple
    if _newclass:
        write_twinlaw = staticmethod(_pycrysfml.FortFuncs_write_twinlaw)
    else:
        write_twinlaw = _pycrysfml.FortFuncs_write_twinlaw
    if _newclass:
        z1frfc = staticmethod(_pycrysfml.FortFuncs_z1frfc)
    else:
        z1frfc = _pycrysfml.FortFuncs_z1frfc
    if _newclass:
        z1frmd = staticmethod(_pycrysfml.FortFuncs_z1frmd)
    else:
        z1frmd = _pycrysfml.FortFuncs_z1frmd
    if _newclass:
        z1frnb = staticmethod(_pycrysfml.FortFuncs_z1frnb)
    else:
        z1frnb = _pycrysfml.FortFuncs_z1frnb
    if _newclass:
        z1frz2 = staticmethod(_pycrysfml.FortFuncs_z1frz2)
    else:
        z1frz2 = _pycrysfml.FortFuncs_z1frz2
    if _newclass:
        z1frz3 = staticmethod(_pycrysfml.FortFuncs_z1frz3)
    else:
        z1frz3 = _pycrysfml.FortFuncs_z1frz3
    if _newclass:
        z1frz4 = staticmethod(_pycrysfml.FortFuncs_z1frz4)
    else:
        z1frz4 = _pycrysfml.FortFuncs_z1frz4
    if _newclass:
        z2frz1 = staticmethod(_pycrysfml.FortFuncs_z2frz1)
    else:
        z2frz1 = _pycrysfml.FortFuncs_z2frz1
    if _newclass:
        z3frz1 = staticmethod(_pycrysfml.FortFuncs_z3frz1)
    else:
        z3frz1 = _pycrysfml.FortFuncs_z3frz1
    if _newclass:
        z4frgn = staticmethod(_pycrysfml.FortFuncs_z4frgn)
    else:
        z4frgn = _pycrysfml.FortFuncs_z4frgn
    if _newclass:
        z4frz1 = staticmethod(_pycrysfml.FortFuncs_z4frz1)
    else:
        z4frz1 = _pycrysfml.FortFuncs_z4frz1
    if _newclass:
        additional_scattering_factors = staticmethod(_pycrysfml.FortFuncs_additional_scattering_factors)
    else:
        additional_scattering_factors = _pycrysfml.FortFuncs_additional_scattering_factors
    if _newclass:
        allocate_scattering_species = staticmethod(_pycrysfml.FortFuncs_allocate_scattering_species)
    else:
        allocate_scattering_species = _pycrysfml.FortFuncs_allocate_scattering_species
    if _newclass:
        calc_strfactor = staticmethod(_pycrysfml.FortFuncs_calc_strfactor)
    else:
        calc_strfactor = _pycrysfml.FortFuncs_calc_strfactor
    if _newclass:
        calc_hkl_strfactor = staticmethod(_pycrysfml.FortFuncs_calc_hkl_strfactor)
    else:
        calc_hkl_strfactor = _pycrysfml.FortFuncs_calc_hkl_strfactor
    if _newclass:
        init_calc_hkl_strfactors = staticmethod(_pycrysfml.FortFuncs_init_calc_hkl_strfactors)
    else:
        init_calc_hkl_strfactors = _pycrysfml.FortFuncs_init_calc_hkl_strfactors
    if _newclass:
        init_calc_strfactors = staticmethod(_pycrysfml.FortFuncs_init_calc_strfactors)
    else:
        init_calc_strfactors = _pycrysfml.FortFuncs_init_calc_strfactors
    if _newclass:
        init_structure_factors = staticmethod(_pycrysfml.FortFuncs_init_structure_factors)
    else:
        init_structure_factors = _pycrysfml.FortFuncs_init_structure_factors
    if _newclass:
        structure_factors = staticmethod(_pycrysfml.FortFuncs_structure_factors)
    else:
        structure_factors = _pycrysfml.FortFuncs_structure_factors
    if _newclass:
        write_structure_factors = staticmethod(_pycrysfml.FortFuncs_write_structure_factors)
    else:
        write_structure_factors = _pycrysfml.FortFuncs_write_structure_factors
    if _newclass:
        cubic_harm_ang = staticmethod(_pycrysfml.FortFuncs_cubic_harm_ang)
    else:
        cubic_harm_ang = _pycrysfml.FortFuncs_cubic_harm_ang
    if _newclass:
        cubic_harm_ucvec = staticmethod(_pycrysfml.FortFuncs_cubic_harm_ucvec)
    else:
        cubic_harm_ucvec = _pycrysfml.FortFuncs_cubic_harm_ucvec
    if _newclass:
        int_slater_bessel = staticmethod(_pycrysfml.FortFuncs_int_slater_bessel)
    else:
        int_slater_bessel = _pycrysfml.FortFuncs_int_slater_bessel
    if _newclass:
        real_spher_harm_ang = staticmethod(_pycrysfml.FortFuncs_real_spher_harm_ang)
    else:
        real_spher_harm_ang = _pycrysfml.FortFuncs_real_spher_harm_ang
    if _newclass:
        real_spher_harm_ucvec = staticmethod(_pycrysfml.FortFuncs_real_spher_harm_ucvec)
    else:
        real_spher_harm_ucvec = _pycrysfml.FortFuncs_real_spher_harm_ucvec
    if _newclass:
        real_spher_harmcharge_ucvec = staticmethod(_pycrysfml.FortFuncs_real_spher_harmcharge_ucvec)
    else:
        real_spher_harmcharge_ucvec = _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec
    if _newclass:
        init_err_spher = staticmethod(_pycrysfml.FortFuncs_init_err_spher)
    else:
        init_err_spher = _pycrysfml.FortFuncs_init_err_spher
    if _newclass:
        pikout_lj_cubic = staticmethod(_pycrysfml.FortFuncs_pikout_lj_cubic)
    else:
        pikout_lj_cubic = _pycrysfml.FortFuncs_pikout_lj_cubic
    if _newclass:
        get_generators = staticmethod(_pycrysfml.FortFuncs_get_generators)
    else:
        get_generators = _pycrysfml.FortFuncs_get_generators
    if _newclass:
        remove_spgr_info = staticmethod(_pycrysfml.FortFuncs_remove_spgr_info)
    else:
        remove_spgr_info = _pycrysfml.FortFuncs_remove_spgr_info
    if _newclass:
        remove_system_equiv = staticmethod(_pycrysfml.FortFuncs_remove_system_equiv)
    else:
        remove_system_equiv = _pycrysfml.FortFuncs_remove_system_equiv
    if _newclass:
        remove_wyckoff_info = staticmethod(_pycrysfml.FortFuncs_remove_wyckoff_info)
    else:
        remove_wyckoff_info = _pycrysfml.FortFuncs_remove_wyckoff_info
    if _newclass:
        set_spgr_info = staticmethod(_pycrysfml.FortFuncs_set_spgr_info)
    else:
        set_spgr_info = _pycrysfml.FortFuncs_set_spgr_info
    if _newclass:
        set_system_equiv = staticmethod(_pycrysfml.FortFuncs_set_system_equiv)
    else:
        set_system_equiv = _pycrysfml.FortFuncs_set_system_equiv
    if _newclass:
        set_wyckoff_info = staticmethod(_pycrysfml.FortFuncs_set_wyckoff_info)
    else:
        set_wyckoff_info = _pycrysfml.FortFuncs_set_wyckoff_info
    if _newclass:
        axes_rotation = staticmethod(_pycrysfml.FortFuncs_axes_rotation)
    else:
        axes_rotation = _pycrysfml.FortFuncs_axes_rotation
    if _newclass:
        get_laue_num = staticmethod(_pycrysfml.FortFuncs_get_laue_num)
    else:
        get_laue_num = _pycrysfml.FortFuncs_get_laue_num
    if _newclass:
        get_multip_pos = staticmethod(_pycrysfml.FortFuncs_get_multip_pos)
    else:
        get_multip_pos = _pycrysfml.FortFuncs_get_multip_pos
    if _newclass:
        get_occ_site = staticmethod(_pycrysfml.FortFuncs_get_occ_site)
    else:
        get_occ_site = _pycrysfml.FortFuncs_get_occ_site
    if _newclass:
        get_pointgroup_num = staticmethod(_pycrysfml.FortFuncs_get_pointgroup_num)
    else:
        get_pointgroup_num = _pycrysfml.FortFuncs_get_pointgroup_num
    if _newclass:
        lattice_trans = staticmethod(_pycrysfml.FortFuncs_lattice_trans)
    else:
        lattice_trans = _pycrysfml.FortFuncs_lattice_trans
    if _newclass:
        spgr_equal = staticmethod(_pycrysfml.FortFuncs_spgr_equal)
    else:
        spgr_equal = _pycrysfml.FortFuncs_spgr_equal
    if _newclass:
        allocate_lattice_centring = staticmethod(_pycrysfml.FortFuncs_allocate_lattice_centring)
    else:
        allocate_lattice_centring = _pycrysfml.FortFuncs_allocate_lattice_centring
    if _newclass:
        check_generator = staticmethod(_pycrysfml.FortFuncs_check_generator)
    else:
        check_generator = _pycrysfml.FortFuncs_check_generator
    if _newclass:
        decodmatmag = staticmethod(_pycrysfml.FortFuncs_decodmatmag)
    else:
        decodmatmag = _pycrysfml.FortFuncs_decodmatmag
    if _newclass:
        get_laue_str = staticmethod(_pycrysfml.FortFuncs_get_laue_str)
    else:
        get_laue_str = _pycrysfml.FortFuncs_get_laue_str
    if _newclass:
        get_pointgroup_str = staticmethod(_pycrysfml.FortFuncs_get_pointgroup_str)
    else:
        get_pointgroup_str = _pycrysfml.FortFuncs_get_pointgroup_str
    if _newclass:
        get_seitz_symbol = staticmethod(_pycrysfml.FortFuncs_get_seitz_symbol)
    else:
        get_seitz_symbol = _pycrysfml.FortFuncs_get_seitz_symbol
    if _newclass:
        get_setting_info = staticmethod(_pycrysfml.FortFuncs_get_setting_info)
    else:
        get_setting_info = _pycrysfml.FortFuncs_get_setting_info
    if _newclass:
        get_shubnikov_operator_symbol = staticmethod(_pycrysfml.FortFuncs_get_shubnikov_operator_symbol)
    else:
        get_shubnikov_operator_symbol = _pycrysfml.FortFuncs_get_shubnikov_operator_symbol
    if _newclass:
        get_string_resolv = staticmethod(_pycrysfml.FortFuncs_get_string_resolv)
    else:
        get_string_resolv = _pycrysfml.FortFuncs_get_string_resolv
    if _newclass:
        get_symel = staticmethod(_pycrysfml.FortFuncs_get_symel)
    else:
        get_symel = _pycrysfml.FortFuncs_get_symel
    if _newclass:
        get_symkov = staticmethod(_pycrysfml.FortFuncs_get_symkov)
    else:
        get_symkov = _pycrysfml.FortFuncs_get_symkov
    if _newclass:
        get_trasfm_symbol = staticmethod(_pycrysfml.FortFuncs_get_trasfm_symbol)
    else:
        get_trasfm_symbol = _pycrysfml.FortFuncs_get_trasfm_symbol
    if _newclass:
        get_transl_symbol = staticmethod(_pycrysfml.FortFuncs_get_transl_symbol)
    else:
        get_transl_symbol = _pycrysfml.FortFuncs_get_transl_symbol
    if _newclass:
        init_err_symm = staticmethod(_pycrysfml.FortFuncs_init_err_symm)
    else:
        init_err_symm = _pycrysfml.FortFuncs_init_err_symm
    if _newclass:
        inverse_symm = staticmethod(_pycrysfml.FortFuncs_inverse_symm)
    else:
        inverse_symm = _pycrysfml.FortFuncs_inverse_symm
    if _newclass:
        latsym = staticmethod(_pycrysfml.FortFuncs_latsym)
    else:
        latsym = _pycrysfml.FortFuncs_latsym
    if _newclass:
        read_bin_spacegroup = staticmethod(_pycrysfml.FortFuncs_read_bin_spacegroup)
    else:
        read_bin_spacegroup = _pycrysfml.FortFuncs_read_bin_spacegroup
    if _newclass:
        read_msymm = staticmethod(_pycrysfml.FortFuncs_read_msymm)
    else:
        read_msymm = _pycrysfml.FortFuncs_read_msymm
    if _newclass:
        read_symtrans_code = staticmethod(_pycrysfml.FortFuncs_read_symtrans_code)
    else:
        read_symtrans_code = _pycrysfml.FortFuncs_read_symtrans_code
    if _newclass:
        read_xsym = staticmethod(_pycrysfml.FortFuncs_read_xsym)
    else:
        read_xsym = _pycrysfml.FortFuncs_read_xsym
    if _newclass:
        searchop = staticmethod(_pycrysfml.FortFuncs_searchop)
    else:
        searchop = _pycrysfml.FortFuncs_searchop
    if _newclass:
        set_spacegroup = staticmethod(_pycrysfml.FortFuncs_set_spacegroup)
    else:
        set_spacegroup = _pycrysfml.FortFuncs_set_spacegroup
    if _newclass:
        similar_transf_sg = staticmethod(_pycrysfml.FortFuncs_similar_transf_sg)
    else:
        similar_transf_sg = _pycrysfml.FortFuncs_similar_transf_sg
    if _newclass:
        sym_prod_st = staticmethod(_pycrysfml.FortFuncs_sym_prod_st)
    else:
        sym_prod_st = _pycrysfml.FortFuncs_sym_prod_st
    if _newclass:
        write_bin_spacegroup = staticmethod(_pycrysfml.FortFuncs_write_bin_spacegroup)
    else:
        write_bin_spacegroup = _pycrysfml.FortFuncs_write_bin_spacegroup
    if _newclass:
        write_magnetic_space_group = staticmethod(_pycrysfml.FortFuncs_write_magnetic_space_group)
    else:
        write_magnetic_space_group = _pycrysfml.FortFuncs_write_magnetic_space_group
    if _newclass:
        write_spacegroup = staticmethod(_pycrysfml.FortFuncs_write_spacegroup)
    else:
        write_spacegroup = _pycrysfml.FortFuncs_write_spacegroup
    if _newclass:
        write_sym = staticmethod(_pycrysfml.FortFuncs_write_sym)
    else:
        write_sym = _pycrysfml.FortFuncs_write_sym
    if _newclass:
        write_symtrans_code = staticmethod(_pycrysfml.FortFuncs_write_symtrans_code)
    else:
        write_symtrans_code = _pycrysfml.FortFuncs_write_symtrans_code
    if _newclass:
        write_wyckoff = staticmethod(_pycrysfml.FortFuncs_write_wyckoff)
    else:
        write_wyckoff = _pycrysfml.FortFuncs_write_wyckoff
    if _newclass:
        copy_ns_spg_to_spg = staticmethod(_pycrysfml.FortFuncs_copy_ns_spg_to_spg)
    else:
        copy_ns_spg_to_spg = _pycrysfml.FortFuncs_copy_ns_spg_to_spg
    if _newclass:
        alloc_mhlist_array = staticmethod(_pycrysfml.FortFuncs_alloc_mhlist_array)
    else:
        alloc_mhlist_array = _pycrysfml.FortFuncs_alloc_mhlist_array
    if _newclass:
        alloc_refllist_array = staticmethod(_pycrysfml.FortFuncs_alloc_refllist_array)
    else:
        alloc_refllist_array = _pycrysfml.FortFuncs_alloc_refllist_array
    if _newclass:
        reflct_array_ctor = staticmethod(_pycrysfml.FortFuncs_reflct_array_ctor)
    else:
        reflct_array_ctor = _pycrysfml.FortFuncs_reflct_array_ctor
    if _newclass:
        reflct_append = staticmethod(_pycrysfml.FortFuncs_reflct_append)
    else:
        reflct_append = _pycrysfml.FortFuncs_reflct_append
    if _newclass:
        readxtal_structure_file = staticmethod(_pycrysfml.FortFuncs_readxtal_structure_file)
    else:
        readxtal_structure_file = _pycrysfml.FortFuncs_readxtal_structure_file
    if _newclass:
        hkls_r = staticmethod(_pycrysfml.FortFuncs_hkls_r)
    else:
        hkls_r = _pycrysfml.FortFuncs_hkls_r
    if _newclass:
        hklgen_sxtal_reflection = staticmethod(_pycrysfml.FortFuncs_hklgen_sxtal_reflection)
    else:
        hklgen_sxtal_reflection = _pycrysfml.FortFuncs_hklgen_sxtal_reflection
    if _newclass:
        hklgen_sxtal_list = staticmethod(_pycrysfml.FortFuncs_hklgen_sxtal_list)
    else:
        hklgen_sxtal_list = _pycrysfml.FortFuncs_hklgen_sxtal_list
    if _newclass:
        hkluni_reflection = staticmethod(_pycrysfml.FortFuncs_hkluni_reflection)
    else:
        hkluni_reflection = _pycrysfml.FortFuncs_hkluni_reflection
    if _newclass:
        hkluni_refllist = staticmethod(_pycrysfml.FortFuncs_hkluni_refllist)
    else:
        hkluni_refllist = _pycrysfml.FortFuncs_hkluni_refllist
    if _newclass:
        read_mag_cfl_file = staticmethod(_pycrysfml.FortFuncs_read_mag_cfl_file)
    else:
        read_mag_cfl_file = _pycrysfml.FortFuncs_read_mag_cfl_file
    if _newclass:
        read_mag_mcif_file = staticmethod(_pycrysfml.FortFuncs_read_mag_mcif_file)
    else:
        read_mag_mcif_file = _pycrysfml.FortFuncs_read_mag_mcif_file
    if _newclass:
        calcgaussian = staticmethod(_pycrysfml.FortFuncs_calcgaussian)
    else:
        calcgaussian = _pycrysfml.FortFuncs_calcgaussian
    if _newclass:
        calchat = staticmethod(_pycrysfml.FortFuncs_calchat)
    else:
        calchat = _pycrysfml.FortFuncs_calchat
    if _newclass:
        calclorentzian = staticmethod(_pycrysfml.FortFuncs_calclorentzian)
    else:
        calclorentzian = _pycrysfml.FortFuncs_calclorentzian
    if _newclass:
        calcpseudovoigt = staticmethod(_pycrysfml.FortFuncs_calcpseudovoigt)
    else:
        calcpseudovoigt = _pycrysfml.FortFuncs_calcpseudovoigt
    if _newclass:
        gausspeak = staticmethod(_pycrysfml.FortFuncs_gausspeak)
    else:
        gausspeak = _pycrysfml.FortFuncs_gausspeak
    if _newclass:
        read_ill_data = staticmethod(_pycrysfml.FortFuncs_read_ill_data)
    else:
        read_ill_data = _pycrysfml.FortFuncs_read_ill_data
    if _newclass:
        printbasis = staticmethod(_pycrysfml.FortFuncs_printbasis)
    else:
        printbasis = _pycrysfml.FortFuncs_printbasis
    if _newclass:
        atom_type_ctor = staticmethod(_pycrysfml.FortFuncs_atom_type_ctor)
    else:
        atom_type_ctor = _pycrysfml.FortFuncs_atom_type_ctor
    if _newclass:
        matom_type_ctor = staticmethod(_pycrysfml.FortFuncs_matom_type_ctor)
    else:
        matom_type_ctor = _pycrysfml.FortFuncs_matom_type_ctor
    if _newclass:
        crystal_cell_type_ctor = staticmethod(_pycrysfml.FortFuncs_crystal_cell_type_ctor)
    else:
        crystal_cell_type_ctor = _pycrysfml.FortFuncs_crystal_cell_type_ctor
    if _newclass:
        get_twofold_axes_a = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_a)
    else:
        get_twofold_axes_a = _pycrysfml.FortFuncs_get_twofold_axes_a
    if _newclass:
        set_twofold_axes_a = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_a)
    else:
        set_twofold_axes_a = _pycrysfml.FortFuncs_set_twofold_axes_a
    if _newclass:
        get_twofold_axes_c = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_c)
    else:
        get_twofold_axes_c = _pycrysfml.FortFuncs_get_twofold_axes_c
    if _newclass:
        set_twofold_axes_c = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_c)
    else:
        set_twofold_axes_c = _pycrysfml.FortFuncs_set_twofold_axes_c
    if _newclass:
        get_twofold_axes_b = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_b)
    else:
        get_twofold_axes_b = _pycrysfml.FortFuncs_get_twofold_axes_b
    if _newclass:
        set_twofold_axes_b = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_b)
    else:
        set_twofold_axes_b = _pycrysfml.FortFuncs_set_twofold_axes_b
    if _newclass:
        get_twofold_axes_maxes = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_maxes)
    else:
        get_twofold_axes_maxes = _pycrysfml.FortFuncs_get_twofold_axes_maxes
    if _newclass:
        set_twofold_axes_maxes = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_maxes)
    else:
        set_twofold_axes_maxes = _pycrysfml.FortFuncs_set_twofold_axes_maxes
    if _newclass:
        get_twofold_axes_ntwo = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_ntwo)
    else:
        get_twofold_axes_ntwo = _pycrysfml.FortFuncs_get_twofold_axes_ntwo
    if _newclass:
        set_twofold_axes_ntwo = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_ntwo)
    else:
        set_twofold_axes_ntwo = _pycrysfml.FortFuncs_set_twofold_axes_ntwo
    if _newclass:
        get_twofold_axes_cross = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_cross)
    else:
        get_twofold_axes_cross = _pycrysfml.FortFuncs_get_twofold_axes_cross
    if _newclass:
        set_twofold_axes_cross = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_cross)
    else:
        set_twofold_axes_cross = _pycrysfml.FortFuncs_set_twofold_axes_cross
    if _newclass:
        get_twofold_axes_tol = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_tol)
    else:
        get_twofold_axes_tol = _pycrysfml.FortFuncs_get_twofold_axes_tol
    if _newclass:
        set_twofold_axes_tol = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_tol)
    else:
        set_twofold_axes_tol = _pycrysfml.FortFuncs_set_twofold_axes_tol
    if _newclass:
        get_twofold_axes_rtwofold = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_rtwofold)
    else:
        get_twofold_axes_rtwofold = _pycrysfml.FortFuncs_get_twofold_axes_rtwofold
    if _newclass:
        set_twofold_axes_rtwofold = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_rtwofold)
    else:
        set_twofold_axes_rtwofold = _pycrysfml.FortFuncs_set_twofold_axes_rtwofold
    if _newclass:
        get_twofold_axes_caxes = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_caxes)
    else:
        get_twofold_axes_caxes = _pycrysfml.FortFuncs_get_twofold_axes_caxes
    if _newclass:
        set_twofold_axes_caxes = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_caxes)
    else:
        set_twofold_axes_caxes = _pycrysfml.FortFuncs_set_twofold_axes_caxes
    if _newclass:
        get_twofold_axes_dot = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_dot)
    else:
        get_twofold_axes_dot = _pycrysfml.FortFuncs_get_twofold_axes_dot
    if _newclass:
        set_twofold_axes_dot = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_dot)
    else:
        set_twofold_axes_dot = _pycrysfml.FortFuncs_set_twofold_axes_dot
    if _newclass:
        get_twofold_axes_dtwofold = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_dtwofold)
    else:
        get_twofold_axes_dtwofold = _pycrysfml.FortFuncs_get_twofold_axes_dtwofold
    if _newclass:
        set_twofold_axes_dtwofold = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_dtwofold)
    else:
        set_twofold_axes_dtwofold = _pycrysfml.FortFuncs_set_twofold_axes_dtwofold
    if _newclass:
        twofold_axes_type_ctor = staticmethod(_pycrysfml.FortFuncs_twofold_axes_type_ctor)
    else:
        twofold_axes_type_ctor = _pycrysfml.FortFuncs_twofold_axes_type_ctor
    if _newclass:
        zone_axis_type_ctor = staticmethod(_pycrysfml.FortFuncs_zone_axis_type_ctor)
    else:
        zone_axis_type_ctor = _pycrysfml.FortFuncs_zone_axis_type_ctor
    if _newclass:
        interval_type_ctor = staticmethod(_pycrysfml.FortFuncs_interval_type_ctor)
    else:
        interval_type_ctor = _pycrysfml.FortFuncs_interval_type_ctor
    if _newclass:
        msym_oper_type_ctor = staticmethod(_pycrysfml.FortFuncs_msym_oper_type_ctor)
    else:
        msym_oper_type_ctor = _pycrysfml.FortFuncs_msym_oper_type_ctor
    if _newclass:
        magnetic_group_type_ctor = staticmethod(_pycrysfml.FortFuncs_magnetic_group_type_ctor)
    else:
        magnetic_group_type_ctor = _pycrysfml.FortFuncs_magnetic_group_type_ctor
    if _newclass:
        reflect_type_ctor = staticmethod(_pycrysfml.FortFuncs_reflect_type_ctor)
    else:
        reflect_type_ctor = _pycrysfml.FortFuncs_reflect_type_ctor
    if _newclass:
        reflection_type_ctor = staticmethod(_pycrysfml.FortFuncs_reflection_type_ctor)
    else:
        reflection_type_ctor = _pycrysfml.FortFuncs_reflection_type_ctor
    if _newclass:
        ns_sym_oper_type_ctor = staticmethod(_pycrysfml.FortFuncs_ns_sym_oper_type_ctor)
    else:
        ns_sym_oper_type_ctor = _pycrysfml.FortFuncs_ns_sym_oper_type_ctor
    if _newclass:
        sym_oper_type_ctor = staticmethod(_pycrysfml.FortFuncs_sym_oper_type_ctor)
    else:
        sym_oper_type_ctor = _pycrysfml.FortFuncs_sym_oper_type_ctor
    if _newclass:
        get_command = staticmethod(_pycrysfml.FortFuncs_get_command)
    else:
        get_command = _pycrysfml.FortFuncs_get_command
    if _newclass:
        get_command_argument = staticmethod(_pycrysfml.FortFuncs_get_command_argument)
    else:
        get_command_argument = _pycrysfml.FortFuncs_get_command_argument
    if _newclass:
        get_environment_variable = staticmethod(_pycrysfml.FortFuncs_get_environment_variable)
    else:
        get_environment_variable = _pycrysfml.FortFuncs_get_environment_variable

    def __init__(self):
        this = _pycrysfml.new_FortFuncs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_FortFuncs
    __del__ = lambda self: None
FortFuncs_swigregister = _pycrysfml.FortFuncs_swigregister
FortFuncs_swigregister(FortFuncs)

def FortFuncs_equiv_atm(nam1, nam2, nameat):
    return _pycrysfml.FortFuncs_equiv_atm(nam1, nam2, nameat)
FortFuncs_equiv_atm = _pycrysfml.FortFuncs_equiv_atm

def FortFuncs_allocate_atoms_cell(nasu, mul, dmax, ac):
    return _pycrysfml.FortFuncs_allocate_atoms_cell(nasu, mul, dmax, ac)
FortFuncs_allocate_atoms_cell = _pycrysfml.FortFuncs_allocate_atoms_cell

def FortFuncs_allocate_atom_list(n, a, fail=None):
    return _pycrysfml.FortFuncs_allocate_atom_list(n, a, fail)
FortFuncs_allocate_atom_list = _pycrysfml.FortFuncs_allocate_atom_list

def FortFuncs_allocate_matom_list(n, a, mfield=None, dirf=None):
    return _pycrysfml.FortFuncs_allocate_matom_list(n, a, mfield, dirf)
FortFuncs_allocate_matom_list = _pycrysfml.FortFuncs_allocate_matom_list

def FortFuncs_atlist1_extencell_atlist2(spg, a, c, conven):
    return _pycrysfml.FortFuncs_atlist1_extencell_atlist2(spg, a, c, conven)
FortFuncs_atlist1_extencell_atlist2 = _pycrysfml.FortFuncs_atlist1_extencell_atlist2

def FortFuncs_atoms_cell_to_list(ac, a):
    return _pycrysfml.FortFuncs_atoms_cell_to_list(ac, a)
FortFuncs_atoms_cell_to_list = _pycrysfml.FortFuncs_atoms_cell_to_list

def FortFuncs_atom_list_to_cell(a, ac):
    return _pycrysfml.FortFuncs_atom_list_to_cell(a, ac)
FortFuncs_atom_list_to_cell = _pycrysfml.FortFuncs_atom_list_to_cell

def FortFuncs_atom_uequi_list(cell, ac):
    return _pycrysfml.FortFuncs_atom_uequi_list(cell, ac)
FortFuncs_atom_uequi_list = _pycrysfml.FortFuncs_atom_uequi_list

def FortFuncs_copy_atom_list(a, ac):
    return _pycrysfml.FortFuncs_copy_atom_list(a, ac)
FortFuncs_copy_atom_list = _pycrysfml.FortFuncs_copy_atom_list

def FortFuncs_deallocate_atoms_cell(ac):
    return _pycrysfml.FortFuncs_deallocate_atoms_cell(ac)
FortFuncs_deallocate_atoms_cell = _pycrysfml.FortFuncs_deallocate_atoms_cell

def FortFuncs_deallocate_atom_list(a):
    return _pycrysfml.FortFuncs_deallocate_atom_list(a)
FortFuncs_deallocate_atom_list = _pycrysfml.FortFuncs_deallocate_atom_list

def FortFuncs_deallocate_matom_list(a):
    return _pycrysfml.FortFuncs_deallocate_matom_list(a)
FortFuncs_deallocate_matom_list = _pycrysfml.FortFuncs_deallocate_matom_list

def FortFuncs_get_atom_2nd_tensor_ctr(x, tensval, spgr, codini, icodes, multip, ord=None, ipr=None):
    return _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr(x, tensval, spgr, codini, icodes, multip, ord, ipr)
FortFuncs_get_atom_2nd_tensor_ctr = _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr

def FortFuncs_init_atom_type(a):
    return _pycrysfml.FortFuncs_init_atom_type(a)
FortFuncs_init_atom_type = _pycrysfml.FortFuncs_init_atom_type

def FortFuncs_init_matom_type(a):
    return _pycrysfml.FortFuncs_init_matom_type(a)
FortFuncs_init_matom_type = _pycrysfml.FortFuncs_init_matom_type

def FortFuncs_init_err_atmd():
    return _pycrysfml.FortFuncs_init_err_atmd()
FortFuncs_init_err_atmd = _pycrysfml.FortFuncs_init_err_atmd

def FortFuncs_multi(lun, iprin, conven, spg, a, ac):
    return _pycrysfml.FortFuncs_multi(lun, iprin, conven, spg, a, ac)
FortFuncs_multi = _pycrysfml.FortFuncs_multi

def FortFuncs_read_bin_atom_list(ats, lun, ok):
    return _pycrysfml.FortFuncs_read_bin_atom_list(ats, lun, ok)
FortFuncs_read_bin_atom_list = _pycrysfml.FortFuncs_read_bin_atom_list

def FortFuncs_write_atom_list(ats, level=None, lun=None, cell=None):
    return _pycrysfml.FortFuncs_write_atom_list(ats, level, lun, cell)
FortFuncs_write_atom_list = _pycrysfml.FortFuncs_write_atom_list

def FortFuncs_write_bin_atom_list(ats, lun):
    return _pycrysfml.FortFuncs_write_bin_atom_list(ats, lun)
FortFuncs_write_bin_atom_list = _pycrysfml.FortFuncs_write_bin_atom_list

def FortFuncs_deallocate_ap_table():
    return _pycrysfml.FortFuncs_deallocate_ap_table()
FortFuncs_deallocate_ap_table = _pycrysfml.FortFuncs_deallocate_ap_table

def FortFuncs_deallocate_bvel_table():
    return _pycrysfml.FortFuncs_deallocate_bvel_table()
FortFuncs_deallocate_bvel_table = _pycrysfml.FortFuncs_deallocate_bvel_table

def FortFuncs_deallocate_bvs_table():
    return _pycrysfml.FortFuncs_deallocate_bvs_table()
FortFuncs_deallocate_bvs_table = _pycrysfml.FortFuncs_deallocate_bvs_table

def FortFuncs_deallocate_sbvs_table():
    return _pycrysfml.FortFuncs_deallocate_sbvs_table()
FortFuncs_deallocate_sbvs_table = _pycrysfml.FortFuncs_deallocate_sbvs_table

def FortFuncs_set_atomic_properties():
    return _pycrysfml.FortFuncs_set_atomic_properties()
FortFuncs_set_atomic_properties = _pycrysfml.FortFuncs_set_atomic_properties

def FortFuncs_set_bvel_table():
    return _pycrysfml.FortFuncs_set_bvel_table()
FortFuncs_set_bvel_table = _pycrysfml.FortFuncs_set_bvel_table

def FortFuncs_set_bvs_table():
    return _pycrysfml.FortFuncs_set_bvs_table()
FortFuncs_set_bvs_table = _pycrysfml.FortFuncs_set_bvs_table

def FortFuncs_set_sbvs_table():
    return _pycrysfml.FortFuncs_set_sbvs_table()
FortFuncs_set_sbvs_table = _pycrysfml.FortFuncs_set_sbvs_table

def FortFuncs_set_common_oxidation_states_table():
    return _pycrysfml.FortFuncs_set_common_oxidation_states_table()
FortFuncs_set_common_oxidation_states_table = _pycrysfml.FortFuncs_set_common_oxidation_states_table

def FortFuncs_set_oxidation_states_table():
    return _pycrysfml.FortFuncs_set_oxidation_states_table()
FortFuncs_set_oxidation_states_table = _pycrysfml.FortFuncs_set_oxidation_states_table

def FortFuncs_set_pauling_electronegativity():
    return _pycrysfml.FortFuncs_set_pauling_electronegativity()
FortFuncs_set_pauling_electronegativity = _pycrysfml.FortFuncs_set_pauling_electronegativity

def FortFuncs_init_err_bond():
    return _pycrysfml.FortFuncs_init_err_bond()
FortFuncs_init_err_bond = _pycrysfml.FortFuncs_init_err_bond

def FortFuncs_remove_bonds_table():
    return _pycrysfml.FortFuncs_remove_bonds_table()
FortFuncs_remove_bonds_table = _pycrysfml.FortFuncs_remove_bonds_table

def FortFuncs_set_bonds_table():
    return _pycrysfml.FortFuncs_set_bonds_table()
FortFuncs_set_bonds_table = _pycrysfml.FortFuncs_set_bonds_table

def FortFuncs_get_atomic_mass(atm, mass):
    return _pycrysfml.FortFuncs_get_atomic_mass(atm, mass)
FortFuncs_get_atomic_mass = _pycrysfml.FortFuncs_get_atomic_mass

def FortFuncs_get_atomic_vol(atm, vol):
    return _pycrysfml.FortFuncs_get_atomic_vol(atm, vol)
FortFuncs_get_atomic_vol = _pycrysfml.FortFuncs_get_atomic_vol

def FortFuncs_get_chemsymb(label, chemsymb, z=None):
    return _pycrysfml.FortFuncs_get_chemsymb(label, chemsymb, z)
FortFuncs_get_chemsymb = _pycrysfml.FortFuncs_get_chemsymb

def FortFuncs_get_covalent_radius(nam, rad):
    return _pycrysfml.FortFuncs_get_covalent_radius(nam, rad)
FortFuncs_get_covalent_radius = _pycrysfml.FortFuncs_get_covalent_radius

def FortFuncs_get_fermi_length(nam, b):
    return _pycrysfml.FortFuncs_get_fermi_length(nam, b)
FortFuncs_get_fermi_length = _pycrysfml.FortFuncs_get_fermi_length

def FortFuncs_get_inc_xs(nam, u):
    return _pycrysfml.FortFuncs_get_inc_xs(nam, u)
FortFuncs_get_inc_xs = _pycrysfml.FortFuncs_get_inc_xs

def FortFuncs_get_abs_xs(nam, u):
    return _pycrysfml.FortFuncs_get_abs_xs(nam, u)
FortFuncs_get_abs_xs = _pycrysfml.FortFuncs_get_abs_xs

def FortFuncs_get_ionic_radius(nam, valence, rad):
    return _pycrysfml.FortFuncs_get_ionic_radius(nam, valence, rad)
FortFuncs_get_ionic_radius = _pycrysfml.FortFuncs_get_ionic_radius

def FortFuncs_remove_chem_info():
    return _pycrysfml.FortFuncs_remove_chem_info()
FortFuncs_remove_chem_info = _pycrysfml.FortFuncs_remove_chem_info

def FortFuncs_remove_delta_fp_fpp():
    return _pycrysfml.FortFuncs_remove_delta_fp_fpp()
FortFuncs_remove_delta_fp_fpp = _pycrysfml.FortFuncs_remove_delta_fp_fpp

def FortFuncs_remove_magnetic_form():
    return _pycrysfml.FortFuncs_remove_magnetic_form()
FortFuncs_remove_magnetic_form = _pycrysfml.FortFuncs_remove_magnetic_form

def FortFuncs_remove_xray_form():
    return _pycrysfml.FortFuncs_remove_xray_form()
FortFuncs_remove_xray_form = _pycrysfml.FortFuncs_remove_xray_form

def FortFuncs_set_chem_info():
    return _pycrysfml.FortFuncs_set_chem_info()
FortFuncs_set_chem_info = _pycrysfml.FortFuncs_set_chem_info

def FortFuncs_set_delta_fp_fpp():
    return _pycrysfml.FortFuncs_set_delta_fp_fpp()
FortFuncs_set_delta_fp_fpp = _pycrysfml.FortFuncs_set_delta_fp_fpp

def FortFuncs_set_magnetic_form():
    return _pycrysfml.FortFuncs_set_magnetic_form()
FortFuncs_set_magnetic_form = _pycrysfml.FortFuncs_set_magnetic_form

def FortFuncs_set_xray_form():
    return _pycrysfml.FortFuncs_set_xray_form()
FortFuncs_set_xray_form = _pycrysfml.FortFuncs_set_xray_form

def FortFuncs_allocate_atoms_conf_list(n, a):
    return _pycrysfml.FortFuncs_allocate_atoms_conf_list(n, a)
FortFuncs_allocate_atoms_conf_list = _pycrysfml.FortFuncs_allocate_atoms_conf_list

def FortFuncs_calc_bvs(a, ipr=None, n_bvsm=None, filecod=None, info_string=None):
    return _pycrysfml.FortFuncs_calc_bvs(a, ipr, n_bvsm, filecod, info_string)
FortFuncs_calc_bvs = _pycrysfml.FortFuncs_calc_bvs

def FortFuncs_calc_map_bvel(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta=None, vol=None, emin=None, npix=None, outp=None):
    return _pycrysfml.FortFuncs_calc_map_bvel(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta, vol, emin, npix, outp)
FortFuncs_calc_map_bvel = _pycrysfml.FortFuncs_calc_map_bvel

def FortFuncs_calc_map_bvs(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta=None, vol=None):
    return _pycrysfml.FortFuncs_calc_map_bvs(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta, vol)
FortFuncs_calc_map_bvs = _pycrysfml.FortFuncs_calc_map_bvs

def FortFuncs_cost_bvs(a, gii, erep=None, gic=None):
    return _pycrysfml.FortFuncs_cost_bvs(a, gii, erep, gic)
FortFuncs_cost_bvs = _pycrysfml.FortFuncs_cost_bvs

def FortFuncs_cost_bvs_coulombrep(a, gii, erep):
    return _pycrysfml.FortFuncs_cost_bvs_coulombrep(a, gii, erep)
FortFuncs_cost_bvs_coulombrep = _pycrysfml.FortFuncs_cost_bvs_coulombrep

def FortFuncs_deallocate_atoms_conf_list(a):
    return _pycrysfml.FortFuncs_deallocate_atoms_conf_list(a)
FortFuncs_deallocate_atoms_conf_list = _pycrysfml.FortFuncs_deallocate_atoms_conf_list

def FortFuncs_ewald(lattvec, vol, ac, e):
    return _pycrysfml.FortFuncs_ewald(lattvec, vol, ac, e)
FortFuncs_ewald = _pycrysfml.FortFuncs_ewald

def FortFuncs_init_err_conf():
    return _pycrysfml.FortFuncs_init_err_conf()
FortFuncs_init_err_conf = _pycrysfml.FortFuncs_init_err_conf

def FortFuncs_species_on_list(a, mulg=None, tol=None, covalent=None, softbvs=None):
    return _pycrysfml.FortFuncs_species_on_list(a, mulg, tol, covalent, softbvs)
FortFuncs_species_on_list = _pycrysfml.FortFuncs_species_on_list

def FortFuncs_cell_volume_sigma(cell):
    return _pycrysfml.FortFuncs_cell_volume_sigma(cell)
FortFuncs_cell_volume_sigma = _pycrysfml.FortFuncs_cell_volume_sigma

def FortFuncs_u_equiv(cell, th_u):
    return _pycrysfml.FortFuncs_u_equiv(cell, th_u)
FortFuncs_u_equiv = _pycrysfml.FortFuncs_u_equiv

def FortFuncs_volume_from_cell(a, ang):
    return _pycrysfml.FortFuncs_volume_from_cell(a, ang)
FortFuncs_volume_from_cell = _pycrysfml.FortFuncs_volume_from_cell

def FortFuncs_calc_cell_strain(itype, t0, t1, strain):
    return _pycrysfml.FortFuncs_calc_cell_strain(itype, t0, t1, strain)
FortFuncs_calc_cell_strain = _pycrysfml.FortFuncs_calc_cell_strain

def FortFuncs_get_basis_from_uvw(dmin, u, cell, zoneb, ok, mode=None):
    return _pycrysfml.FortFuncs_get_basis_from_uvw(dmin, u, cell, zoneb, ok, mode)
FortFuncs_get_basis_from_uvw = _pycrysfml.FortFuncs_get_basis_from_uvw

def FortFuncs_get_conventional_cell(twofold, cell, tr, message, ok, told=None):
    return _pycrysfml.FortFuncs_get_conventional_cell(twofold, cell, tr, message, ok, told)
FortFuncs_get_conventional_cell = _pycrysfml.FortFuncs_get_conventional_cell

def FortFuncs_get_cryst_orthog_matrix(cellv, ang, crystort, cartypein=None):
    return _pycrysfml.FortFuncs_get_cryst_orthog_matrix(cellv, ang, crystort, cartypein)
FortFuncs_get_cryst_orthog_matrix = _pycrysfml.FortFuncs_get_cryst_orthog_matrix

def FortFuncs_get_primitive_cell(lat_type, centred_cell, primitive_cell, transfm):
    return _pycrysfml.FortFuncs_get_primitive_cell(lat_type, centred_cell, primitive_cell, transfm)
FortFuncs_get_primitive_cell = _pycrysfml.FortFuncs_get_primitive_cell

def FortFuncs_init_err_crys():
    return _pycrysfml.FortFuncs_init_err_crys()
FortFuncs_init_err_crys = _pycrysfml.FortFuncs_init_err_crys

def FortFuncs_orient_eigenvectors(eval, evec):
    return _pycrysfml.FortFuncs_orient_eigenvectors(eval, evec)
FortFuncs_orient_eigenvectors = _pycrysfml.FortFuncs_orient_eigenvectors

def FortFuncs_read_bin_crystal_cell(celda, lun, ok):
    return _pycrysfml.FortFuncs_read_bin_crystal_cell(celda, lun, ok)
FortFuncs_read_bin_crystal_cell = _pycrysfml.FortFuncs_read_bin_crystal_cell

def FortFuncs_set_crystal_cell(cellv, angl, celda, cartype=None, scell=None, sangl=None):
    return _pycrysfml.FortFuncs_set_crystal_cell(cellv, angl, celda, cartype, scell, sangl)
FortFuncs_set_crystal_cell = _pycrysfml.FortFuncs_set_crystal_cell

def FortFuncs_volume_sigma_from_cell(cell, ang, sigc, siga, volume, sigv):
    return _pycrysfml.FortFuncs_volume_sigma_from_cell(cell, ang, sigc, siga, volume, sigv)
FortFuncs_volume_sigma_from_cell = _pycrysfml.FortFuncs_volume_sigma_from_cell

def FortFuncs_write_bin_crystal_cell(celda, lun):
    return _pycrysfml.FortFuncs_write_bin_crystal_cell(celda, lun)
FortFuncs_write_bin_crystal_cell = _pycrysfml.FortFuncs_write_bin_crystal_cell

def FortFuncs_write_crystal_cell(celda, lun=None):
    return _pycrysfml.FortFuncs_write_crystal_cell(celda, lun)
FortFuncs_write_crystal_cell = _pycrysfml.FortFuncs_write_crystal_cell

def FortFuncs_calc_fwhm_peak(pat, xi, yi, ybi, rlim=None):
    return _pycrysfml.FortFuncs_calc_fwhm_peak(pat, xi, yi, ybi, rlim)
FortFuncs_calc_fwhm_peak = _pycrysfml.FortFuncs_calc_fwhm_peak

def FortFuncs_allocate_diffraction_pattern(pat, npts=None):
    return _pycrysfml.FortFuncs_allocate_diffraction_pattern(pat, npts)
FortFuncs_allocate_diffraction_pattern = _pycrysfml.FortFuncs_allocate_diffraction_pattern

def FortFuncs_calc_background(pat, ncyc, np, xmin=None, xmax=None):
    return _pycrysfml.FortFuncs_calc_background(pat, ncyc, np, xmin, xmax)
FortFuncs_calc_background = _pycrysfml.FortFuncs_calc_background

def FortFuncs_delete_noisy_points(pat, noisyp, fileinfo=None):
    return _pycrysfml.FortFuncs_delete_noisy_points(pat, noisyp, fileinfo)
FortFuncs_delete_noisy_points = _pycrysfml.FortFuncs_delete_noisy_points

def FortFuncs_init_err_diffpatt():
    return _pycrysfml.FortFuncs_init_err_diffpatt()
FortFuncs_init_err_diffpatt = _pycrysfml.FortFuncs_init_err_diffpatt

def FortFuncs_purge_diffraction_pattern(pat, mode):
    return _pycrysfml.FortFuncs_purge_diffraction_pattern(pat, mode)
FortFuncs_purge_diffraction_pattern = _pycrysfml.FortFuncs_purge_diffraction_pattern

def FortFuncs_read_background_file(bck_file, bck_mode, dif_pat):
    return _pycrysfml.FortFuncs_read_background_file(bck_file, bck_mode, dif_pat)
FortFuncs_read_background_file = _pycrysfml.FortFuncs_read_background_file

def FortFuncs_write_pattern_freeformat(filename, pat, xmin=None, xmax=None):
    return _pycrysfml.FortFuncs_write_pattern_freeformat(filename, pat, xmin, xmax)
FortFuncs_write_pattern_freeformat = _pycrysfml.FortFuncs_write_pattern_freeformat

def FortFuncs_write_pattern_instrm5(filename, pat, xmin=None, xmax=None, var=None):
    return _pycrysfml.FortFuncs_write_pattern_instrm5(filename, pat, xmin, xmax, var)
FortFuncs_write_pattern_instrm5 = _pycrysfml.FortFuncs_write_pattern_instrm5

def FortFuncs_write_pattern_xysig(filename, pat, xmin=None, xmax=None):
    return _pycrysfml.FortFuncs_write_pattern_xysig(filename, pat, xmin, xmax)
FortFuncs_write_pattern_xysig = _pycrysfml.FortFuncs_write_pattern_xysig

def FortFuncs_unitcell_to_pdbfile(cell, spaceg, atom_list, filename):
    return _pycrysfml.FortFuncs_unitcell_to_pdbfile(cell, spaceg, atom_list, filename)
FortFuncs_unitcell_to_pdbfile = _pycrysfml.FortFuncs_unitcell_to_pdbfile

def FortFuncs_ag_theta(cos2t):
    return _pycrysfml.FortFuncs_ag_theta(cos2t)
FortFuncs_ag_theta = _pycrysfml.FortFuncs_ag_theta

def FortFuncs_al_theta(cos2t):
    return _pycrysfml.FortFuncs_al_theta(cos2t)
FortFuncs_al_theta = _pycrysfml.FortFuncs_al_theta

def FortFuncs_bg_theta(cos2t):
    return _pycrysfml.FortFuncs_bg_theta(cos2t)
FortFuncs_bg_theta = _pycrysfml.FortFuncs_bg_theta

def FortFuncs_bl_theta(cos2t):
    return _pycrysfml.FortFuncs_bl_theta(cos2t)
FortFuncs_bl_theta = _pycrysfml.FortFuncs_bl_theta

def FortFuncs_becker_coppens(iext, f2, cext, r, g, ys, dydr=None, dydg=None):
    return _pycrysfml.FortFuncs_becker_coppens(iext, f2, cext, r, g, ys, dydr, dydg)
FortFuncs_becker_coppens = _pycrysfml.FortFuncs_becker_coppens

def FortFuncs_shelx_extinction(job, iext, arg3, ssnn, hkl, f2, extc, ys, der=None, derf2=None):
    return _pycrysfml.FortFuncs_shelx_extinction(job, iext, arg3, ssnn, hkl, f2, extc, ys, der, derf2)
FortFuncs_shelx_extinction = _pycrysfml.FortFuncs_shelx_extinction

def FortFuncs_correct_flippingratios(iext, arg3, q, extc, ssnn, hkl, an, bn, am, bm, yp, ym, ypm):
    return _pycrysfml.FortFuncs_correct_flippingratios(iext, arg3, q, extc, ssnn, hkl, an, bn, am, bm, yp, ym, ypm)
FortFuncs_correct_flippingratios = _pycrysfml.FortFuncs_correct_flippingratios

def FortFuncs_file_to_filelist(file_dat, file_list):
    return _pycrysfml.FortFuncs_file_to_filelist(file_dat, file_list)
FortFuncs_file_to_filelist = _pycrysfml.FortFuncs_file_to_filelist

def FortFuncs_init_err_form():
    return _pycrysfml.FortFuncs_init_err_form()
FortFuncs_init_err_form = _pycrysfml.FortFuncs_init_err_form

def FortFuncs_read_uvals(line, atomo, ulabel):
    return _pycrysfml.FortFuncs_read_uvals(line, atomo, ulabel)
FortFuncs_read_uvals = _pycrysfml.FortFuncs_read_uvals

def FortFuncs_write_cif_powder_profile(filename, code):
    return _pycrysfml.FortFuncs_write_cif_powder_profile(filename, code)
FortFuncs_write_cif_powder_profile = _pycrysfml.FortFuncs_write_cif_powder_profile

def FortFuncs_write_cif_template(filename, type_data, code, cell, spg, a):
    return _pycrysfml.FortFuncs_write_cif_template(filename, type_data, code, cell, spg, a)
FortFuncs_write_cif_template = _pycrysfml.FortFuncs_write_cif_template

def FortFuncs_write_shx_template(filename, code, title, arg5, z, celda, space, atomos):
    return _pycrysfml.FortFuncs_write_shx_template(filename, code, title, arg5, z, celda, space, atomos)
FortFuncs_write_shx_template = _pycrysfml.FortFuncs_write_shx_template

def FortFuncs_allocate_coordination_type(nasu, numops, dmax, max_coor):
    return _pycrysfml.FortFuncs_allocate_coordination_type(nasu, numops, dmax, max_coor)
FortFuncs_allocate_coordination_type = _pycrysfml.FortFuncs_allocate_coordination_type

def FortFuncs_allocate_point_list(n, pl, ier):
    return _pycrysfml.FortFuncs_allocate_point_list(n, pl, ier)
FortFuncs_allocate_point_list = _pycrysfml.FortFuncs_allocate_point_list

def FortFuncs_angle_and_sigma(cellp, derm, x1, x0, x2, s1, s0, s2, ang, s):
    return _pycrysfml.FortFuncs_angle_and_sigma(cellp, derm, x1, x0, x2, s1, s0, s2, ang, s)
FortFuncs_angle_and_sigma = _pycrysfml.FortFuncs_angle_and_sigma

def FortFuncs_calc_dist_angle(dmax, dangl, cell, spg, a, lun=None):
    return _pycrysfml.FortFuncs_calc_dist_angle(dmax, dangl, cell, spg, a, lun)
FortFuncs_calc_dist_angle = _pycrysfml.FortFuncs_calc_dist_angle

def FortFuncs_calc_dist_angle_sigma(dmax, dangl, cell, spg, a, lun=None, lun_cons=None, lun_cif=None, filrest=None, rdmax=None, ramin=None):
    return _pycrysfml.FortFuncs_calc_dist_angle_sigma(dmax, dangl, cell, spg, a, lun, lun_cons, lun_cif, filrest, rdmax, ramin)
FortFuncs_calc_dist_angle_sigma = _pycrysfml.FortFuncs_calc_dist_angle_sigma

def FortFuncs_deallocate_coordination_type():
    return _pycrysfml.FortFuncs_deallocate_coordination_type()
FortFuncs_deallocate_coordination_type = _pycrysfml.FortFuncs_deallocate_coordination_type

def FortFuncs_deallocate_point_list(pl):
    return _pycrysfml.FortFuncs_deallocate_point_list(pl)
FortFuncs_deallocate_point_list = _pycrysfml.FortFuncs_deallocate_point_list

def FortFuncs_distance_and_sigma(cellp, derm, x0, x1, s0, s1, dis, s):
    return _pycrysfml.FortFuncs_distance_and_sigma(cellp, derm, x0, x1, s0, s1, dis, s)
FortFuncs_distance_and_sigma = _pycrysfml.FortFuncs_distance_and_sigma

def FortFuncs_get_anglen_axis_from_rotmat(r, axis, angle):
    return _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat(r, axis, angle)
FortFuncs_get_anglen_axis_from_rotmat = _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat

def FortFuncs_get_euler_from_fract(x1, x2, x3, mt, phi, theta, chi, eum=None, code=None):
    return _pycrysfml.FortFuncs_get_euler_from_fract(x1, x2, x3, mt, phi, theta, chi, eum, code)
FortFuncs_get_euler_from_fract = _pycrysfml.FortFuncs_get_euler_from_fract

def FortFuncs_get_matrix_moving_v_to_u(v, u, r, w=None, ang=None):
    return _pycrysfml.FortFuncs_get_matrix_moving_v_to_u(v, u, r, w, ang)
FortFuncs_get_matrix_moving_v_to_u = _pycrysfml.FortFuncs_get_matrix_moving_v_to_u

def FortFuncs_get_omegachiphi(mt, omega, chi, phi, code=None):
    return _pycrysfml.FortFuncs_get_omegachiphi(mt, omega, chi, phi, code)
FortFuncs_get_omegachiphi = _pycrysfml.FortFuncs_get_omegachiphi

def FortFuncs_get_phithechi(mt, phi, theta, chi, code=None):
    return _pycrysfml.FortFuncs_get_phithechi(mt, phi, theta, chi, code)
FortFuncs_get_phithechi = _pycrysfml.FortFuncs_get_phithechi

def FortFuncs_get_transf_list(trans, ox, pl, npl, ifail):
    return _pycrysfml.FortFuncs_get_transf_list(trans, ox, pl, npl, ifail)
FortFuncs_get_transf_list = _pycrysfml.FortFuncs_get_transf_list

def FortFuncs_init_err_geom():
    return _pycrysfml.FortFuncs_init_err_geom()
FortFuncs_init_err_geom = _pycrysfml.FortFuncs_init_err_geom

def FortFuncs_p1_dist(dmax, cell, spg, ac, lun=None):
    return _pycrysfml.FortFuncs_p1_dist(dmax, cell, spg, ac, lun)
FortFuncs_p1_dist = _pycrysfml.FortFuncs_p1_dist

def FortFuncs_print_distances(lun, dmax, cell, spg, a):
    return _pycrysfml.FortFuncs_print_distances(lun, dmax, cell, spg, a)
FortFuncs_print_distances = _pycrysfml.FortFuncs_print_distances

def FortFuncs_set_rotation_matrix(ang, rot):
    return _pycrysfml.FortFuncs_set_rotation_matrix(ang, rot)
FortFuncs_set_rotation_matrix = _pycrysfml.FortFuncs_set_rotation_matrix

def FortFuncs_set_tdist_coordination(max_coor, dmax, cell, spg, a):
    return _pycrysfml.FortFuncs_set_tdist_coordination(max_coor, dmax, cell, spg, a)
FortFuncs_set_tdist_coordination = _pycrysfml.FortFuncs_set_tdist_coordination

def FortFuncs_set_tdist_partial_coordination(list, max_coor, dmax, cell, spg, a):
    return _pycrysfml.FortFuncs_set_tdist_partial_coordination(list, max_coor, dmax, cell, spg, a)
FortFuncs_set_tdist_partial_coordination = _pycrysfml.FortFuncs_set_tdist_partial_coordination

def FortFuncs_torsion_and_sigma(cellp, x1, x2, x3, x4, sx1, sx2, sx3, sx4, tor, s):
    return _pycrysfml.FortFuncs_torsion_and_sigma(cellp, x1, x2, x3, x4, sx1, sx2, sx3, sx4, tor, s)
FortFuncs_torsion_and_sigma = _pycrysfml.FortFuncs_torsion_and_sigma

def FortFuncs_directory_exists(dirname):
    return _pycrysfml.FortFuncs_directory_exists(dirname)
FortFuncs_directory_exists = _pycrysfml.FortFuncs_directory_exists

def FortFuncs_write_date_time(lun=None, dtim=None):
    return _pycrysfml.FortFuncs_write_date_time(lun, dtim)
FortFuncs_write_date_time = _pycrysfml.FortFuncs_write_date_time

def FortFuncs_define_uncompress_program(progname):
    return _pycrysfml.FortFuncs_define_uncompress_program(progname)
FortFuncs_define_uncompress_program = _pycrysfml.FortFuncs_define_uncompress_program

def FortFuncs_get_absolute_data_path(numor, instrm, path, iyear=None, icycle=None, actual_path=None):
    return _pycrysfml.FortFuncs_get_absolute_data_path(numor, instrm, path, iyear, icycle, actual_path)
FortFuncs_get_absolute_data_path = _pycrysfml.FortFuncs_get_absolute_data_path

def FortFuncs_get_next_yearcycle(yearcycle, reset_to_most_recent=None):
    return _pycrysfml.FortFuncs_get_next_yearcycle(yearcycle, reset_to_most_recent)
FortFuncs_get_next_yearcycle = _pycrysfml.FortFuncs_get_next_yearcycle

def FortFuncs_init_err_illdata():
    return _pycrysfml.FortFuncs_init_err_illdata()
FortFuncs_init_err_illdata = _pycrysfml.FortFuncs_init_err_illdata

def FortFuncs_init_sxtal_numor(numor, nbang=None, nbdata=None, nframes=None):
    return _pycrysfml.FortFuncs_init_sxtal_numor(numor, nbang, nbdata, nframes)
FortFuncs_init_sxtal_numor = _pycrysfml.FortFuncs_init_sxtal_numor

def FortFuncs_initialize_data_directory():
    return _pycrysfml.FortFuncs_initialize_data_directory()
FortFuncs_initialize_data_directory = _pycrysfml.FortFuncs_initialize_data_directory

def FortFuncs_read_current_instrm(filenam):
    return _pycrysfml.FortFuncs_read_current_instrm(filenam)
FortFuncs_read_current_instrm = _pycrysfml.FortFuncs_read_current_instrm

def FortFuncs_set_current_orient(wave, ub, setting=None):
    return _pycrysfml.FortFuncs_set_current_orient(wave, ub, setting)
FortFuncs_set_current_orient = _pycrysfml.FortFuncs_set_current_orient

def FortFuncs_set_default_instrument(typ=None, wav=None):
    return _pycrysfml.FortFuncs_set_default_instrument(typ, wav)
FortFuncs_set_default_instrument = _pycrysfml.FortFuncs_set_default_instrument

def FortFuncs_set_ill_data_directory(filedir):
    return _pycrysfml.FortFuncs_set_ill_data_directory(filedir)
FortFuncs_set_ill_data_directory = _pycrysfml.FortFuncs_set_ill_data_directory

def FortFuncs_set_instrm_directory(working_dir=None, instrm=None, iyear=None, icycle=None):
    return _pycrysfml.FortFuncs_set_instrm_directory(working_dir, instrm, iyear, icycle)
FortFuncs_set_instrm_directory = _pycrysfml.FortFuncs_set_instrm_directory

def FortFuncs_set_instrm_geometry_directory(env_var=None):
    return _pycrysfml.FortFuncs_set_instrm_geometry_directory(env_var)
FortFuncs_set_instrm_geometry_directory = _pycrysfml.FortFuncs_set_instrm_geometry_directory

def FortFuncs_update_current_instrm_ub(filenam, ub, wave):
    return _pycrysfml.FortFuncs_update_current_instrm_ub(filenam, ub, wave)
FortFuncs_update_current_instrm_ub = _pycrysfml.FortFuncs_update_current_instrm_ub

def FortFuncs_write_current_instrm_data(lun=None, fil=None):
    return _pycrysfml.FortFuncs_write_current_instrm_data(lun, fil)
FortFuncs_write_current_instrm_data = _pycrysfml.FortFuncs_write_current_instrm_data

def FortFuncs_write_generic_numor(num, lun=None):
    return _pycrysfml.FortFuncs_write_generic_numor(num, lun)
FortFuncs_write_generic_numor = _pycrysfml.FortFuncs_write_generic_numor

def FortFuncs_write_headerinfo_sxtal_numor(num, lun=None):
    return _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor(num, lun)
FortFuncs_write_headerinfo_sxtal_numor = _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor

def FortFuncs_write_sxtal_numor(num, lun=None):
    return _pycrysfml.FortFuncs_write_sxtal_numor(num, lun)
FortFuncs_write_sxtal_numor = _pycrysfml.FortFuncs_write_sxtal_numor

def FortFuncs_read_calibration_file(filecal, instrm, cal):
    return _pycrysfml.FortFuncs_read_calibration_file(filecal, instrm, cal)
FortFuncs_read_calibration_file = _pycrysfml.FortFuncs_read_calibration_file

def FortFuncs_error_message(mess, iunit=None, routine=None, fatal=None):
    return _pycrysfml.FortFuncs_error_message(mess, iunit, routine, fatal)
FortFuncs_error_message = _pycrysfml.FortFuncs_error_message

def FortFuncs_info_message(mess, iunit=None):
    return _pycrysfml.FortFuncs_info_message(mess, iunit)
FortFuncs_info_message = _pycrysfml.FortFuncs_info_message

def FortFuncs_print_message(mess):
    return _pycrysfml.FortFuncs_print_message(mess)
FortFuncs_print_message = _pycrysfml.FortFuncs_print_message

def FortFuncs_wait_message(mess=None):
    return _pycrysfml.FortFuncs_wait_message(mess)
FortFuncs_wait_message = _pycrysfml.FortFuncs_wait_message

def FortFuncs_write_scroll_text(mess):
    return _pycrysfml.FortFuncs_write_scroll_text(mess)
FortFuncs_write_scroll_text = _pycrysfml.FortFuncs_write_scroll_text

def FortFuncs_calc_induced_sk(cell, spg, mfield, dir_mfield, atm, ipr=None):
    return _pycrysfml.FortFuncs_calc_induced_sk(cell, spg, mfield, dir_mfield, atm, ipr)
FortFuncs_calc_induced_sk = _pycrysfml.FortFuncs_calc_induced_sk

def FortFuncs_cleanup_symmetry_operators(mspg):
    return _pycrysfml.FortFuncs_cleanup_symmetry_operators(mspg)
FortFuncs_cleanup_symmetry_operators = _pycrysfml.FortFuncs_cleanup_symmetry_operators

def FortFuncs_init_magsymm_k_type(mgp):
    return _pycrysfml.FortFuncs_init_magsymm_k_type(mgp)
FortFuncs_init_magsymm_k_type = _pycrysfml.FortFuncs_init_magsymm_k_type

def FortFuncs_get_moment_ctr(xnr, moment, spgr, codini, codes, ord=None, ipr=None):
    return _pycrysfml.FortFuncs_get_moment_ctr(xnr, moment, spgr, codini, codes, ord, ipr)
FortFuncs_get_moment_ctr = _pycrysfml.FortFuncs_get_moment_ctr

def FortFuncs_set_magnetic_space_group(symb, setting, mspg, parent=None, mcif=None, keepd=None, trn_to=None):
    return _pycrysfml.FortFuncs_set_magnetic_space_group(symb, setting, mspg, parent, mcif, keepd, trn_to)
FortFuncs_set_magnetic_space_group = _pycrysfml.FortFuncs_set_magnetic_space_group

def FortFuncs_set_shubnikov_group(shubk, sg, mgp):
    return _pycrysfml.FortFuncs_set_shubnikov_group(shubk, sg, mgp)
FortFuncs_set_shubnikov_group = _pycrysfml.FortFuncs_set_shubnikov_group

def FortFuncs_setting_change_maggroup(setting, mspg, mspgn, trn_to=None):
    return _pycrysfml.FortFuncs_setting_change_maggroup(setting, mspg, mspgn, trn_to)
FortFuncs_setting_change_maggroup = _pycrysfml.FortFuncs_setting_change_maggroup

def FortFuncs_write_magnetic_structure(ipr, mgp, am, mag_dom=None, cell=None):
    return _pycrysfml.FortFuncs_write_magnetic_structure(ipr, mgp, am, mag_dom, cell)
FortFuncs_write_magnetic_structure = _pycrysfml.FortFuncs_write_magnetic_structure

def FortFuncs_write_mcif(ipr, mcell, msgp, am, cell=None):
    return _pycrysfml.FortFuncs_write_mcif(ipr, mcell, msgp, am, cell)
FortFuncs_write_mcif = _pycrysfml.FortFuncs_write_mcif

def FortFuncs_write_shubnikov_group(sg, iunit=None):
    return _pycrysfml.FortFuncs_write_shubnikov_group(sg, iunit)
FortFuncs_write_shubnikov_group = _pycrysfml.FortFuncs_write_shubnikov_group

def FortFuncs_index_cube(iv, mc):
    return _pycrysfml.FortFuncs_index_cube(iv, mc)
FortFuncs_index_cube = _pycrysfml.FortFuncs_index_cube

def FortFuncs_vpoint_in_cube(r, s, t, x000, x001, x010, x011, x100, x101, x110, x111):
    return _pycrysfml.FortFuncs_vpoint_in_cube(r, s, t, x000, x001, x010, x011, x100, x101, x110, x111)
FortFuncs_vpoint_in_cube = _pycrysfml.FortFuncs_vpoint_in_cube

def FortFuncs_vpoint_in_line(r, x0, x1):
    return _pycrysfml.FortFuncs_vpoint_in_line(r, x0, x1)
FortFuncs_vpoint_in_line = _pycrysfml.FortFuncs_vpoint_in_line

def FortFuncs_vpoint_in_square(r, s, x00, x01, x10, x11):
    return _pycrysfml.FortFuncs_vpoint_in_square(r, s, x00, x01, x10, x11)
FortFuncs_vpoint_in_square = _pycrysfml.FortFuncs_vpoint_in_square

def FortFuncs_init_err_maps():
    return _pycrysfml.FortFuncs_init_err_maps()
FortFuncs_init_err_maps = _pycrysfml.FortFuncs_init_err_maps

def FortFuncs_set_cube_info():
    return _pycrysfml.FortFuncs_set_cube_info()
FortFuncs_set_cube_info = _pycrysfml.FortFuncs_set_cube_info

def FortFuncs_veclength(a, b):
    return _pycrysfml.FortFuncs_veclength(a, b)
FortFuncs_veclength = _pycrysfml.FortFuncs_veclength

def FortFuncs_init_err_math3d():
    return _pycrysfml.FortFuncs_init_err_math3d()
FortFuncs_init_err_math3d = _pycrysfml.FortFuncs_init_err_math3d

def FortFuncs_set_eps(neweps):
    return _pycrysfml.FortFuncs_set_eps(neweps)
FortFuncs_set_eps = _pycrysfml.FortFuncs_set_eps

def FortFuncs_set_eps_default():
    return _pycrysfml.FortFuncs_set_eps_default()
FortFuncs_set_eps_default = _pycrysfml.FortFuncs_set_eps_default

def FortFuncs_get_plane_from_3points(p1, p2, p3, a, b, c, d):
    return _pycrysfml.FortFuncs_get_plane_from_3points(p1, p2, p3, a, b, c, d)
FortFuncs_get_plane_from_3points = _pycrysfml.FortFuncs_get_plane_from_3points

def FortFuncs_matrix_diageigen(a, v, c):
    return _pycrysfml.FortFuncs_matrix_diageigen(a, v, c)
FortFuncs_matrix_diageigen = _pycrysfml.FortFuncs_matrix_diageigen

def FortFuncs_matrix_inverse(a, b, ifail):
    return _pycrysfml.FortFuncs_matrix_inverse(a, b, ifail)
FortFuncs_matrix_inverse = _pycrysfml.FortFuncs_matrix_inverse

def FortFuncs_resolv_sist_1x2(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_1x2(w, t, ts, x, ix)
FortFuncs_resolv_sist_1x2 = _pycrysfml.FortFuncs_resolv_sist_1x2

def FortFuncs_resolv_sist_1x3(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_1x3(w, t, ts, x, ix)
FortFuncs_resolv_sist_1x3 = _pycrysfml.FortFuncs_resolv_sist_1x3

def FortFuncs_resolv_sist_2x2(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_2x2(w, t, ts, x, ix)
FortFuncs_resolv_sist_2x2 = _pycrysfml.FortFuncs_resolv_sist_2x2

def FortFuncs_resolv_sist_2x3(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_2x3(w, t, ts, x, ix)
FortFuncs_resolv_sist_2x3 = _pycrysfml.FortFuncs_resolv_sist_2x3

def FortFuncs_resolv_sist_3x3(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_3x3(w, t, ts, x, ix)
FortFuncs_resolv_sist_3x3 = _pycrysfml.FortFuncs_resolv_sist_3x3

def FortFuncs_bessj0(x):
    return _pycrysfml.FortFuncs_bessj0(x)
FortFuncs_bessj0 = _pycrysfml.FortFuncs_bessj0

def FortFuncs_bessj1(x):
    return _pycrysfml.FortFuncs_bessj1(x)
FortFuncs_bessj1 = _pycrysfml.FortFuncs_bessj1

def FortFuncs_bessj(n, x):
    return _pycrysfml.FortFuncs_bessj(n, x)
FortFuncs_bessj = _pycrysfml.FortFuncs_bessj

def FortFuncs_pgcd(a, b):
    return _pycrysfml.FortFuncs_pgcd(a, b)
FortFuncs_pgcd = _pycrysfml.FortFuncs_pgcd

def FortFuncs_ppcm(a, b):
    return _pycrysfml.FortFuncs_ppcm(a, b)
FortFuncs_ppcm = _pycrysfml.FortFuncs_ppcm

def FortFuncs_epss_val():
    return _pycrysfml.FortFuncs_epss_val()
FortFuncs_epss_val = _pycrysfml.FortFuncs_epss_val

def FortFuncs_ep_ss_val():
    return _pycrysfml.FortFuncs_ep_ss_val()
FortFuncs_ep_ss_val = _pycrysfml.FortFuncs_ep_ss_val

def FortFuncs_init_err_mathgen():
    return _pycrysfml.FortFuncs_init_err_mathgen()
FortFuncs_init_err_mathgen = _pycrysfml.FortFuncs_init_err_mathgen

def FortFuncs_set_epsg_default():
    return _pycrysfml.FortFuncs_set_epsg_default()
FortFuncs_set_epsg_default = _pycrysfml.FortFuncs_set_epsg_default

def FortFuncs_cartesian_to_fractional(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_cartesian_to_fractional(molecule, cell, newmolecule)
FortFuncs_cartesian_to_fractional = _pycrysfml.FortFuncs_cartesian_to_fractional

def FortFuncs_cartesian_to_spherical(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_cartesian_to_spherical(molecule, newmolecule)
FortFuncs_cartesian_to_spherical = _pycrysfml.FortFuncs_cartesian_to_spherical

def FortFuncs_cartesian_to_zmatrix(molecule, newmolecule=None, cell=None, d_min=None, d_max=None):
    return _pycrysfml.FortFuncs_cartesian_to_zmatrix(molecule, newmolecule, cell, d_min, d_max)
FortFuncs_cartesian_to_zmatrix = _pycrysfml.FortFuncs_cartesian_to_zmatrix

def FortFuncs_fix_reference(molecule, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None):
    return _pycrysfml.FortFuncs_fix_reference(molecule, newmolecule, natom_o, natom_x, natom_xy)
FortFuncs_fix_reference = _pycrysfml.FortFuncs_fix_reference

def FortFuncs_fix_orient_cartesian(molecule, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None, mat=None):
    return _pycrysfml.FortFuncs_fix_orient_cartesian(molecule, newmolecule, natom_o, natom_x, natom_xy, mat)
FortFuncs_fix_orient_cartesian = _pycrysfml.FortFuncs_fix_orient_cartesian

def FortFuncs_fractional_to_cartesian(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_fractional_to_cartesian(molecule, cell, newmolecule)
FortFuncs_fractional_to_cartesian = _pycrysfml.FortFuncs_fractional_to_cartesian

def FortFuncs_fractional_to_spherical(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_fractional_to_spherical(molecule, cell, newmolecule)
FortFuncs_fractional_to_spherical = _pycrysfml.FortFuncs_fractional_to_spherical

def FortFuncs_fractional_to_zmatrix(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_fractional_to_zmatrix(molecule, cell, newmolecule)
FortFuncs_fractional_to_zmatrix = _pycrysfml.FortFuncs_fractional_to_zmatrix

def FortFuncs_init_err_molec():
    return _pycrysfml.FortFuncs_init_err_molec()
FortFuncs_init_err_molec = _pycrysfml.FortFuncs_init_err_molec

def FortFuncs_init_molecule(molecule, natm=None):
    return _pycrysfml.FortFuncs_init_molecule(molecule, natm)
FortFuncs_init_molecule = _pycrysfml.FortFuncs_init_molecule

def FortFuncs_init_mol_crys(molx, natm=None, nmol=None):
    return _pycrysfml.FortFuncs_init_mol_crys(molx, natm, nmol)
FortFuncs_init_mol_crys = _pycrysfml.FortFuncs_init_mol_crys

def FortFuncs_molcrys_to_atomlist(molcrys, atm):
    return _pycrysfml.FortFuncs_molcrys_to_atomlist(molcrys, atm)
FortFuncs_molcrys_to_atomlist = _pycrysfml.FortFuncs_molcrys_to_atomlist

def FortFuncs_molec_to_atomlist(molec, atm, coor_type=None, cell=None):
    return _pycrysfml.FortFuncs_molec_to_atomlist(molec, atm, coor_type, cell)
FortFuncs_molec_to_atomlist = _pycrysfml.FortFuncs_molec_to_atomlist

def FortFuncs_set_euler_matrix(rt, phi, theta, chi, eu):
    return _pycrysfml.FortFuncs_set_euler_matrix(rt, phi, theta, chi, eu)
FortFuncs_set_euler_matrix = _pycrysfml.FortFuncs_set_euler_matrix

def FortFuncs_spherical_to_cartesian(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_spherical_to_cartesian(molecule, newmolecule)
FortFuncs_spherical_to_cartesian = _pycrysfml.FortFuncs_spherical_to_cartesian

def FortFuncs_spherical_to_fractional(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_spherical_to_fractional(molecule, cell, newmolecule)
FortFuncs_spherical_to_fractional = _pycrysfml.FortFuncs_spherical_to_fractional

def FortFuncs_spherical_to_zmatrix(molecule, newmolecule=None, cell=None):
    return _pycrysfml.FortFuncs_spherical_to_zmatrix(molecule, newmolecule, cell)
FortFuncs_spherical_to_zmatrix = _pycrysfml.FortFuncs_spherical_to_zmatrix

def FortFuncs_write_molecular_crystal(molcrys, lun=None):
    return _pycrysfml.FortFuncs_write_molecular_crystal(molcrys, lun)
FortFuncs_write_molecular_crystal = _pycrysfml.FortFuncs_write_molecular_crystal

def FortFuncs_write_molecule(molecule, lun=None):
    return _pycrysfml.FortFuncs_write_molecule(molecule, lun)
FortFuncs_write_molecule = _pycrysfml.FortFuncs_write_molecule

def FortFuncs_zmatrix_to_cartesian(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_zmatrix_to_cartesian(molecule, newmolecule)
FortFuncs_zmatrix_to_cartesian = _pycrysfml.FortFuncs_zmatrix_to_cartesian

def FortFuncs_zmatrix_to_fractional(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_zmatrix_to_fractional(molecule, cell, newmolecule)
FortFuncs_zmatrix_to_fractional = _pycrysfml.FortFuncs_zmatrix_to_fractional

def FortFuncs_zmatrix_to_spherical(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_zmatrix_to_spherical(molecule, newmolecule)
FortFuncs_zmatrix_to_spherical = _pycrysfml.FortFuncs_zmatrix_to_spherical

def FortFuncs_calc_mag_interaction_vector(reflex, cell):
    return _pycrysfml.FortFuncs_calc_mag_interaction_vector(reflex, cell)
FortFuncs_calc_mag_interaction_vector = _pycrysfml.FortFuncs_calc_mag_interaction_vector

def FortFuncs_calc_magnetic_strf_miv(cell, mgp, atm, mh):
    return _pycrysfml.FortFuncs_calc_magnetic_strf_miv(cell, mgp, atm, mh)
FortFuncs_calc_magnetic_strf_miv = _pycrysfml.FortFuncs_calc_magnetic_strf_miv

def FortFuncs_calc_magnetic_strf_miv_dom(cell, mgp, atm, mag_dom, mh):
    return _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom(cell, mgp, atm, mag_dom, mh)
FortFuncs_calc_magnetic_strf_miv_dom = _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom

def FortFuncs_calc_magnetic_strf_tensor(spg, atm, mh):
    return _pycrysfml.FortFuncs_calc_magnetic_strf_tensor(spg, atm, mh)
FortFuncs_calc_magnetic_strf_tensor = _pycrysfml.FortFuncs_calc_magnetic_strf_tensor

def FortFuncs_gen_satellites(cell, grp, smax, h, ord=None, powder=None, hkl=None):
    return _pycrysfml.FortFuncs_gen_satellites(cell, grp, smax, h, ord, powder, hkl)
FortFuncs_gen_satellites = _pycrysfml.FortFuncs_gen_satellites

def FortFuncs_init_err_msfac():
    return _pycrysfml.FortFuncs_init_err_msfac()
FortFuncs_init_err_msfac = _pycrysfml.FortFuncs_init_err_msfac

def FortFuncs_init_mag_structure_factors(reflex, atm, grp, lun=None):
    return _pycrysfml.FortFuncs_init_mag_structure_factors(reflex, atm, grp, lun)
FortFuncs_init_mag_structure_factors = _pycrysfml.FortFuncs_init_mag_structure_factors

def FortFuncs_mag_structure_factors(cell, atm, grp, reflex):
    return _pycrysfml.FortFuncs_mag_structure_factors(cell, atm, grp, reflex)
FortFuncs_mag_structure_factors = _pycrysfml.FortFuncs_mag_structure_factors

def FortFuncs_write_mag_structure_factors(lun, reflex, grp):
    return _pycrysfml.FortFuncs_write_mag_structure_factors(lun, reflex, grp)
FortFuncs_write_mag_structure_factors = _pycrysfml.FortFuncs_write_mag_structure_factors

def FortFuncs_init_err_optim():
    return _pycrysfml.FortFuncs_init_err_optim()
FortFuncs_init_err_optim = _pycrysfml.FortFuncs_init_err_optim

def FortFuncs_init_opt_conditions(opt):
    return _pycrysfml.FortFuncs_init_opt_conditions(opt)
FortFuncs_init_opt_conditions = _pycrysfml.FortFuncs_init_opt_conditions

def FortFuncs_write_optimization_conditions(ipr, c):
    return _pycrysfml.FortFuncs_write_optimization_conditions(ipr, c)
FortFuncs_write_optimization_conditions = _pycrysfml.FortFuncs_write_optimization_conditions

def FortFuncs_write_polar_info(polari, mag_dom, lun=None, info=None):
    return _pycrysfml.FortFuncs_write_polar_info(polari, mag_dom, lun, info)
FortFuncs_write_polar_info = _pycrysfml.FortFuncs_write_polar_info

def FortFuncs_write_polar_line(polari, lun=None):
    return _pycrysfml.FortFuncs_write_polar_line(polari, lun)
FortFuncs_write_polar_line = _pycrysfml.FortFuncs_write_polar_line

def FortFuncs_init_prof_val():
    return _pycrysfml.FortFuncs_init_prof_val()
FortFuncs_init_prof_val = _pycrysfml.FortFuncs_init_prof_val

def FortFuncs_prof_val(eta, gamma, asym1, asym2, twoth, twoth0, dprdt, dprdg, dprde, dprds, dprdd, profval, use_asym, use_hps):
    return _pycrysfml.FortFuncs_prof_val(eta, gamma, asym1, asym2, twoth, twoth0, dprdt, dprdg, dprde, dprds, dprdd, profval, use_asym, use_hps)
FortFuncs_prof_val = _pycrysfml.FortFuncs_prof_val

def FortFuncs_tof_carpenter(dt, d, alfa, beta, gamma, eta, kappa, tof_theta, tof_peak, deriv=None):
    return _pycrysfml.FortFuncs_tof_carpenter(dt, d, alfa, beta, gamma, eta, kappa, tof_theta, tof_peak, deriv)
FortFuncs_tof_carpenter = _pycrysfml.FortFuncs_tof_carpenter

def FortFuncs_tof_jorgensen(dt, alfa, beta, sigma, tof_peak, deriv=None):
    return _pycrysfml.FortFuncs_tof_jorgensen(dt, alfa, beta, sigma, tof_peak, deriv)
FortFuncs_tof_jorgensen = _pycrysfml.FortFuncs_tof_jorgensen

def FortFuncs_tof_jorgensen_vondreele(dt, alfa, beta, gamma, eta, tof_peak, deriv=None):
    return _pycrysfml.FortFuncs_tof_jorgensen_vondreele(dt, alfa, beta, gamma, eta, tof_peak, deriv)
FortFuncs_tof_jorgensen_vondreele = _pycrysfml.FortFuncs_tof_jorgensen_vondreele

def FortFuncs_hk_equiv(h, k, spacegk, friedel=None):
    return _pycrysfml.FortFuncs_hk_equiv(h, k, spacegk, friedel)
FortFuncs_hk_equiv = _pycrysfml.FortFuncs_hk_equiv

def FortFuncs_k_equiv(h, k, latyp):
    return _pycrysfml.FortFuncs_k_equiv(h, k, latyp)
FortFuncs_k_equiv = _pycrysfml.FortFuncs_k_equiv

def FortFuncs_k_equiv_minus_k(vec, lat):
    return _pycrysfml.FortFuncs_k_equiv_minus_k(vec, lat)
FortFuncs_k_equiv_minus_k = _pycrysfml.FortFuncs_k_equiv_minus_k

def FortFuncs_k_star(k, spacegroup, gk, ext=None):
    return _pycrysfml.FortFuncs_k_star(k, spacegroup, gk, ext)
FortFuncs_k_star = _pycrysfml.FortFuncs_k_star

def FortFuncs_write_group_k(gk, lun=None):
    return _pycrysfml.FortFuncs_write_group_k(gk, lun)
FortFuncs_write_group_k = _pycrysfml.FortFuncs_write_group_k

def FortFuncs_init_err_random():
    return _pycrysfml.FortFuncs_init_err_random()
FortFuncs_init_err_random = _pycrysfml.FortFuncs_init_err_random

def FortFuncs_random_beta(aa, bb, first, fn_val):
    return _pycrysfml.FortFuncs_random_beta(aa, bb, first, fn_val)
FortFuncs_random_beta = _pycrysfml.FortFuncs_random_beta

def FortFuncs_random_binomial1(n, p, first, ival):
    return _pycrysfml.FortFuncs_random_binomial1(n, p, first, ival)
FortFuncs_random_binomial1 = _pycrysfml.FortFuncs_random_binomial1

def FortFuncs_random_binomial2(n, pp, first, ival):
    return _pycrysfml.FortFuncs_random_binomial2(n, pp, first, ival)
FortFuncs_random_binomial2 = _pycrysfml.FortFuncs_random_binomial2

def FortFuncs_random_cauchy(fn_val):
    return _pycrysfml.FortFuncs_random_cauchy(fn_val)
FortFuncs_random_cauchy = _pycrysfml.FortFuncs_random_cauchy

def FortFuncs_random_chisq(ndf, first, fn_val):
    return _pycrysfml.FortFuncs_random_chisq(ndf, first, fn_val)
FortFuncs_random_chisq = _pycrysfml.FortFuncs_random_chisq

def FortFuncs_random_exponential(fn_val):
    return _pycrysfml.FortFuncs_random_exponential(fn_val)
FortFuncs_random_exponential = _pycrysfml.FortFuncs_random_exponential

def FortFuncs_random_gamma(s, first, fn_val):
    return _pycrysfml.FortFuncs_random_gamma(s, first, fn_val)
FortFuncs_random_gamma = _pycrysfml.FortFuncs_random_gamma

def FortFuncs_random_gamma1(s, first, fn_val):
    return _pycrysfml.FortFuncs_random_gamma1(s, first, fn_val)
FortFuncs_random_gamma1 = _pycrysfml.FortFuncs_random_gamma1

def FortFuncs_random_gamma2(s, first, fn_val):
    return _pycrysfml.FortFuncs_random_gamma2(s, first, fn_val)
FortFuncs_random_gamma2 = _pycrysfml.FortFuncs_random_gamma2

def FortFuncs_random_inv_gauss(h, b, first, fn_val):
    return _pycrysfml.FortFuncs_random_inv_gauss(h, b, first, fn_val)
FortFuncs_random_inv_gauss = _pycrysfml.FortFuncs_random_inv_gauss

def FortFuncs_random_mvnorm(h, d, f, first, x, ier):
    return _pycrysfml.FortFuncs_random_mvnorm(h, d, f, first, x, ier)
FortFuncs_random_mvnorm = _pycrysfml.FortFuncs_random_mvnorm

def FortFuncs_random_neg_binomial(sk, p, ival):
    return _pycrysfml.FortFuncs_random_neg_binomial(sk, p, ival)
FortFuncs_random_neg_binomial = _pycrysfml.FortFuncs_random_neg_binomial

def FortFuncs_random_normal(fn_val):
    return _pycrysfml.FortFuncs_random_normal(fn_val)
FortFuncs_random_normal = _pycrysfml.FortFuncs_random_normal

def FortFuncs_random_order(order):
    return _pycrysfml.FortFuncs_random_order(order)
FortFuncs_random_order = _pycrysfml.FortFuncs_random_order

def FortFuncs_random_poisson(mt, genpoi):
    return _pycrysfml.FortFuncs_random_poisson(mt, genpoi)
FortFuncs_random_poisson = _pycrysfml.FortFuncs_random_poisson

def FortFuncs_random_t(m, fn_val):
    return _pycrysfml.FortFuncs_random_t(m, fn_val)
FortFuncs_random_t = _pycrysfml.FortFuncs_random_t

def FortFuncs_random_von_mises(k, first, fn_val):
    return _pycrysfml.FortFuncs_random_von_mises(k, first, fn_val)
FortFuncs_random_von_mises = _pycrysfml.FortFuncs_random_von_mises

def FortFuncs_random_weibull(a, fn_val):
    return _pycrysfml.FortFuncs_random_weibull(a, fn_val)
FortFuncs_random_weibull = _pycrysfml.FortFuncs_random_weibull

def FortFuncs_seed_random_number(i_input=None, i_output=None):
    return _pycrysfml.FortFuncs_seed_random_number(i_input, i_output)
FortFuncs_seed_random_number = _pycrysfml.FortFuncs_seed_random_number

def FortFuncs_allocate_vparam(n):
    return _pycrysfml.FortFuncs_allocate_vparam(n)
FortFuncs_allocate_vparam = _pycrysfml.FortFuncs_allocate_vparam

def FortFuncs_get_restang_line(line, fatom):
    return _pycrysfml.FortFuncs_get_restang_line(line, fatom)
FortFuncs_get_restang_line = _pycrysfml.FortFuncs_get_restang_line

def FortFuncs_get_restdis_line(line, fatom):
    return _pycrysfml.FortFuncs_get_restdis_line(line, fatom)
FortFuncs_get_restdis_line = _pycrysfml.FortFuncs_get_restdis_line

def FortFuncs_get_resttor_line(line, fatom):
    return _pycrysfml.FortFuncs_get_resttor_line(line, fatom)
FortFuncs_get_resttor_line = _pycrysfml.FortFuncs_get_resttor_line

def FortFuncs_init_err_refcodes():
    return _pycrysfml.FortFuncs_init_err_refcodes()
FortFuncs_init_err_refcodes = _pycrysfml.FortFuncs_init_err_refcodes

def FortFuncs_init_refcodes(fatom=None, fmatom=None, mag_dom=None, molcrys=None, molec=None, model=None):
    return _pycrysfml.FortFuncs_init_refcodes(fatom, fmatom, mag_dom, molcrys, molec, model)
FortFuncs_init_refcodes = _pycrysfml.FortFuncs_init_refcodes

def FortFuncs_read_refgcodes_file(file_dat, n_ini, n_end, model, sys=None, iphas=None):
    return _pycrysfml.FortFuncs_read_refgcodes_file(file_dat, n_ini, n_end, model, sys, iphas)
FortFuncs_read_refgcodes_file = _pycrysfml.FortFuncs_read_refgcodes_file

def FortFuncs_vstate_to_modelpar(model, mode=None):
    return _pycrysfml.FortFuncs_vstate_to_modelpar(model, mode)
FortFuncs_vstate_to_modelpar = _pycrysfml.FortFuncs_vstate_to_modelpar

def FortFuncs_write_info_refgcodes(model, iunit=None):
    return _pycrysfml.FortFuncs_write_info_refgcodes(model, iunit)
FortFuncs_write_info_refgcodes = _pycrysfml.FortFuncs_write_info_refgcodes

def FortFuncs_write_info_refparams(iunit=None):
    return _pycrysfml.FortFuncs_write_info_refparams(iunit)
FortFuncs_write_info_refparams = _pycrysfml.FortFuncs_write_info_refparams

def FortFuncs_write_restraints_obscalc(a, iunit=None):
    return _pycrysfml.FortFuncs_write_restraints_obscalc(a, iunit)
FortFuncs_write_restraints_obscalc = _pycrysfml.FortFuncs_write_restraints_obscalc

def FortFuncs_get_maxnumref(sintlmax, volcell, sintlmin=None, mult=None):
    return _pycrysfml.FortFuncs_get_maxnumref(sintlmax, volcell, sintlmin, mult)
FortFuncs_get_maxnumref = _pycrysfml.FortFuncs_get_maxnumref

def FortFuncs_mhkl_absent(h, shubg):
    return _pycrysfml.FortFuncs_mhkl_absent(h, shubg)
FortFuncs_mhkl_absent = _pycrysfml.FortFuncs_mhkl_absent

def FortFuncs_init_err_refl():
    return _pycrysfml.FortFuncs_init_err_refl()
FortFuncs_init_err_refl = _pycrysfml.FortFuncs_init_err_refl

def FortFuncs_init_reflist(reflex, n=None):
    return _pycrysfml.FortFuncs_init_reflist(reflex, n)
FortFuncs_init_reflist = _pycrysfml.FortFuncs_init_reflist

def FortFuncs_write_asu(spacegroup, iunit=None):
    return _pycrysfml.FortFuncs_write_asu(spacegroup, iunit)
FortFuncs_write_asu = _pycrysfml.FortFuncs_write_asu

def FortFuncs_write_reflist_info(rfl, iunit=None, mode=None):
    return _pycrysfml.FortFuncs_write_reflist_info(rfl, iunit, mode)
FortFuncs_write_reflist_info = _pycrysfml.FortFuncs_write_reflist_info

def FortFuncs_angs_4c_bisecting(wave, z1, tth, om, ch, ph, ierr):
    return _pycrysfml.FortFuncs_angs_4c_bisecting(wave, z1, tth, om, ch, ph, ierr)
FortFuncs_angs_4c_bisecting = _pycrysfml.FortFuncs_angs_4c_bisecting

def FortFuncs_calang(h, tteta, om, ch, ph, ierr, wav=None, ubm=None, geom=None):
    return _pycrysfml.FortFuncs_calang(h, tteta, om, ch, ph, ierr, wav, ubm, geom)
FortFuncs_calang = _pycrysfml.FortFuncs_calang

def FortFuncs_calc_om_chi_phi(vhkl, vlab1, psi, ub, om, ch, ph, ierr):
    return _pycrysfml.FortFuncs_calc_om_chi_phi(vhkl, vlab1, psi, ub, om, ch, ph, ierr)
FortFuncs_calc_om_chi_phi = _pycrysfml.FortFuncs_calc_om_chi_phi

def FortFuncs_calc_psi(vhkl, vlab1, om, ch, ph, ub, psi, ierr):
    return _pycrysfml.FortFuncs_calc_psi(vhkl, vlab1, om, ch, ph, ub, psi, ierr)
FortFuncs_calc_psi = _pycrysfml.FortFuncs_calc_psi

def FortFuncs_cell_fr_ub(ub, ipr=None, dcel=None, rcel=None):
    return _pycrysfml.FortFuncs_cell_fr_ub(ub, ipr, dcel, rcel)
FortFuncs_cell_fr_ub = _pycrysfml.FortFuncs_cell_fr_ub

def FortFuncs_chi_mat(chi, dum):
    return _pycrysfml.FortFuncs_chi_mat(chi, dum)
FortFuncs_chi_mat = _pycrysfml.FortFuncs_chi_mat

def FortFuncs_psd_convert(mpsd, gamm, gamp, nup, xobs, zobs, cath, anod, ierr):
    return _pycrysfml.FortFuncs_psd_convert(mpsd, gamm, gamp, nup, xobs, zobs, cath, anod, ierr)
FortFuncs_psd_convert = _pycrysfml.FortFuncs_psd_convert

def FortFuncs_d19psd(mpsd, ga, nu, cath, anod, ierr):
    return _pycrysfml.FortFuncs_d19psd(mpsd, ga, nu, cath, anod, ierr)
FortFuncs_d19psd = _pycrysfml.FortFuncs_d19psd

def FortFuncs_dspace(wave, vhkl, cell, ds, th, ierr):
    return _pycrysfml.FortFuncs_dspace(wave, vhkl, cell, ds, th, ierr)
FortFuncs_dspace = _pycrysfml.FortFuncs_dspace

def FortFuncs_equatorial_chi_phi(z1, ch, ph):
    return _pycrysfml.FortFuncs_equatorial_chi_phi(z1, ch, ph)
FortFuncs_equatorial_chi_phi = _pycrysfml.FortFuncs_equatorial_chi_phi

def FortFuncs_fixdnu(wave, z1, nu, ch, ph, ga, om, ierr):
    return _pycrysfml.FortFuncs_fixdnu(wave, z1, nu, ch, ph, ga, om, ierr)
FortFuncs_fixdnu = _pycrysfml.FortFuncs_fixdnu

def FortFuncs_flat_cone_vertdet(wave, z1, ub, vrho, rho, ch, ph, ga, om, nu, ierr):
    return _pycrysfml.FortFuncs_flat_cone_vertdet(wave, z1, ub, vrho, rho, ch, ph, ga, om, nu, ierr)
FortFuncs_flat_cone_vertdet = _pycrysfml.FortFuncs_flat_cone_vertdet

def FortFuncs_genb(c, b):
    return _pycrysfml.FortFuncs_genb(c, b)
FortFuncs_genb = _pycrysfml.FortFuncs_genb

def FortFuncs_genub(b, h1, h2, h1o, h2o, ub, ierr):
    return _pycrysfml.FortFuncs_genub(b, h1, h2, h1o, h2o, ub, ierr)
FortFuncs_genub = _pycrysfml.FortFuncs_genub

def FortFuncs_get_angs_nb(wave, z1, ga, om, nu, ierr):
    return _pycrysfml.FortFuncs_get_angs_nb(wave, z1, ga, om, nu, ierr)
FortFuncs_get_angs_nb = _pycrysfml.FortFuncs_get_angs_nb

def FortFuncs_get_dspacing_theta(wave, z1, ds, th, ierr):
    return _pycrysfml.FortFuncs_get_dspacing_theta(wave, z1, ds, th, ierr)
FortFuncs_get_dspacing_theta = _pycrysfml.FortFuncs_get_dspacing_theta

def FortFuncs_get_gaomnu_frchiphi(wave, z1, ch, ph, ga, om, nu, ierr):
    return _pycrysfml.FortFuncs_get_gaomnu_frchiphi(wave, z1, ch, ph, ga, om, nu, ierr)
FortFuncs_get_gaomnu_frchiphi = _pycrysfml.FortFuncs_get_gaomnu_frchiphi

def FortFuncs_get_ub_from_hkl_hkl_omega(wave, cell, h1, h2, omega, ub, ok, mess):
    return _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega(wave, cell, h1, h2, omega, ub, ok, mess)
FortFuncs_get_ub_from_hkl_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega

def FortFuncs_get_ub_from_uvw_hkl_omega(wave, cell, zone_axis, h1, omega, ub, ok, mess):
    return _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega(wave, cell, zone_axis, h1, omega, ub, ok, mess)
FortFuncs_get_ub_from_uvw_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega

def FortFuncs_get_waveganu_frz4(z4, wave, ga, nu, ierr):
    return _pycrysfml.FortFuncs_get_waveganu_frz4(z4, wave, ga, nu, ierr)
FortFuncs_get_waveganu_frz4 = _pycrysfml.FortFuncs_get_waveganu_frz4

def FortFuncs_get_z1_d9angls(wave, ttheta, om, ch, ph, z1):
    return _pycrysfml.FortFuncs_get_z1_d9angls(wave, ttheta, om, ch, ph, z1)
FortFuncs_get_z1_d9angls = _pycrysfml.FortFuncs_get_z1_d9angls

def FortFuncs_normal(v, ierr):
    return _pycrysfml.FortFuncs_normal(v, ierr)
FortFuncs_normal = _pycrysfml.FortFuncs_normal

def FortFuncs_phi_mat(phi, dum):
    return _pycrysfml.FortFuncs_phi_mat(phi, dum)
FortFuncs_phi_mat = _pycrysfml.FortFuncs_phi_mat

def FortFuncs_psi_mat(psi, dum):
    return _pycrysfml.FortFuncs_psi_mat(psi, dum)
FortFuncs_psi_mat = _pycrysfml.FortFuncs_psi_mat

def FortFuncs_read_twinlaw(twin, read_ok, lun=None, fich_cfl=None):
    return _pycrysfml.FortFuncs_read_twinlaw(twin, read_ok, lun, fich_cfl)
FortFuncs_read_twinlaw = _pycrysfml.FortFuncs_read_twinlaw

def FortFuncs_refvec(vhkl, ub, vs, vz, ierr):
    return _pycrysfml.FortFuncs_refvec(vhkl, ub, vs, vz, ierr)
FortFuncs_refvec = _pycrysfml.FortFuncs_refvec

def FortFuncs_s4cnb(angl_4c, angl_nb, ierr):
    return _pycrysfml.FortFuncs_s4cnb(angl_4c, angl_nb, ierr)
FortFuncs_s4cnb = _pycrysfml.FortFuncs_s4cnb

def FortFuncs_set_psd(dist=None, cg=None, ag=None, nh=None, nv=None, ip=None):
    return _pycrysfml.FortFuncs_set_psd(dist, cg, ag, nh, nv, ip)
FortFuncs_set_psd = _pycrysfml.FortFuncs_set_psd

def FortFuncs_snb4c(angl_nb, angl_4c):
    return _pycrysfml.FortFuncs_snb4c(angl_nb, angl_4c)
FortFuncs_snb4c = _pycrysfml.FortFuncs_snb4c

def FortFuncs_sxdpsd(mpsd, gamm, wave, nup, gamp, xobs, zobs, xcel, time, zcel, ierr):
    return _pycrysfml.FortFuncs_sxdpsd(mpsd, gamm, wave, nup, gamp, xobs, zobs, xcel, time, zcel, ierr)
FortFuncs_sxdpsd = _pycrysfml.FortFuncs_sxdpsd

def FortFuncs_triple(v1, v2, tv, ierr):
    return _pycrysfml.FortFuncs_triple(v1, v2, tv, ierr)
FortFuncs_triple = _pycrysfml.FortFuncs_triple

def FortFuncs_write_twinlaw(twin, lun, cell=None):
    return _pycrysfml.FortFuncs_write_twinlaw(twin, lun, cell)
FortFuncs_write_twinlaw = _pycrysfml.FortFuncs_write_twinlaw

def FortFuncs_z1frfc(wave, tth, om, ch, ph, z1):
    return _pycrysfml.FortFuncs_z1frfc(wave, tth, om, ch, ph, z1)
FortFuncs_z1frfc = _pycrysfml.FortFuncs_z1frfc

def FortFuncs_z1frmd(wave, ch, ph, ga, om, nu, z1):
    return _pycrysfml.FortFuncs_z1frmd(wave, ch, ph, ga, om, nu, z1)
FortFuncs_z1frmd = _pycrysfml.FortFuncs_z1frmd

def FortFuncs_z1frnb(wave, ga, om, nu, z1):
    return _pycrysfml.FortFuncs_z1frnb(wave, ga, om, nu, z1)
FortFuncs_z1frnb = _pycrysfml.FortFuncs_z1frnb

def FortFuncs_z1frz2(z2, ph, z1):
    return _pycrysfml.FortFuncs_z1frz2(z2, ph, z1)
FortFuncs_z1frz2 = _pycrysfml.FortFuncs_z1frz2

def FortFuncs_z1frz3(z3, ch, ph, z1):
    return _pycrysfml.FortFuncs_z1frz3(z3, ch, ph, z1)
FortFuncs_z1frz3 = _pycrysfml.FortFuncs_z1frz3

def FortFuncs_z1frz4(z4, om, ch, ph, z1):
    return _pycrysfml.FortFuncs_z1frz4(z4, om, ch, ph, z1)
FortFuncs_z1frz4 = _pycrysfml.FortFuncs_z1frz4

def FortFuncs_z2frz1(z1, ph, z2):
    return _pycrysfml.FortFuncs_z2frz1(z1, ph, z2)
FortFuncs_z2frz1 = _pycrysfml.FortFuncs_z2frz1

def FortFuncs_z3frz1(z1, ch, ph, z3):
    return _pycrysfml.FortFuncs_z3frz1(z1, ch, ph, z3)
FortFuncs_z3frz1 = _pycrysfml.FortFuncs_z3frz1

def FortFuncs_z4frgn(wave, ga, nu, z4):
    return _pycrysfml.FortFuncs_z4frgn(wave, ga, nu, z4)
FortFuncs_z4frgn = _pycrysfml.FortFuncs_z4frgn

def FortFuncs_z4frz1(z1, om, ch, ph, z4):
    return _pycrysfml.FortFuncs_z4frz1(z1, om, ch, ph, z4)
FortFuncs_z4frz1 = _pycrysfml.FortFuncs_z4frz1

def FortFuncs_additional_scattering_factors(fil, add_scatt, ok, mess):
    return _pycrysfml.FortFuncs_additional_scattering_factors(fil, add_scatt, ok, mess)
FortFuncs_additional_scattering_factors = _pycrysfml.FortFuncs_additional_scattering_factors

def FortFuncs_allocate_scattering_species(n, scf):
    return _pycrysfml.FortFuncs_allocate_scattering_species(n, scf)
FortFuncs_allocate_scattering_species = _pycrysfml.FortFuncs_allocate_scattering_species

def FortFuncs_calc_strfactor(mode, rad, nn, sn, atm, grp, sf2):
    return _pycrysfml.FortFuncs_calc_strfactor(mode, rad, nn, sn, atm, grp, sf2)
FortFuncs_calc_strfactor = _pycrysfml.FortFuncs_calc_strfactor

def FortFuncs_calc_hkl_strfactor(mode, rad, hn, sn, atm, grp, sf2):
    return _pycrysfml.FortFuncs_calc_hkl_strfactor(mode, rad, hn, sn, atm, grp, sf2)
FortFuncs_calc_hkl_strfactor = _pycrysfml.FortFuncs_calc_hkl_strfactor

def FortFuncs_init_calc_hkl_strfactors(atm, mode=None, arg3=None, lun=None):
    return _pycrysfml.FortFuncs_init_calc_hkl_strfactors(atm, mode, arg3, lun)
FortFuncs_init_calc_hkl_strfactors = _pycrysfml.FortFuncs_init_calc_hkl_strfactors

def FortFuncs_init_calc_strfactors(reflex, atm, grp, mode=None, arg5=None, lun=None):
    return _pycrysfml.FortFuncs_init_calc_strfactors(reflex, atm, grp, mode, arg5, lun)
FortFuncs_init_calc_strfactors = _pycrysfml.FortFuncs_init_calc_strfactors

def FortFuncs_init_structure_factors(reflex, atm, grp, mode=None, arg5=None, lun=None):
    return _pycrysfml.FortFuncs_init_structure_factors(reflex, atm, grp, mode, arg5, lun)
FortFuncs_init_structure_factors = _pycrysfml.FortFuncs_init_structure_factors

def FortFuncs_structure_factors(atm, grp, reflex, mode=None, arg5=None):
    return _pycrysfml.FortFuncs_structure_factors(atm, grp, reflex, mode, arg5)
FortFuncs_structure_factors = _pycrysfml.FortFuncs_structure_factors

def FortFuncs_write_structure_factors(lun, reflex, mode=None):
    return _pycrysfml.FortFuncs_write_structure_factors(lun, reflex, mode)
FortFuncs_write_structure_factors = _pycrysfml.FortFuncs_write_structure_factors

def FortFuncs_cubic_harm_ang(l, m, theta, phi):
    return _pycrysfml.FortFuncs_cubic_harm_ang(l, m, theta, phi)
FortFuncs_cubic_harm_ang = _pycrysfml.FortFuncs_cubic_harm_ang

def FortFuncs_cubic_harm_ucvec(l, m, u):
    return _pycrysfml.FortFuncs_cubic_harm_ucvec(l, m, u)
FortFuncs_cubic_harm_ucvec = _pycrysfml.FortFuncs_cubic_harm_ucvec

def FortFuncs_int_slater_bessel(n, l, z, s):
    return _pycrysfml.FortFuncs_int_slater_bessel(n, l, z, s)
FortFuncs_int_slater_bessel = _pycrysfml.FortFuncs_int_slater_bessel

def FortFuncs_real_spher_harm_ang(l, m, p, theta, phi):
    return _pycrysfml.FortFuncs_real_spher_harm_ang(l, m, p, theta, phi)
FortFuncs_real_spher_harm_ang = _pycrysfml.FortFuncs_real_spher_harm_ang

def FortFuncs_real_spher_harm_ucvec(l, m, p, u):
    return _pycrysfml.FortFuncs_real_spher_harm_ucvec(l, m, p, u)
FortFuncs_real_spher_harm_ucvec = _pycrysfml.FortFuncs_real_spher_harm_ucvec

def FortFuncs_real_spher_harmcharge_ucvec(l, m, p, u):
    return _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec(l, m, p, u)
FortFuncs_real_spher_harmcharge_ucvec = _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec

def FortFuncs_init_err_spher():
    return _pycrysfml.FortFuncs_init_err_spher()
FortFuncs_init_err_spher = _pycrysfml.FortFuncs_init_err_spher

def FortFuncs_pikout_lj_cubic(group, lj, ncoef, lun=None):
    return _pycrysfml.FortFuncs_pikout_lj_cubic(group, lj, ncoef, lun)
FortFuncs_pikout_lj_cubic = _pycrysfml.FortFuncs_pikout_lj_cubic

def FortFuncs_get_generators(spg, gener):
    return _pycrysfml.FortFuncs_get_generators(spg, gener)
FortFuncs_get_generators = _pycrysfml.FortFuncs_get_generators

def FortFuncs_remove_spgr_info():
    return _pycrysfml.FortFuncs_remove_spgr_info()
FortFuncs_remove_spgr_info = _pycrysfml.FortFuncs_remove_spgr_info

def FortFuncs_remove_system_equiv():
    return _pycrysfml.FortFuncs_remove_system_equiv()
FortFuncs_remove_system_equiv = _pycrysfml.FortFuncs_remove_system_equiv

def FortFuncs_remove_wyckoff_info():
    return _pycrysfml.FortFuncs_remove_wyckoff_info()
FortFuncs_remove_wyckoff_info = _pycrysfml.FortFuncs_remove_wyckoff_info

def FortFuncs_set_spgr_info():
    return _pycrysfml.FortFuncs_set_spgr_info()
FortFuncs_set_spgr_info = _pycrysfml.FortFuncs_set_spgr_info

def FortFuncs_set_system_equiv():
    return _pycrysfml.FortFuncs_set_system_equiv()
FortFuncs_set_system_equiv = _pycrysfml.FortFuncs_set_system_equiv

def FortFuncs_set_wyckoff_info():
    return _pycrysfml.FortFuncs_set_wyckoff_info()
FortFuncs_set_wyckoff_info = _pycrysfml.FortFuncs_set_wyckoff_info

def FortFuncs_axes_rotation(r):
    return _pycrysfml.FortFuncs_axes_rotation(r)
FortFuncs_axes_rotation = _pycrysfml.FortFuncs_axes_rotation

def FortFuncs_get_laue_num(laueclass):
    return _pycrysfml.FortFuncs_get_laue_num(laueclass)
FortFuncs_get_laue_num = _pycrysfml.FortFuncs_get_laue_num

def FortFuncs_get_multip_pos(x, spg):
    return _pycrysfml.FortFuncs_get_multip_pos(x, spg)
FortFuncs_get_multip_pos = _pycrysfml.FortFuncs_get_multip_pos

def FortFuncs_get_occ_site(pto, spg):
    return _pycrysfml.FortFuncs_get_occ_site(pto, spg)
FortFuncs_get_occ_site = _pycrysfml.FortFuncs_get_occ_site

def FortFuncs_get_pointgroup_num(pgname):
    return _pycrysfml.FortFuncs_get_pointgroup_num(pgname)
FortFuncs_get_pointgroup_num = _pycrysfml.FortFuncs_get_pointgroup_num

def FortFuncs_lattice_trans(v, lat):
    return _pycrysfml.FortFuncs_lattice_trans(v, lat)
FortFuncs_lattice_trans = _pycrysfml.FortFuncs_lattice_trans

def FortFuncs_spgr_equal(spacegroup1, spacegroup2):
    return _pycrysfml.FortFuncs_spgr_equal(spacegroup1, spacegroup2)
FortFuncs_spgr_equal = _pycrysfml.FortFuncs_spgr_equal

def FortFuncs_allocate_lattice_centring(latt, n, tinv=None):
    return _pycrysfml.FortFuncs_allocate_lattice_centring(latt, n, tinv)
FortFuncs_allocate_lattice_centring = _pycrysfml.FortFuncs_allocate_lattice_centring

def FortFuncs_check_generator(gen, ok, symbol=None):
    return _pycrysfml.FortFuncs_check_generator(gen, ok, symbol)
FortFuncs_check_generator = _pycrysfml.FortFuncs_check_generator

def FortFuncs_decodmatmag(sim, xyzstring):
    return _pycrysfml.FortFuncs_decodmatmag(sim, xyzstring)
FortFuncs_decodmatmag = _pycrysfml.FortFuncs_decodmatmag

def FortFuncs_get_laue_str(ilaue, str):
    return _pycrysfml.FortFuncs_get_laue_str(ilaue, str)
FortFuncs_get_laue_str = _pycrysfml.FortFuncs_get_laue_str

def FortFuncs_get_pointgroup_str(ipg, str):
    return _pycrysfml.FortFuncs_get_pointgroup_str(ipg, str)
FortFuncs_get_pointgroup_str = _pycrysfml.FortFuncs_get_pointgroup_str

def FortFuncs_get_seitz_symbol(iop, itim, tr, seitz_symb):
    return _pycrysfml.FortFuncs_get_seitz_symbol(iop, itim, tr, seitz_symb)
FortFuncs_get_seitz_symbol = _pycrysfml.FortFuncs_get_seitz_symbol

def FortFuncs_get_setting_info(mat, orig, setting, matkind=None):
    return _pycrysfml.FortFuncs_get_setting_info(mat, orig, setting, matkind)
FortFuncs_get_setting_info = _pycrysfml.FortFuncs_get_setting_info

def FortFuncs_get_shubnikov_operator_symbol(mat, rot, tr, shop_symb, mcif=None, invt=None):
    return _pycrysfml.FortFuncs_get_shubnikov_operator_symbol(mat, rot, tr, shop_symb, mcif, invt)
FortFuncs_get_shubnikov_operator_symbol = _pycrysfml.FortFuncs_get_shubnikov_operator_symbol

def FortFuncs_get_string_resolv(t, x, ix, symb):
    return _pycrysfml.FortFuncs_get_string_resolv(t, x, ix, symb)
FortFuncs_get_string_resolv = _pycrysfml.FortFuncs_get_string_resolv

def FortFuncs_get_symel(sim, xyzstring):
    return _pycrysfml.FortFuncs_get_symel(sim, xyzstring)
FortFuncs_get_symel = _pycrysfml.FortFuncs_get_symel

def FortFuncs_get_symkov(sim, xyzstring):
    return _pycrysfml.FortFuncs_get_symkov(sim, xyzstring)
FortFuncs_get_symkov = _pycrysfml.FortFuncs_get_symkov

def FortFuncs_get_trasfm_symbol(mat, tr, abc_symb, oposite=None):
    return _pycrysfml.FortFuncs_get_trasfm_symbol(mat, tr, abc_symb, oposite)
FortFuncs_get_trasfm_symbol = _pycrysfml.FortFuncs_get_trasfm_symbol

def FortFuncs_get_transl_symbol(tr, transl_symb):
    return _pycrysfml.FortFuncs_get_transl_symbol(tr, transl_symb)
FortFuncs_get_transl_symbol = _pycrysfml.FortFuncs_get_transl_symbol

def FortFuncs_init_err_symm():
    return _pycrysfml.FortFuncs_init_err_symm()
FortFuncs_init_err_symm = _pycrysfml.FortFuncs_init_err_symm

def FortFuncs_inverse_symm(r, t, s, u):
    return _pycrysfml.FortFuncs_inverse_symm(r, t, s, u)
FortFuncs_inverse_symm = _pycrysfml.FortFuncs_inverse_symm

def FortFuncs_latsym(symb, numl=None):
    return _pycrysfml.FortFuncs_latsym(symb, numl)
FortFuncs_latsym = _pycrysfml.FortFuncs_latsym

def FortFuncs_read_bin_spacegroup(spg, lun, ok):
    return _pycrysfml.FortFuncs_read_bin_spacegroup(spg, lun, ok)
FortFuncs_read_bin_spacegroup = _pycrysfml.FortFuncs_read_bin_spacegroup

def FortFuncs_read_msymm(info, sim, p_mag, ctrl=None):
    return _pycrysfml.FortFuncs_read_msymm(info, sim, p_mag, ctrl)
FortFuncs_read_msymm = _pycrysfml.FortFuncs_read_msymm

def FortFuncs_read_symtrans_code(code, n, tr):
    return _pycrysfml.FortFuncs_read_symtrans_code(code, n, tr)
FortFuncs_read_symtrans_code = _pycrysfml.FortFuncs_read_symtrans_code

def FortFuncs_read_xsym(info, istart, sim, tt=None, ctrl=None):
    return _pycrysfml.FortFuncs_read_xsym(info, istart, sim, tt, ctrl)
FortFuncs_read_xsym = _pycrysfml.FortFuncs_read_xsym

def FortFuncs_searchop(sim, i1, i2, isl):
    return _pycrysfml.FortFuncs_searchop(sim, i1, i2, isl)
FortFuncs_searchop = _pycrysfml.FortFuncs_searchop

def FortFuncs_set_spacegroup(spacegen, spacegroup, ngen=None, mode=None, force_hall=None):
    return _pycrysfml.FortFuncs_set_spacegroup(spacegen, spacegroup, ngen, mode, force_hall)
FortFuncs_set_spacegroup = _pycrysfml.FortFuncs_set_spacegroup

def FortFuncs_similar_transf_sg(mat, orig, spg, spgn, matkind=None, fix_lat=None):
    return _pycrysfml.FortFuncs_similar_transf_sg(mat, orig, spg, spgn, matkind, fix_lat)
FortFuncs_similar_transf_sg = _pycrysfml.FortFuncs_similar_transf_sg

def FortFuncs_sym_prod_st(syma, symb, symab, modlat=None):
    return _pycrysfml.FortFuncs_sym_prod_st(syma, symb, symab, modlat)
FortFuncs_sym_prod_st = _pycrysfml.FortFuncs_sym_prod_st

def FortFuncs_write_bin_spacegroup(spg, lun):
    return _pycrysfml.FortFuncs_write_bin_spacegroup(spg, lun)
FortFuncs_write_bin_spacegroup = _pycrysfml.FortFuncs_write_bin_spacegroup

def FortFuncs_write_magnetic_space_group(sg, iunit=None, full=None):
    return _pycrysfml.FortFuncs_write_magnetic_space_group(sg, iunit, full)
FortFuncs_write_magnetic_space_group = _pycrysfml.FortFuncs_write_magnetic_space_group

def FortFuncs_write_spacegroup(spacegroup, iunit=None, full=None):
    return _pycrysfml.FortFuncs_write_spacegroup(spacegroup, iunit, full)
FortFuncs_write_spacegroup = _pycrysfml.FortFuncs_write_spacegroup

def FortFuncs_write_sym(lun, indx, sim, tt, p_mag, mag):
    return _pycrysfml.FortFuncs_write_sym(lun, indx, sim, tt, p_mag, mag)
FortFuncs_write_sym = _pycrysfml.FortFuncs_write_sym

def FortFuncs_write_symtrans_code(n, tr, code):
    return _pycrysfml.FortFuncs_write_symtrans_code(n, tr, code)
FortFuncs_write_symtrans_code = _pycrysfml.FortFuncs_write_symtrans_code

def FortFuncs_write_wyckoff(wyckoff, spg, lun=None, sorting=None):
    return _pycrysfml.FortFuncs_write_wyckoff(wyckoff, spg, lun, sorting)
FortFuncs_write_wyckoff = _pycrysfml.FortFuncs_write_wyckoff

def FortFuncs_copy_ns_spg_to_spg(spgn, spg):
    return _pycrysfml.FortFuncs_copy_ns_spg_to_spg(spgn, spg)
FortFuncs_copy_ns_spg_to_spg = _pycrysfml.FortFuncs_copy_ns_spg_to_spg

def FortFuncs_alloc_mhlist_array(list):
    return _pycrysfml.FortFuncs_alloc_mhlist_array(list)
FortFuncs_alloc_mhlist_array = _pycrysfml.FortFuncs_alloc_mhlist_array

def FortFuncs_alloc_refllist_array(list):
    return _pycrysfml.FortFuncs_alloc_refllist_array(list)
FortFuncs_alloc_refllist_array = _pycrysfml.FortFuncs_alloc_refllist_array

def FortFuncs_reflct_array_ctor(array):
    return _pycrysfml.FortFuncs_reflct_array_ctor(array)
FortFuncs_reflct_array_ctor = _pycrysfml.FortFuncs_reflct_array_ctor

def FortFuncs_reflct_append(array, rflctn):
    return _pycrysfml.FortFuncs_reflct_append(array, rflctn)
FortFuncs_reflct_append = _pycrysfml.FortFuncs_reflct_append

def FortFuncs_readxtal_structure_file(filenam, cell, spg, a, mode=None, iphase=None, job_info=None, file_list=None, cframe=None):
    return _pycrysfml.FortFuncs_readxtal_structure_file(filenam, cell, spg, a, mode, iphase, job_info, file_list, cframe)
FortFuncs_readxtal_structure_file = _pycrysfml.FortFuncs_readxtal_structure_file

def FortFuncs_hkls_r(h, crystalcell):
    return _pycrysfml.FortFuncs_hkls_r(h, crystalcell)
FortFuncs_hkls_r = _pycrysfml.FortFuncs_hkls_r

def FortFuncs_hklgen_sxtal_reflection(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord=None, hlim=None):
    return _pycrysfml.FortFuncs_hklgen_sxtal_reflection(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord, hlim)
FortFuncs_hklgen_sxtal_reflection = _pycrysfml.FortFuncs_hklgen_sxtal_reflection

def FortFuncs_hklgen_sxtal_list(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord=None, hlim=None):
    return _pycrysfml.FortFuncs_hklgen_sxtal_list(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord, hlim)
FortFuncs_hklgen_sxtal_list = _pycrysfml.FortFuncs_hklgen_sxtal_list

def FortFuncs_hkluni_reflection(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order=None):
    return _pycrysfml.FortFuncs_hkluni_reflection(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order)
FortFuncs_hkluni_reflection = _pycrysfml.FortFuncs_hkluni_reflection

def FortFuncs_hkluni_refllist(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order=None):
    return _pycrysfml.FortFuncs_hkluni_refllist(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order)
FortFuncs_hkluni_refllist = _pycrysfml.FortFuncs_hkluni_refllist

def FortFuncs_read_mag_cfl_file(file_cfl, n_ini, n_end, mgp, am, sgo=None, mag_dom=None, cell=None):
    return _pycrysfml.FortFuncs_read_mag_cfl_file(file_cfl, n_ini, n_end, mgp, am, sgo, mag_dom, cell)
FortFuncs_read_mag_cfl_file = _pycrysfml.FortFuncs_read_mag_cfl_file

def FortFuncs_read_mag_mcif_file(file_mcif, mcell, mgp, am):
    return _pycrysfml.FortFuncs_read_mag_mcif_file(file_mcif, mcell, mgp, am)
FortFuncs_read_mag_mcif_file = _pycrysfml.FortFuncs_read_mag_mcif_file

def FortFuncs_calcgaussian(x, h):
    return _pycrysfml.FortFuncs_calcgaussian(x, h)
FortFuncs_calcgaussian = _pycrysfml.FortFuncs_calcgaussian

def FortFuncs_calchat(x, h):
    return _pycrysfml.FortFuncs_calchat(x, h)
FortFuncs_calchat = _pycrysfml.FortFuncs_calchat

def FortFuncs_calclorentzian(x, h):
    return _pycrysfml.FortFuncs_calclorentzian(x, h)
FortFuncs_calclorentzian = _pycrysfml.FortFuncs_calclorentzian

def FortFuncs_calcpseudovoigt(x, h, eta):
    return _pycrysfml.FortFuncs_calcpseudovoigt(x, h, eta)
FortFuncs_calcpseudovoigt = _pycrysfml.FortFuncs_calcpseudovoigt

def FortFuncs_gausspeak(x, h, output):
    return _pycrysfml.FortFuncs_gausspeak(x, h, output)
FortFuncs_gausspeak = _pycrysfml.FortFuncs_gausspeak

def FortFuncs_read_ill_data(filename, dif_pat, mode=None):
    return _pycrysfml.FortFuncs_read_ill_data(filename, dif_pat, mode)
FortFuncs_read_ill_data = _pycrysfml.FortFuncs_read_ill_data

def FortFuncs_printbasis(matm):
    return _pycrysfml.FortFuncs_printbasis(matm)
FortFuncs_printbasis = _pycrysfml.FortFuncs_printbasis

def FortFuncs_atom_type_ctor(atom_type_param, locc_param, lvarf_param, utype_param, mbiso_param, occ_param, charge_param, sfacsymb_param, lab_param, mvarf_param, moment_param, lu_param, mocc_param, active_param, mult_param, x_std_param, u_std_param, nvar_param, wyck_param, biso_std_param, lbiso_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, mu_param, lx_param, chemsymb_param, ind_param, thtype_param, atminfo_param, ueq_param, mx_param):
    return _pycrysfml.FortFuncs_atom_type_ctor(atom_type_param, locc_param, lvarf_param, utype_param, mbiso_param, occ_param, charge_param, sfacsymb_param, lab_param, mvarf_param, moment_param, lu_param, mocc_param, active_param, mult_param, x_std_param, u_std_param, nvar_param, wyck_param, biso_std_param, lbiso_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, mu_param, lx_param, chemsymb_param, ind_param, thtype_param, atminfo_param, ueq_param, mx_param)
FortFuncs_atom_type_ctor = _pycrysfml.FortFuncs_atom_type_ctor

def FortFuncs_matom_type_ctor(matom_type_param, mmphas_param, locc_param, ski_std_param, lvarf_param, utype_param, mbiso_param, occ_param, lbas_param, charge_param, sfacsymb_param, imat_param, lmphas_param, mphas_param, spher_ski_param, skr_param, lskr_param, lab_param, moment_param, lu_param, mocc_param, active_param, ski_param, mult_param, spher_skr_std_param, x_std_param, u_std_param, lski_param, nvar_param, wyck_param, biso_std_param, lbiso_param, mphas_std_param, mvarf_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, nvk_param, mbas_param, spher_ski_std_param, spher_skr_param, mski_param, skr_std_param, mu_param, mskr_param, lx_param, chemsymb_param, cbas_param, ind_param, cbas_std_param, thtype_param, atminfo_param, ueq_param, mx_param):
    return _pycrysfml.FortFuncs_matom_type_ctor(matom_type_param, mmphas_param, locc_param, ski_std_param, lvarf_param, utype_param, mbiso_param, occ_param, lbas_param, charge_param, sfacsymb_param, imat_param, lmphas_param, mphas_param, spher_ski_param, skr_param, lskr_param, lab_param, moment_param, lu_param, mocc_param, active_param, ski_param, mult_param, spher_skr_std_param, x_std_param, u_std_param, lski_param, nvar_param, wyck_param, biso_std_param, lbiso_param, mphas_std_param, mvarf_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, nvk_param, mbas_param, spher_ski_std_param, spher_skr_param, mski_param, skr_std_param, mu_param, mskr_param, lx_param, chemsymb_param, cbas_param, ind_param, cbas_std_param, thtype_param, atminfo_param, ueq_param, mx_param)
FortFuncs_matom_type_ctor = _pycrysfml.FortFuncs_matom_type_ctor

def FortFuncs_crystal_cell_type_ctor(crystal_cell_type_param, lang_param, rcellvol_param, cell_std_param, ang_param, bl_minv_param, gr_param, cr_orth_cel_param, bl_m_param, orth_cr_cel_param, carttype_param, rang_param, rcell_param, cell_param, gd_param, cellvol_param, ang_std_param, lcell_param):
    return _pycrysfml.FortFuncs_crystal_cell_type_ctor(crystal_cell_type_param, lang_param, rcellvol_param, cell_std_param, ang_param, bl_minv_param, gr_param, cr_orth_cel_param, bl_m_param, orth_cr_cel_param, carttype_param, rang_param, rcell_param, cell_param, gd_param, cellvol_param, ang_std_param, lcell_param)
FortFuncs_crystal_cell_type_ctor = _pycrysfml.FortFuncs_crystal_cell_type_ctor

def FortFuncs_get_twofold_axes_a(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_a(obj_var, output_value)
FortFuncs_get_twofold_axes_a = _pycrysfml.FortFuncs_get_twofold_axes_a

def FortFuncs_set_twofold_axes_a(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_a(obj_var, new_value)
FortFuncs_set_twofold_axes_a = _pycrysfml.FortFuncs_set_twofold_axes_a

def FortFuncs_get_twofold_axes_c(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_c(obj_var, output_value)
FortFuncs_get_twofold_axes_c = _pycrysfml.FortFuncs_get_twofold_axes_c

def FortFuncs_set_twofold_axes_c(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_c(obj_var, new_value)
FortFuncs_set_twofold_axes_c = _pycrysfml.FortFuncs_set_twofold_axes_c

def FortFuncs_get_twofold_axes_b(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_b(obj_var, output_value)
FortFuncs_get_twofold_axes_b = _pycrysfml.FortFuncs_get_twofold_axes_b

def FortFuncs_set_twofold_axes_b(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_b(obj_var, new_value)
FortFuncs_set_twofold_axes_b = _pycrysfml.FortFuncs_set_twofold_axes_b

def FortFuncs_get_twofold_axes_maxes(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_maxes(obj_var, output_value)
FortFuncs_get_twofold_axes_maxes = _pycrysfml.FortFuncs_get_twofold_axes_maxes

def FortFuncs_set_twofold_axes_maxes(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_maxes(obj_var, new_value)
FortFuncs_set_twofold_axes_maxes = _pycrysfml.FortFuncs_set_twofold_axes_maxes

def FortFuncs_get_twofold_axes_ntwo(obj_var):
    return _pycrysfml.FortFuncs_get_twofold_axes_ntwo(obj_var)
FortFuncs_get_twofold_axes_ntwo = _pycrysfml.FortFuncs_get_twofold_axes_ntwo

def FortFuncs_set_twofold_axes_ntwo(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_ntwo(obj_var, new_value)
FortFuncs_set_twofold_axes_ntwo = _pycrysfml.FortFuncs_set_twofold_axes_ntwo

def FortFuncs_get_twofold_axes_cross(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_cross(obj_var, output_value)
FortFuncs_get_twofold_axes_cross = _pycrysfml.FortFuncs_get_twofold_axes_cross

def FortFuncs_set_twofold_axes_cross(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_cross(obj_var, new_value)
FortFuncs_set_twofold_axes_cross = _pycrysfml.FortFuncs_set_twofold_axes_cross

def FortFuncs_get_twofold_axes_tol(obj_var):
    return _pycrysfml.FortFuncs_get_twofold_axes_tol(obj_var)
FortFuncs_get_twofold_axes_tol = _pycrysfml.FortFuncs_get_twofold_axes_tol

def FortFuncs_set_twofold_axes_tol(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_tol(obj_var, new_value)
FortFuncs_set_twofold_axes_tol = _pycrysfml.FortFuncs_set_twofold_axes_tol

def FortFuncs_get_twofold_axes_rtwofold(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_rtwofold(obj_var, output_value)
FortFuncs_get_twofold_axes_rtwofold = _pycrysfml.FortFuncs_get_twofold_axes_rtwofold

def FortFuncs_set_twofold_axes_rtwofold(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_rtwofold(obj_var, new_value)
FortFuncs_set_twofold_axes_rtwofold = _pycrysfml.FortFuncs_set_twofold_axes_rtwofold

def FortFuncs_get_twofold_axes_caxes(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_caxes(obj_var, output_value)
FortFuncs_get_twofold_axes_caxes = _pycrysfml.FortFuncs_get_twofold_axes_caxes

def FortFuncs_set_twofold_axes_caxes(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_caxes(obj_var, new_value)
FortFuncs_set_twofold_axes_caxes = _pycrysfml.FortFuncs_set_twofold_axes_caxes

def FortFuncs_get_twofold_axes_dot(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_dot(obj_var, output_value)
FortFuncs_get_twofold_axes_dot = _pycrysfml.FortFuncs_get_twofold_axes_dot

def FortFuncs_set_twofold_axes_dot(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_dot(obj_var, new_value)
FortFuncs_set_twofold_axes_dot = _pycrysfml.FortFuncs_set_twofold_axes_dot

def FortFuncs_get_twofold_axes_dtwofold(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_dtwofold(obj_var, output_value)
FortFuncs_get_twofold_axes_dtwofold = _pycrysfml.FortFuncs_get_twofold_axes_dtwofold

def FortFuncs_set_twofold_axes_dtwofold(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_dtwofold(obj_var, new_value)
FortFuncs_set_twofold_axes_dtwofold = _pycrysfml.FortFuncs_set_twofold_axes_dtwofold

def FortFuncs_twofold_axes_type_ctor(twofold_axes_type_param, a_param, c_param, b_param, maxes_param, ntwo_param, cross_param, tol_param, rtwofold_param, caxes_param, dot_param, dtwofold_param):
    return _pycrysfml.FortFuncs_twofold_axes_type_ctor(twofold_axes_type_param, a_param, c_param, b_param, maxes_param, ntwo_param, cross_param, tol_param, rtwofold_param, caxes_param, dot_param, dtwofold_param)
FortFuncs_twofold_axes_type_ctor = _pycrysfml.FortFuncs_twofold_axes_type_ctor

def FortFuncs_zone_axis_type_ctor(zone_axis_type_param, nlayer_param, rx_param, ry_param, uvw_param):
    return _pycrysfml.FortFuncs_zone_axis_type_ctor(zone_axis_type_param, nlayer_param, rx_param, ry_param, uvw_param)
FortFuncs_zone_axis_type_ctor = _pycrysfml.FortFuncs_zone_axis_type_ctor

def FortFuncs_interval_type_ctor(interval_type_param, maxb_param, mina_param):
    return _pycrysfml.FortFuncs_interval_type_ctor(interval_type_param, maxb_param, mina_param)
FortFuncs_interval_type_ctor = _pycrysfml.FortFuncs_interval_type_ctor

def FortFuncs_msym_oper_type_ctor(msym_oper_type_param, phas_param, rot_param):
    return _pycrysfml.FortFuncs_msym_oper_type_ctor(msym_oper_type_param, phas_param, rot_param)
FortFuncs_msym_oper_type_ctor = _pycrysfml.FortFuncs_msym_oper_type_ctor

def FortFuncs_magnetic_group_type_ctor(magnetic_group_type_param, tinv_param, shubnikov_param, spg_param):
    return _pycrysfml.FortFuncs_magnetic_group_type_ctor(magnetic_group_type_param, tinv_param, shubnikov_param, spg_param)
FortFuncs_magnetic_group_type_ctor = _pycrysfml.FortFuncs_magnetic_group_type_ctor

def FortFuncs_reflect_type_ctor(reflect_type_param, h_param, s_param, mult_param):
    return _pycrysfml.FortFuncs_reflect_type_ctor(reflect_type_param, h_param, s_param, mult_param)
FortFuncs_reflect_type_ctor = _pycrysfml.FortFuncs_reflect_type_ctor

def FortFuncs_reflection_type_ctor(reflection_type_param, a_param, aa_param, b_param, bb_param, h_param, sfo_param, s_param, fc_param, w_param, phase_param, mult_param, fo_param):
    return _pycrysfml.FortFuncs_reflection_type_ctor(reflection_type_param, a_param, aa_param, b_param, bb_param, h_param, sfo_param, s_param, fc_param, w_param, phase_param, mult_param, fo_param)
FortFuncs_reflection_type_ctor = _pycrysfml.FortFuncs_reflection_type_ctor

def FortFuncs_ns_sym_oper_type_ctor(ns_sym_oper_type_param, tr_param, rot_param):
    return _pycrysfml.FortFuncs_ns_sym_oper_type_ctor(ns_sym_oper_type_param, tr_param, rot_param)
FortFuncs_ns_sym_oper_type_ctor = _pycrysfml.FortFuncs_ns_sym_oper_type_ctor

def FortFuncs_sym_oper_type_ctor(sym_oper_type_param, tr_param, rot_param):
    return _pycrysfml.FortFuncs_sym_oper_type_ctor(sym_oper_type_param, tr_param, rot_param)
FortFuncs_sym_oper_type_ctor = _pycrysfml.FortFuncs_sym_oper_type_ctor

def FortFuncs_get_command(command=None, length=None, status=None):
    return _pycrysfml.FortFuncs_get_command(command, length, status)
FortFuncs_get_command = _pycrysfml.FortFuncs_get_command

def FortFuncs_get_command_argument(number, value=None, length=None, status=None):
    return _pycrysfml.FortFuncs_get_command_argument(number, value, length, status)
FortFuncs_get_command_argument = _pycrysfml.FortFuncs_get_command_argument

def FortFuncs_get_environment_variable(name, value=None, length=None, status=None, trim_name=None):
    return _pycrysfml.FortFuncs_get_environment_variable(name, value, length, status, trim_name)
FortFuncs_get_environment_variable = _pycrysfml.FortFuncs_get_environment_variable

class generic_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, generic_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, generic_numor_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_generic_numor_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_generic_numor_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.generic_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.generic_numor_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.generic_numor_type_data_ptr_get, _pycrysfml.generic_numor_type_data_ptr_set)
generic_numor_type_swigregister = _pycrysfml.generic_numor_type_swigregister
generic_numor_type_swigregister(generic_numor_type)

class group_k_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, group_k_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, group_k_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_group_k_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_group_k_type
    __del__ = lambda self: None

    def set_gk(self, spgk, ext=None):
        return _pycrysfml.group_k_type_set_gk(self, spgk, ext)
    __swig_setmethods__["data_ptr"] = _pycrysfml.group_k_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.group_k_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.group_k_type_data_ptr_get, _pycrysfml.group_k_type_data_ptr_set)
group_k_type_swigregister = _pycrysfml.group_k_type_swigregister
group_k_type_swigregister(group_k_type)

class ill_data_record_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ill_data_record_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ill_data_record_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_ill_data_record_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_ill_data_record_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.ill_data_record_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ill_data_record_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.ill_data_record_type_data_ptr_get, _pycrysfml.ill_data_record_type_data_ptr_set)
ill_data_record_type_swigregister = _pycrysfml.ill_data_record_type_swigregister
ill_data_record_type_swigregister(ill_data_record_type)

class interval_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interval_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interval_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_interval_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_interval_type
    __del__ = lambda self: None

    def get_interval_maxb(self):
        return _pycrysfml.interval_type_get_interval_maxb(self)

    def set_interval_maxb(self, new_value):
        return _pycrysfml.interval_type_set_interval_maxb(self, new_value)

    def get_interval_mina(self):
        return _pycrysfml.interval_type_get_interval_mina(self)

    def set_interval_mina(self, new_value):
        return _pycrysfml.interval_type_set_interval_mina(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.interval_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.interval_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.interval_type_data_ptr_get, _pycrysfml.interval_type_data_ptr_set)
interval_type_swigregister = _pycrysfml.interval_type_swigregister
interval_type_swigregister(interval_type)

class job_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, job_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, job_info_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_job_info_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_job_info_type
    __del__ = lambda self: None

    def get_job_info_title(self, output_value):
        return _pycrysfml.job_info_type_get_job_info_title(self, output_value)

    def set_job_info_title(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_title(self, new_value)

    def get_job_info_num_phases(self):
        return _pycrysfml.job_info_type_get_job_info_num_phases(self)

    def set_job_info_num_phases(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_num_phases(self, new_value)

    def get_job_info_num_patterns(self):
        return _pycrysfml.job_info_type_get_job_info_num_patterns(self)

    def set_job_info_num_patterns(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_num_patterns(self, new_value)

    def get_job_info_num_cmd(self):
        return _pycrysfml.job_info_type_get_job_info_num_cmd(self)

    def set_job_info_num_cmd(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_num_cmd(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.job_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.job_info_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.job_info_type_data_ptr_get, _pycrysfml.job_info_type_data_ptr_set)
job_info_type_swigregister = _pycrysfml.job_info_type_swigregister
job_info_type_swigregister(job_info_type)

class lattice_centring_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lattice_centring_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lattice_centring_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_lattice_centring_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_lattice_centring_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.lattice_centring_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.lattice_centring_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.lattice_centring_type_data_ptr_get, _pycrysfml.lattice_centring_type_data_ptr_set)
lattice_centring_type_swigregister = _pycrysfml.lattice_centring_type_swigregister
lattice_centring_type_swigregister(lattice_centring_type)

class maghd_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maghd_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maghd_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_maghd_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_maghd_list_type
    __del__ = lambda self: None

    def get_maghd_list_element(self, elem, ind):
        return _pycrysfml.maghd_list_type_get_maghd_list_element(self, elem, ind)

    def set_maghd_list_element(self, elem, ind):
        return _pycrysfml.maghd_list_type_set_maghd_list_element(self, elem, ind)

    def get_maghd_list_nref(self):
        return _pycrysfml.maghd_list_type_get_maghd_list_nref(self)

    def set_maghd_list_nref(self, new_value):
        return _pycrysfml.maghd_list_type_set_maghd_list_nref(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.maghd_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.maghd_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.maghd_list_type_data_ptr_get, _pycrysfml.maghd_list_type_data_ptr_set)
maghd_list_type_swigregister = _pycrysfml.maghd_list_type_swigregister
maghd_list_type_swigregister(maghd_list_type)

class maghd_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maghd_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maghd_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_maghd_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_maghd_type
    __del__ = lambda self: None

    def get_maghd_sqamiv(self):
        return _pycrysfml.maghd_type_get_maghd_sqamiv(self)

    def set_maghd_sqamiv(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_sqamiv(self, new_value)

    def get_maghd_num_k(self):
        return _pycrysfml.maghd_type_get_maghd_num_k(self)

    def set_maghd_num_k(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_num_k(self, new_value)

    def get_maghd_h(self, output_value):
        return _pycrysfml.maghd_type_get_maghd_h(self, output_value)

    def set_maghd_h(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_h(self, new_value)

    def get_maghd_sqmiv(self):
        return _pycrysfml.maghd_type_get_maghd_sqmiv(self)

    def set_maghd_sqmiv(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_sqmiv(self, new_value)

    def get_maghd_s(self):
        return _pycrysfml.maghd_type_get_maghd_s(self)

    def set_maghd_s(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_s(self, new_value)

    def get_maghd_signp(self):
        return _pycrysfml.maghd_type_get_maghd_signp(self)

    def set_maghd_signp(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_signp(self, new_value)

    def get_maghd_keqv_minus(self):
        return _pycrysfml.maghd_type_get_maghd_keqv_minus(self)

    def set_maghd_keqv_minus(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_keqv_minus(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.maghd_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.maghd_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.maghd_type_data_ptr_get, _pycrysfml.maghd_type_data_ptr_set)
maghd_type_swigregister = _pycrysfml.maghd_type_swigregister
maghd_type_swigregister(maghd_type)

class magh_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magh_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magh_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_magh_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_magh_list_type
    __del__ = lambda self: None

    def get_magh_list_element(self, elem, ind):
        return _pycrysfml.magh_list_type_get_magh_list_element(self, elem, ind)

    def set_magh_list_element(self, elem, ind):
        return _pycrysfml.magh_list_type_set_magh_list_element(self, elem, ind)

    def get_magh_list_nref(self):
        return _pycrysfml.magh_list_type_get_magh_list_nref(self)

    def set_magh_list_nref(self, new_value):
        return _pycrysfml.magh_list_type_set_magh_list_nref(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magh_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magh_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.magh_list_type_data_ptr_get, _pycrysfml.magh_list_type_data_ptr_set)
magh_list_type_swigregister = _pycrysfml.magh_list_type_swigregister
magh_list_type_swigregister(magh_list_type)

class magh_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magh_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magh_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_magh_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_magh_type
    __del__ = lambda self: None

    def get_msf(self, output):
        return _pycrysfml.magh_type_get_msf(self, output)

    def set_msf(self, value):
        return _pycrysfml.magh_type_set_msf(self, value)

    def get_miv(self, output):
        return _pycrysfml.magh_type_get_miv(self, output)

    def set_miv(self, value):
        return _pycrysfml.magh_type_set_miv(self, value)

    def get_magh_num_k(self):
        return _pycrysfml.magh_type_get_magh_num_k(self)

    def set_magh_num_k(self, new_value):
        return _pycrysfml.magh_type_set_magh_num_k(self, new_value)

    def get_magh_h(self, output_value):
        return _pycrysfml.magh_type_get_magh_h(self, output_value)

    def set_magh_h(self, new_value):
        return _pycrysfml.magh_type_set_magh_h(self, new_value)

    def get_magh_sqmiv(self):
        return _pycrysfml.magh_type_get_magh_sqmiv(self)

    def set_magh_sqmiv(self, new_value):
        return _pycrysfml.magh_type_set_magh_sqmiv(self, new_value)

    def get_magh_s(self):
        return _pycrysfml.magh_type_get_magh_s(self)

    def set_magh_s(self, new_value):
        return _pycrysfml.magh_type_set_magh_s(self, new_value)

    def get_magh_signp(self):
        return _pycrysfml.magh_type_get_magh_signp(self)

    def set_magh_signp(self, new_value):
        return _pycrysfml.magh_type_set_magh_signp(self, new_value)

    def get_magh_keqv_minus(self):
        return _pycrysfml.magh_type_get_magh_keqv_minus(self)

    def set_magh_keqv_minus(self, new_value):
        return _pycrysfml.magh_type_set_magh_keqv_minus(self, new_value)

    def get_magh_mult(self):
        return _pycrysfml.magh_type_get_magh_mult(self)

    def set_magh_mult(self, new_value):
        return _pycrysfml.magh_type_set_magh_mult(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magh_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magh_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.magh_type_data_ptr_get, _pycrysfml.magh_type_data_ptr_set)
magh_type_swigregister = _pycrysfml.magh_type_swigregister
magh_type_swigregister(magh_type)

class magnetic_domain_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_domain_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_domain_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_magnetic_domain_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_domain_type
    __del__ = lambda self: None

    def get_magnetic_domain_chir(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_chir(self)

    def set_magnetic_domain_chir(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_chir(self, new_value)

    def get_magnetic_domain_pop_std(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_pop_std(self, output_value)

    def set_magnetic_domain_pop_std(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_pop_std(self, new_value)

    def get_magnetic_domain_mpop(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_mpop(self, output_value)

    def set_magnetic_domain_mpop(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_mpop(self, new_value)

    def get_magnetic_domain_nd(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_nd(self)

    def set_magnetic_domain_nd(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_nd(self, new_value)

    def get_magnetic_domain_lpop(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_lpop(self, output_value)

    def set_magnetic_domain_lpop(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_lpop(self, new_value)

    def get_magnetic_domain_pop(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_pop(self, output_value)

    def set_magnetic_domain_pop(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_pop(self, new_value)

    def get_magnetic_domain_twin(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_twin(self)

    def set_magnetic_domain_twin(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_twin(self, new_value)

    def get_magnetic_domain_dmat(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_dmat(self, output_value)

    def set_magnetic_domain_dmat(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_dmat(self, new_value)

    def get_magnetic_domain_dt(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_dt(self, output_value)

    def set_magnetic_domain_dt(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_dt(self, new_value)

    def get_magnetic_domain_trans(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_trans(self)

    def set_magnetic_domain_trans(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_trans(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_domain_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_domain_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.magnetic_domain_type_data_ptr_get, _pycrysfml.magnetic_domain_type_data_ptr_set)
magnetic_domain_type_swigregister = _pycrysfml.magnetic_domain_type_swigregister
magnetic_domain_type_swigregister(magnetic_domain_type)

class magnetic_form_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_form_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_form_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_magnetic_form_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_form_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_form_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_form_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.magnetic_form_type_data_ptr_get, _pycrysfml.magnetic_form_type_data_ptr_set)
magnetic_form_type_swigregister = _pycrysfml.magnetic_form_type_swigregister
magnetic_form_type_swigregister(magnetic_form_type)

class magnetic_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_group_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_magnetic_group_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_group_type
    __del__ = lambda self: None

    def get_magnetic_group_tinv(self, output_value):
        return _pycrysfml.magnetic_group_type_get_magnetic_group_tinv(self, output_value)

    def set_magnetic_group_tinv(self, new_value):
        return _pycrysfml.magnetic_group_type_set_magnetic_group_tinv(self, new_value)

    def get_magnetic_group_shubnikov(self, output_value):
        return _pycrysfml.magnetic_group_type_get_magnetic_group_shubnikov(self, output_value)

    def set_magnetic_group_shubnikov(self, new_value):
        return _pycrysfml.magnetic_group_type_set_magnetic_group_shubnikov(self, new_value)

    def get_magnetic_group_spg(self, output_value):
        return _pycrysfml.magnetic_group_type_get_magnetic_group_spg(self, output_value)

    def set_magnetic_group_spg(self, new_value):
        return _pycrysfml.magnetic_group_type_set_magnetic_group_spg(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_group_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.magnetic_group_type_data_ptr_get, _pycrysfml.magnetic_group_type_data_ptr_set)
magnetic_group_type_swigregister = _pycrysfml.magnetic_group_type_swigregister
magnetic_group_type_swigregister(magnetic_group_type)

class magnetic_space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_space_group_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_magnetic_space_group_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_space_group_type
    __del__ = lambda self: None

    def get_magnetic_space_group_m_constr(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_m_constr(self)

    def set_magnetic_space_group_m_constr(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_m_constr(self, new_value)

    def get_magnetic_space_group_centre_coord(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centre_coord(self, output_value)

    def set_magnetic_space_group_centre_coord(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centre_coord(self, new_value)

    def get_magnetic_space_group_n_wyck(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_wyck(self)

    def set_magnetic_space_group_n_wyck(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_wyck(self, new_value)

    def get_magnetic_space_group_bns_symbol(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_bns_symbol(self, output_value)

    def set_magnetic_space_group_bns_symbol(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_bns_symbol(self, new_value)

    def get_magnetic_space_group_bns_number(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_bns_number(self, output_value)

    def set_magnetic_space_group_bns_number(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_bns_number(self, new_value)

    def get_magnetic_space_group_sh_number(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_sh_number(self)

    def set_magnetic_space_group_sh_number(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_sh_number(self, new_value)

    def get_magnetic_space_group_crystalsys(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_crystalsys(self, output_value)

    def set_magnetic_space_group_crystalsys(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_crystalsys(self, new_value)

    def get_magnetic_space_group_m_cell(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_m_cell(self)

    def set_magnetic_space_group_m_cell(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_m_cell(self, new_value)

    def get_magnetic_space_group_num_lat(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_lat(self)

    def set_magnetic_space_group_num_lat(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_lat(self, new_value)

    def get_magnetic_space_group_num_alat(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_alat(self)

    def set_magnetic_space_group_num_alat(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_alat(self, new_value)

    def get_magnetic_space_group_centred(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centred(self)

    def set_magnetic_space_group_centred(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centred(self, new_value)

    def get_magnetic_space_group_spg_lat(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_spg_lat(self, output_value)

    def set_magnetic_space_group_spg_lat(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_spg_lat(self, new_value)

    def get_magnetic_space_group_parent_num(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_parent_num(self)

    def set_magnetic_space_group_parent_num(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_parent_num(self, new_value)

    def get_magnetic_space_group_magtype(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_magtype(self)

    def set_magnetic_space_group_magtype(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_magtype(self, new_value)

    def get_magnetic_space_group_n_kv(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_kv(self)

    def set_magnetic_space_group_n_kv(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_kv(self, new_value)

    def get_magnetic_space_group_og_number(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_og_number(self, output_value)

    def set_magnetic_space_group_og_number(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_og_number(self, new_value)

    def get_magnetic_space_group_n_irreps(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_irreps(self)

    def set_magnetic_space_group_n_irreps(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_irreps(self, new_value)

    def get_magnetic_space_group_spg_latsy(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_spg_latsy(self, output_value)

    def set_magnetic_space_group_spg_latsy(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_spg_latsy(self, new_value)

    def get_magnetic_space_group_num_gen(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_gen(self)

    def set_magnetic_space_group_num_gen(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_gen(self, new_value)

    def get_magnetic_space_group_standard_setting(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_standard_setting(self)

    def set_magnetic_space_group_standard_setting(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_standard_setting(self, new_value)

    def get_magnetic_space_group_parent_spg(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_parent_spg(self, output_value)

    def set_magnetic_space_group_parent_spg(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_parent_spg(self, new_value)

    def get_magnetic_space_group_og_symbol(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_og_symbol(self, output_value)

    def set_magnetic_space_group_og_symbol(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_og_symbol(self, new_value)

    def get_magnetic_space_group_centre(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centre(self, output_value)

    def set_magnetic_space_group_centre(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centre(self, new_value)

    def get_magnetic_space_group_mcif(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_mcif(self)

    def set_magnetic_space_group_mcif(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_mcif(self, new_value)

    def get_magnetic_space_group_numops(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_numops(self)

    def set_magnetic_space_group_numops(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_numops(self, new_value)

    def get_magnetic_space_group_trn_to_standard(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_trn_to_standard(self, output_value)

    def set_magnetic_space_group_trn_to_standard(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_trn_to_standard(self, new_value)

    def get_magnetic_space_group_trn_from_parent(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_trn_from_parent(self, output_value)

    def set_magnetic_space_group_trn_from_parent(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_trn_from_parent(self, new_value)

    def get_magnetic_space_group_multip(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_multip(self)

    def set_magnetic_space_group_multip(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_multip(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_space_group_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.magnetic_space_group_type_data_ptr_get, _pycrysfml.magnetic_space_group_type_data_ptr_set)
magnetic_space_group_type_swigregister = _pycrysfml.magnetic_space_group_type_swigregister
magnetic_space_group_type_swigregister(magnetic_space_group_type)

class magsymm_k_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magsymm_k_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magsymm_k_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_magsymm_k_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_magsymm_k_type
    __del__ = lambda self: None

    def get_basis_element(self, irrrepnum, symopnum, vectornum, v):
        return _pycrysfml.magsymm_k_type_get_basis_element(self, irrrepnum, symopnum, vectornum, v)

    def get_kvector(self, elem, ind):
        return _pycrysfml.magsymm_k_type_get_kvector(self, elem, ind)

    def set_basis_element(self, irrrepnum, symopnum, vectornum, v):
        return _pycrysfml.magsymm_k_type_set_basis_element(self, irrrepnum, symopnum, vectornum, v)

    def get_magsymm_k_latt(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_latt(self, output_value)

    def set_magsymm_k_latt(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_latt(self, new_value)

    def get_magsymm_k_numops(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_numops(self)

    def set_magsymm_k_numops(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_numops(self, new_value)

    def get_magsymm_k_bns_symbol(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_bns_symbol(self, output_value)

    def set_magsymm_k_bns_symbol(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_bns_symbol(self, new_value)

    def get_magsymm_k_bns_number(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_bns_number(self, output_value)

    def set_magsymm_k_bns_number(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_bns_number(self, new_value)

    def get_magsymm_k_mcentred(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_mcentred(self)

    def set_magsymm_k_mcentred(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_mcentred(self, new_value)

    def get_magsymm_k_magmodel(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_magmodel(self, output_value)

    def set_magsymm_k_magmodel(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_magmodel(self, new_value)

    def get_magsymm_k_kvec(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_kvec(self, output_value)

    def set_magsymm_k_kvec(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_kvec(self, new_value)

    def get_magsymm_k_nmsym(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nmsym(self)

    def set_magsymm_k_nmsym(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nmsym(self, new_value)

    def get_magsymm_k_num_lat(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_num_lat(self)

    def set_magsymm_k_num_lat(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_num_lat(self, new_value)

    def get_magsymm_k_small_irrep_dim(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_small_irrep_dim(self, output_value)

    def set_magsymm_k_small_irrep_dim(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_small_irrep_dim(self, new_value)

    def get_magsymm_k_ltr(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_ltr(self, output_value)

    def set_magsymm_k_ltr(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_ltr(self, new_value)

    def get_magsymm_k_parent_num(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_parent_num(self)

    def set_magsymm_k_parent_num(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_parent_num(self, new_value)

    def get_magsymm_k_sk_type(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_sk_type(self, output_value)

    def set_magsymm_k_sk_type(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_sk_type(self, new_value)

    def get_magsymm_k_nirreps(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nirreps(self)

    def set_magsymm_k_nirreps(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nirreps(self, new_value)

    def get_magsymm_k_magtype(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_magtype(self)

    def set_magsymm_k_magtype(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_magtype(self, new_value)

    def get_magsymm_k_og_number(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_og_number(self, output_value)

    def set_magsymm_k_og_number(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_og_number(self, new_value)

    def get_magsymm_k_irrep_dim(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_irrep_dim(self, output_value)

    def set_magsymm_k_irrep_dim(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_irrep_dim(self, new_value)

    def get_magsymm_k_irrep_modes_number(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_irrep_modes_number(self, output_value)

    def set_magsymm_k_irrep_modes_number(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_irrep_modes_number(self, new_value)

    def get_magsymm_k_nkv(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nkv(self)

    def set_magsymm_k_nkv(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nkv(self, new_value)

    def get_magsymm_k_centred(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_centred(self)

    def set_magsymm_k_centred(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_centred(self, new_value)

    def get_magsymm_k_parent_spg(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_parent_spg(self, output_value)

    def set_magsymm_k_parent_spg(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_parent_spg(self, new_value)

    def get_magsymm_k_og_symbol(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_og_symbol(self, output_value)

    def set_magsymm_k_og_symbol(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_og_symbol(self, new_value)

    def get_magsymm_k_nbas(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nbas(self, output_value)

    def set_magsymm_k_nbas(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nbas(self, new_value)

    def get_magsymm_k_icomp(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_icomp(self, output_value)

    def set_magsymm_k_icomp(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_icomp(self, new_value)

    def get_magsymm_k_multip(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_multip(self)

    def set_magsymm_k_multip(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_multip(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magsymm_k_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magsymm_k_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.magsymm_k_type_data_ptr_get, _pycrysfml.magsymm_k_type_data_ptr_set)
magsymm_k_type_swigregister = _pycrysfml.magsymm_k_type_swigregister
magsymm_k_type_swigregister(magsymm_k_type)

class matom_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matom_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matom_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_matom_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_matom_list_type
    __del__ = lambda self: None

    def get_matom_list_element(self, elem, ind):
        return _pycrysfml.matom_list_type_get_matom_list_element(self, elem, ind)

    def set_matom_list_element(self, elem, ind):
        return _pycrysfml.matom_list_type_set_matom_list_element(self, elem, ind)

    def get_matom_list_natoms(self):
        return _pycrysfml.matom_list_type_get_matom_list_natoms(self)

    def set_matom_list_natoms(self, new_value):
        return _pycrysfml.matom_list_type_set_matom_list_natoms(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.matom_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.matom_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.matom_list_type_data_ptr_get, _pycrysfml.matom_list_type_data_ptr_set)
matom_list_type_swigregister = _pycrysfml.matom_list_type_swigregister
matom_list_type_swigregister(matom_list_type)

class matom_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matom_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matom_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_matom_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_matom_type
    __del__ = lambda self: None

    def get_matom_basis_element(self, i, j):
        return _pycrysfml.matom_type_get_matom_basis_element(self, i, j)

    def set_matom_basis_element(self, i, j, value):
        return _pycrysfml.matom_type_set_matom_basis_element(self, i, j, value)

    def get_matom_mmphas(self, output_value):
        return _pycrysfml.matom_type_get_matom_mmphas(self, output_value)

    def set_matom_mmphas(self, new_value):
        return _pycrysfml.matom_type_set_matom_mmphas(self, new_value)

    def get_matom_locc(self):
        return _pycrysfml.matom_type_get_matom_locc(self)

    def set_matom_locc(self, new_value):
        return _pycrysfml.matom_type_set_matom_locc(self, new_value)

    def get_matom_ski_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_ski_std(self, output_value)

    def set_matom_ski_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_ski_std(self, new_value)

    def get_matom_lvarf(self, output_value):
        return _pycrysfml.matom_type_get_matom_lvarf(self, output_value)

    def set_matom_lvarf(self, new_value):
        return _pycrysfml.matom_type_set_matom_lvarf(self, new_value)

    def get_matom_utype(self, output_value):
        return _pycrysfml.matom_type_get_matom_utype(self, output_value)

    def set_matom_utype(self, new_value):
        return _pycrysfml.matom_type_set_matom_utype(self, new_value)

    def get_matom_mbiso(self):
        return _pycrysfml.matom_type_get_matom_mbiso(self)

    def set_matom_mbiso(self, new_value):
        return _pycrysfml.matom_type_set_matom_mbiso(self, new_value)

    def get_matom_occ(self):
        return _pycrysfml.matom_type_get_matom_occ(self)

    def set_matom_occ(self, new_value):
        return _pycrysfml.matom_type_set_matom_occ(self, new_value)

    def get_matom_lbas(self, output_value):
        return _pycrysfml.matom_type_get_matom_lbas(self, output_value)

    def set_matom_lbas(self, new_value):
        return _pycrysfml.matom_type_set_matom_lbas(self, new_value)

    def get_matom_charge(self):
        return _pycrysfml.matom_type_get_matom_charge(self)

    def set_matom_charge(self, new_value):
        return _pycrysfml.matom_type_set_matom_charge(self, new_value)

    def get_matom_sfacsymb(self, output_value):
        return _pycrysfml.matom_type_get_matom_sfacsymb(self, output_value)

    def set_matom_sfacsymb(self, new_value):
        return _pycrysfml.matom_type_set_matom_sfacsymb(self, new_value)

    def get_matom_imat(self, output_value):
        return _pycrysfml.matom_type_get_matom_imat(self, output_value)

    def set_matom_imat(self, new_value):
        return _pycrysfml.matom_type_set_matom_imat(self, new_value)

    def get_matom_lmphas(self, output_value):
        return _pycrysfml.matom_type_get_matom_lmphas(self, output_value)

    def set_matom_lmphas(self, new_value):
        return _pycrysfml.matom_type_set_matom_lmphas(self, new_value)

    def get_matom_mphas(self, output_value):
        return _pycrysfml.matom_type_get_matom_mphas(self, output_value)

    def set_matom_mphas(self, new_value):
        return _pycrysfml.matom_type_set_matom_mphas(self, new_value)

    def get_matom_spher_ski(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_ski(self, output_value)

    def set_matom_spher_ski(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_ski(self, new_value)

    def get_matom_skr(self, output_value):
        return _pycrysfml.matom_type_get_matom_skr(self, output_value)

    def set_matom_skr(self, new_value):
        return _pycrysfml.matom_type_set_matom_skr(self, new_value)

    def get_matom_lskr(self, output_value):
        return _pycrysfml.matom_type_get_matom_lskr(self, output_value)

    def set_matom_lskr(self, new_value):
        return _pycrysfml.matom_type_set_matom_lskr(self, new_value)

    def get_matom_lab(self, output_value):
        return _pycrysfml.matom_type_get_matom_lab(self, output_value)

    def set_matom_lab(self, new_value):
        return _pycrysfml.matom_type_set_matom_lab(self, new_value)

    def get_matom_moment(self):
        return _pycrysfml.matom_type_get_matom_moment(self)

    def set_matom_moment(self, new_value):
        return _pycrysfml.matom_type_set_matom_moment(self, new_value)

    def get_matom_lu(self, output_value):
        return _pycrysfml.matom_type_get_matom_lu(self, output_value)

    def set_matom_lu(self, new_value):
        return _pycrysfml.matom_type_set_matom_lu(self, new_value)

    def get_matom_mocc(self):
        return _pycrysfml.matom_type_get_matom_mocc(self)

    def set_matom_mocc(self, new_value):
        return _pycrysfml.matom_type_set_matom_mocc(self, new_value)

    def get_matom_active(self):
        return _pycrysfml.matom_type_get_matom_active(self)

    def set_matom_active(self, new_value):
        return _pycrysfml.matom_type_set_matom_active(self, new_value)

    def get_matom_ski(self, output_value):
        return _pycrysfml.matom_type_get_matom_ski(self, output_value)

    def set_matom_ski(self, new_value):
        return _pycrysfml.matom_type_set_matom_ski(self, new_value)

    def get_matom_mult(self):
        return _pycrysfml.matom_type_get_matom_mult(self)

    def set_matom_mult(self, new_value):
        return _pycrysfml.matom_type_set_matom_mult(self, new_value)

    def get_matom_spher_skr_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_skr_std(self, output_value)

    def set_matom_spher_skr_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_skr_std(self, new_value)

    def get_matom_x_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_x_std(self, output_value)

    def set_matom_x_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_x_std(self, new_value)

    def get_matom_u_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_u_std(self, output_value)

    def set_matom_u_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_u_std(self, new_value)

    def get_matom_lski(self, output_value):
        return _pycrysfml.matom_type_get_matom_lski(self, output_value)

    def set_matom_lski(self, new_value):
        return _pycrysfml.matom_type_set_matom_lski(self, new_value)

    def get_matom_nvar(self):
        return _pycrysfml.matom_type_get_matom_nvar(self)

    def set_matom_nvar(self, new_value):
        return _pycrysfml.matom_type_set_matom_nvar(self, new_value)

    def get_matom_wyck(self, output_value):
        return _pycrysfml.matom_type_get_matom_wyck(self, output_value)

    def set_matom_wyck(self, new_value):
        return _pycrysfml.matom_type_set_matom_wyck(self, new_value)

    def get_matom_biso_std(self):
        return _pycrysfml.matom_type_get_matom_biso_std(self)

    def set_matom_biso_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_biso_std(self, new_value)

    def get_matom_lbiso(self):
        return _pycrysfml.matom_type_get_matom_lbiso(self)

    def set_matom_lbiso(self, new_value):
        return _pycrysfml.matom_type_set_matom_lbiso(self, new_value)

    def get_matom_mphas_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_mphas_std(self, output_value)

    def set_matom_mphas_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_mphas_std(self, new_value)

    def get_matom_mvarf(self, output_value):
        return _pycrysfml.matom_type_get_matom_mvarf(self, output_value)

    def set_matom_mvarf(self, new_value):
        return _pycrysfml.matom_type_set_matom_mvarf(self, new_value)

    def get_matom_biso(self):
        return _pycrysfml.matom_type_get_matom_biso(self)

    def set_matom_biso(self, new_value):
        return _pycrysfml.matom_type_set_matom_biso(self, new_value)

    def get_matom_varf(self, output_value):
        return _pycrysfml.matom_type_get_matom_varf(self, output_value)

    def set_matom_varf(self, new_value):
        return _pycrysfml.matom_type_set_matom_varf(self, new_value)

    def get_matom_u(self, output_value):
        return _pycrysfml.matom_type_get_matom_u(self, output_value)

    def set_matom_u(self, new_value):
        return _pycrysfml.matom_type_set_matom_u(self, new_value)

    def get_matom_occ_std(self):
        return _pycrysfml.matom_type_get_matom_occ_std(self)

    def set_matom_occ_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_occ_std(self, new_value)

    def get_matom_x(self, output_value):
        return _pycrysfml.matom_type_get_matom_x(self, output_value)

    def set_matom_x(self, new_value):
        return _pycrysfml.matom_type_set_matom_x(self, new_value)

    def get_matom_z(self):
        return _pycrysfml.matom_type_get_matom_z(self)

    def set_matom_z(self, new_value):
        return _pycrysfml.matom_type_set_matom_z(self, new_value)

    def get_matom_nvk(self):
        return _pycrysfml.matom_type_get_matom_nvk(self)

    def set_matom_nvk(self, new_value):
        return _pycrysfml.matom_type_set_matom_nvk(self, new_value)

    def get_matom_mbas(self, output_value):
        return _pycrysfml.matom_type_get_matom_mbas(self, output_value)

    def set_matom_mbas(self, new_value):
        return _pycrysfml.matom_type_set_matom_mbas(self, new_value)

    def get_matom_spher_ski_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_ski_std(self, output_value)

    def set_matom_spher_ski_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_ski_std(self, new_value)

    def get_matom_spher_skr(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_skr(self, output_value)

    def set_matom_spher_skr(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_skr(self, new_value)

    def get_matom_mski(self, output_value):
        return _pycrysfml.matom_type_get_matom_mski(self, output_value)

    def set_matom_mski(self, new_value):
        return _pycrysfml.matom_type_set_matom_mski(self, new_value)

    def get_matom_skr_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_skr_std(self, output_value)

    def set_matom_skr_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_skr_std(self, new_value)

    def get_matom_mu(self, output_value):
        return _pycrysfml.matom_type_get_matom_mu(self, output_value)

    def set_matom_mu(self, new_value):
        return _pycrysfml.matom_type_set_matom_mu(self, new_value)

    def get_matom_mskr(self, output_value):
        return _pycrysfml.matom_type_get_matom_mskr(self, output_value)

    def set_matom_mskr(self, new_value):
        return _pycrysfml.matom_type_set_matom_mskr(self, new_value)

    def get_matom_lx(self, output_value):
        return _pycrysfml.matom_type_get_matom_lx(self, output_value)

    def set_matom_lx(self, new_value):
        return _pycrysfml.matom_type_set_matom_lx(self, new_value)

    def get_matom_chemsymb(self, output_value):
        return _pycrysfml.matom_type_get_matom_chemsymb(self, output_value)

    def set_matom_chemsymb(self, new_value):
        return _pycrysfml.matom_type_set_matom_chemsymb(self, new_value)

    def get_matom_cbas(self, output_value):
        return _pycrysfml.matom_type_get_matom_cbas(self, output_value)

    def set_matom_cbas(self, new_value):
        return _pycrysfml.matom_type_set_matom_cbas(self, new_value)

    def get_matom_ind(self, output_value):
        return _pycrysfml.matom_type_get_matom_ind(self, output_value)

    def set_matom_ind(self, new_value):
        return _pycrysfml.matom_type_set_matom_ind(self, new_value)

    def get_matom_cbas_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_cbas_std(self, output_value)

    def set_matom_cbas_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_cbas_std(self, new_value)

    def get_matom_thtype(self, output_value):
        return _pycrysfml.matom_type_get_matom_thtype(self, output_value)

    def set_matom_thtype(self, new_value):
        return _pycrysfml.matom_type_set_matom_thtype(self, new_value)

    def get_matom_atminfo(self, output_value):
        return _pycrysfml.matom_type_get_matom_atminfo(self, output_value)

    def set_matom_atminfo(self, new_value):
        return _pycrysfml.matom_type_set_matom_atminfo(self, new_value)

    def get_matom_ueq(self):
        return _pycrysfml.matom_type_get_matom_ueq(self)

    def set_matom_ueq(self, new_value):
        return _pycrysfml.matom_type_set_matom_ueq(self, new_value)

    def get_matom_mx(self, output_value):
        return _pycrysfml.matom_type_get_matom_mx(self, output_value)

    def set_matom_mx(self, new_value):
        return _pycrysfml.matom_type_set_matom_mx(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.matom_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.matom_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.matom_type_data_ptr_get, _pycrysfml.matom_type_data_ptr_set)
matom_type_swigregister = _pycrysfml.matom_type_swigregister
matom_type_swigregister(matom_type)

class molecular_crystal_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, molecular_crystal_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, molecular_crystal_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_molecular_crystal_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_molecular_crystal_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.molecular_crystal_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.molecular_crystal_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.molecular_crystal_type_data_ptr_get, _pycrysfml.molecular_crystal_type_data_ptr_set)
molecular_crystal_type_swigregister = _pycrysfml.molecular_crystal_type_swigregister
molecular_crystal_type_swigregister(molecular_crystal_type)

class molecule_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, molecule_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, molecule_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_molecule_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_molecule_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.molecule_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.molecule_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.molecule_type_data_ptr_get, _pycrysfml.molecule_type_data_ptr_set)
molecule_type_swigregister = _pycrysfml.molecule_type_swigregister
molecule_type_swigregister(molecule_type)

class msym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msym_oper_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_msym_oper_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_msym_oper_type
    __del__ = lambda self: None

    def get_msym_oper_phas(self):
        return _pycrysfml.msym_oper_type_get_msym_oper_phas(self)

    def set_msym_oper_phas(self, new_value):
        return _pycrysfml.msym_oper_type_set_msym_oper_phas(self, new_value)

    def get_msym_oper_rot(self, output_value):
        return _pycrysfml.msym_oper_type_get_msym_oper_rot(self, output_value)

    def set_msym_oper_rot(self, new_value):
        return _pycrysfml.msym_oper_type_set_msym_oper_rot(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.msym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.msym_oper_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.msym_oper_type_data_ptr_get, _pycrysfml.msym_oper_type_data_ptr_set)
msym_oper_type_swigregister = _pycrysfml.msym_oper_type_swigregister
msym_oper_type_swigregister(msym_oper_type)

class nonatomic_parameter_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonatomic_parameter_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonatomic_parameter_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_nonatomic_parameter_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.nonatomic_parameter_list_type_data_ptr_get, _pycrysfml.nonatomic_parameter_list_type_data_ptr_set)
nonatomic_parameter_list_type_swigregister = _pycrysfml.nonatomic_parameter_list_type_swigregister
nonatomic_parameter_list_type_swigregister(nonatomic_parameter_list_type)

class nonatomic_parameter_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonatomic_parameter_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonatomic_parameter_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_nonatomic_parameter_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.nonatomic_parameter_type_data_ptr_get, _pycrysfml.nonatomic_parameter_type_data_ptr_set)
nonatomic_parameter_type_swigregister = _pycrysfml.nonatomic_parameter_type_swigregister
nonatomic_parameter_type_swigregister(nonatomic_parameter_type)

class ns_space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ns_space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ns_space_group_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_ns_space_group_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_ns_space_group_type
    __del__ = lambda self: None

    def get_ns_space_group_centred(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_centred(self)

    def set_ns_space_group_centred(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_centred(self, new_value)

    def get_ns_space_group_numspg(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_numspg(self)

    def set_ns_space_group_numspg(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_numspg(self, new_value)

    def get_ns_space_group_crystalsys(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_crystalsys(self, output_value)

    def set_ns_space_group_crystalsys(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_crystalsys(self, new_value)

    def get_ns_space_group_numlat(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_numlat(self)

    def set_ns_space_group_numlat(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_numlat(self, new_value)

    def get_ns_space_group_pg(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_pg(self, output_value)

    def set_ns_space_group_pg(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_pg(self, new_value)

    def get_ns_space_group_hall(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_hall(self, output_value)

    def set_ns_space_group_hall(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_hall(self, new_value)

    def get_ns_space_group_info(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_info(self, output_value)

    def set_ns_space_group_info(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_info(self, new_value)

    def get_ns_space_group_spg_lat(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_lat(self, output_value)

    def set_ns_space_group_spg_lat(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_lat(self, new_value)

    def get_ns_space_group_laue(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_laue(self, output_value)

    def set_ns_space_group_laue(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_laue(self, new_value)

    def get_ns_space_group_spg_latsy(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_latsy(self, output_value)

    def set_ns_space_group_spg_latsy(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_latsy(self, new_value)

    def get_ns_space_group_num_gen(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_num_gen(self)

    def set_ns_space_group_num_gen(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_num_gen(self, new_value)

    def get_ns_space_group_bravais(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_bravais(self, output_value)

    def set_ns_space_group_bravais(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_bravais(self, new_value)

    def get_ns_space_group_sg_setting(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_sg_setting(self, output_value)

    def set_ns_space_group_sg_setting(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_sg_setting(self, new_value)

    def get_ns_space_group_ghall(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_ghall(self, output_value)

    def set_ns_space_group_ghall(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_ghall(self, new_value)

    def get_ns_space_group_spg_symb(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_symb(self, output_value)

    def set_ns_space_group_spg_symb(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_symb(self, new_value)

    def get_ns_space_group_centre_coord(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_centre_coord(self, output_value)

    def set_ns_space_group_centre_coord(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_centre_coord(self, new_value)

    def get_ns_space_group_centre(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_centre(self, output_value)

    def set_ns_space_group_centre(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_centre(self, new_value)

    def get_ns_space_group_numops(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_numops(self)

    def set_ns_space_group_numops(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_numops(self, new_value)

    def get_ns_space_group_multip(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_multip(self)

    def set_ns_space_group_multip(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_multip(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.ns_space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ns_space_group_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.ns_space_group_type_data_ptr_get, _pycrysfml.ns_space_group_type_data_ptr_set)
ns_space_group_type_swigregister = _pycrysfml.ns_space_group_type_swigregister
ns_space_group_type_swigregister(ns_space_group_type)

class ns_sym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ns_sym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ns_sym_oper_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_ns_sym_oper_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_ns_sym_oper_type
    __del__ = lambda self: None

    def get_ns_sym_oper_tr(self, output_value):
        return _pycrysfml.ns_sym_oper_type_get_ns_sym_oper_tr(self, output_value)

    def set_ns_sym_oper_tr(self, new_value):
        return _pycrysfml.ns_sym_oper_type_set_ns_sym_oper_tr(self, new_value)

    def get_ns_sym_oper_rot(self, output_value):
        return _pycrysfml.ns_sym_oper_type_get_ns_sym_oper_rot(self, output_value)

    def set_ns_sym_oper_rot(self, new_value):
        return _pycrysfml.ns_sym_oper_type_set_ns_sym_oper_rot(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.ns_sym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ns_sym_oper_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.ns_sym_oper_type_data_ptr_get, _pycrysfml.ns_sym_oper_type_data_ptr_set)
ns_sym_oper_type_swigregister = _pycrysfml.ns_sym_oper_type_swigregister
ns_sym_oper_type_swigregister(ns_sym_oper_type)

class opt_conditions_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_conditions_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_conditions_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_opt_conditions_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_opt_conditions_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.opt_conditions_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.opt_conditions_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.opt_conditions_type_data_ptr_get, _pycrysfml.opt_conditions_type_data_ptr_set)
opt_conditions_type_swigregister = _pycrysfml.opt_conditions_type_swigregister
opt_conditions_type_swigregister(opt_conditions_type)

class point_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_point_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_point_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.point_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.point_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.point_list_type_data_ptr_get, _pycrysfml.point_list_type_data_ptr_set)
point_list_type_swigregister = _pycrysfml.point_list_type_swigregister
point_list_type_swigregister(point_list_type)

class points_interval_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, points_interval_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, points_interval_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_points_interval_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_points_interval_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.points_interval_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.points_interval_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.points_interval_type_data_ptr_get, _pycrysfml.points_interval_type_data_ptr_set)
points_interval_type_swigregister = _pycrysfml.points_interval_type_swigregister
points_interval_type_swigregister(points_interval_type)

class polar_calc_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_calc_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_calc_list_type_data_ptr_get, _pycrysfml.polar_calc_list_type_data_ptr_set)
polar_calc_list_type_swigregister = _pycrysfml.polar_calc_list_type_swigregister
polar_calc_list_type_swigregister(polar_calc_list_type)

class polar_calcmulti_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calcmulti_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calcmulti_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_calcmulti_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_calcmulti_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_list_type_data_ptr_set)
polar_calcmulti_list_type_swigregister = _pycrysfml.polar_calcmulti_list_type_swigregister
polar_calcmulti_list_type_swigregister(polar_calcmulti_list_type)

class polar_calcmulti_svs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calcmulti_svs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calcmulti_svs_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_calcmulti_svs_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_svs_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_calcmulti_svs_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_set)
polar_calcmulti_svs_list_type_swigregister = _pycrysfml.polar_calcmulti_svs_list_type_swigregister
polar_calcmulti_svs_list_type_swigregister(polar_calcmulti_svs_list_type)

class polar_calc_svs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_svs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_svs_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_calc_svs_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_calc_svs_list_type_data_ptr_get, _pycrysfml.polar_calc_svs_list_type_data_ptr_set)
polar_calc_svs_list_type_swigregister = _pycrysfml.polar_calc_svs_list_type_swigregister
polar_calc_svs_list_type_swigregister(polar_calc_svs_list_type)

class polar_calc_svs_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_svs_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_svs_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_calc_svs_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_calc_svs_type_data_ptr_get, _pycrysfml.polar_calc_svs_type_data_ptr_set)
polar_calc_svs_type_swigregister = _pycrysfml.polar_calc_svs_type_swigregister
polar_calc_svs_type_swigregister(polar_calc_svs_type)

class polar_calc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_calc_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_calc_type_data_ptr_get, _pycrysfml.polar_calc_type_data_ptr_set)
polar_calc_type_swigregister = _pycrysfml.polar_calc_type_swigregister
polar_calc_type_swigregister(polar_calc_type)

class polar_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_info_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_info_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_info_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_info_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_info_type_data_ptr_get, _pycrysfml.polar_info_type_data_ptr_set)
polar_info_type_swigregister = _pycrysfml.polar_info_type_swigregister
polar_info_type_swigregister(polar_info_type)

class polar_obs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obs_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_obs_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obs_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obs_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_obs_list_type_data_ptr_get, _pycrysfml.polar_obs_list_type_data_ptr_set)
polar_obs_list_type_swigregister = _pycrysfml.polar_obs_list_type_swigregister
polar_obs_list_type_swigregister(polar_obs_list_type)

class polar_obsmulti_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obsmulti_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obsmulti_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_obsmulti_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obsmulti_list_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obsmulti_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obsmulti_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_obsmulti_list_type_data_ptr_get, _pycrysfml.polar_obsmulti_list_type_data_ptr_set)
polar_obsmulti_list_type_swigregister = _pycrysfml.polar_obsmulti_list_type_swigregister
polar_obsmulti_list_type_swigregister(polar_obsmulti_list_type)

class polar_obs_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obs_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obs_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_polar_obs_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obs_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obs_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obs_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.polar_obs_type_data_ptr_get, _pycrysfml.polar_obs_type_data_ptr_set)
polar_obs_type_swigregister = _pycrysfml.polar_obs_type_swigregister
polar_obs_type_swigregister(polar_obs_type)

class powder_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, powder_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, powder_numor_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_powder_numor_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_powder_numor_type
    __del__ = lambda self: None

    def get_powder_numor_nbang(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_nbang(self)

    def set_powder_numor_nbang(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_nbang(self, new_value)

    def get_powder_numor_manip(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_manip(self)

    def set_powder_numor_manip(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_manip(self, new_value)

    def get_powder_numor_icalc(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_icalc(self)

    def set_powder_numor_icalc(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_icalc(self, new_value)

    def get_powder_numor_monitor(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_monitor(self)

    def set_powder_numor_monitor(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_monitor(self, new_value)

    def get_powder_numor_nbdata(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_nbdata(self)

    def set_powder_numor_nbdata(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_nbdata(self, new_value)

    def get_powder_numor_title(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_title(self, output_value)

    def set_powder_numor_title(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_title(self, new_value)

    def get_powder_numor_numor(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_numor(self)

    def set_powder_numor_numor(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_numor(self, new_value)

    def get_powder_numor_instrm(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_instrm(self, output_value)

    def set_powder_numor_instrm(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_instrm(self, new_value)

    def get_powder_numor_wave(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_wave(self)

    def set_powder_numor_wave(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_wave(self, new_value)

    def get_powder_numor_header(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_header(self, output_value)

    def set_powder_numor_header(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_header(self, new_value)

    def get_powder_numor_scantype(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_scantype(self, output_value)

    def set_powder_numor_scantype(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_scantype(self, new_value)

    def get_powder_numor_icdesc(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_icdesc(self, output_value)

    def set_powder_numor_icdesc(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_icdesc(self, new_value)

    def get_powder_numor_angles(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_angles(self, output_value)

    def set_powder_numor_angles(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_angles(self, new_value)

    def get_powder_numor_time(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_time(self)

    def set_powder_numor_time(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_time(self, new_value)

    def get_powder_numor_nframes(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_nframes(self)

    def set_powder_numor_nframes(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_nframes(self, new_value)

    def get_powder_numor_conditions(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_conditions(self, output_value)

    def set_powder_numor_conditions(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_conditions(self, new_value)

    def get_powder_numor_scans(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_scans(self, output_value)

    def set_powder_numor_scans(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_scans(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.powder_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.powder_numor_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.powder_numor_type_data_ptr_get, _pycrysfml.powder_numor_type_data_ptr_set)
powder_numor_type_swigregister = _pycrysfml.powder_numor_type_swigregister
powder_numor_type_swigregister(powder_numor_type)

class psd_val_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, psd_val_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, psd_val_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_psd_val_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_psd_val_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.psd_val_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.psd_val_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.psd_val_type_data_ptr_get, _pycrysfml.psd_val_type_data_ptr_set)
psd_val_type_swigregister = _pycrysfml.psd_val_type_swigregister
psd_val_type_swigregister(psd_val_type)

class reflct_array_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflct_array_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflct_array_list, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_reflct_array_list()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflct_array_list
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflct_array_list_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflct_array_list_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.reflct_array_list_data_ptr_get, _pycrysfml.reflct_array_list_data_ptr_set)
reflct_array_list_swigregister = _pycrysfml.reflct_array_list_swigregister
reflct_array_list_swigregister(reflct_array_list)

class reflection_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflection_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflection_list_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_reflection_list_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflection_list_type
    __del__ = lambda self: None

    def get_reflection_list_element(self, elem, ind):
        return _pycrysfml.reflection_list_type_get_reflection_list_element(self, elem, ind)

    def set_reflection_list_element(self, elem, ind):
        return _pycrysfml.reflection_list_type_set_reflection_list_element(self, elem, ind)

    def get_reflection_list_nref(self):
        return _pycrysfml.reflection_list_type_get_reflection_list_nref(self)

    def set_reflection_list_nref(self, new_value):
        return _pycrysfml.reflection_list_type_set_reflection_list_nref(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflection_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflection_list_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.reflection_list_type_data_ptr_get, _pycrysfml.reflection_list_type_data_ptr_set)
reflection_list_type_swigregister = _pycrysfml.reflection_list_type_swigregister
reflection_list_type_swigregister(reflection_list_type)

class reflection_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflection_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflection_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_reflection_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflection_type
    __del__ = lambda self: None

    def get_reflection_a(self):
        return _pycrysfml.reflection_type_get_reflection_a(self)

    def set_reflection_a(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_a(self, new_value)

    def get_reflection_aa(self):
        return _pycrysfml.reflection_type_get_reflection_aa(self)

    def set_reflection_aa(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_aa(self, new_value)

    def get_reflection_b(self):
        return _pycrysfml.reflection_type_get_reflection_b(self)

    def set_reflection_b(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_b(self, new_value)

    def get_reflection_bb(self):
        return _pycrysfml.reflection_type_get_reflection_bb(self)

    def set_reflection_bb(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_bb(self, new_value)

    def get_reflection_h(self, output_value):
        return _pycrysfml.reflection_type_get_reflection_h(self, output_value)

    def set_reflection_h(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_h(self, new_value)

    def get_reflection_sfo(self):
        return _pycrysfml.reflection_type_get_reflection_sfo(self)

    def set_reflection_sfo(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_sfo(self, new_value)

    def get_reflection_s(self):
        return _pycrysfml.reflection_type_get_reflection_s(self)

    def set_reflection_s(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_s(self, new_value)

    def get_reflection_fc(self):
        return _pycrysfml.reflection_type_get_reflection_fc(self)

    def set_reflection_fc(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_fc(self, new_value)

    def get_reflection_w(self):
        return _pycrysfml.reflection_type_get_reflection_w(self)

    def set_reflection_w(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_w(self, new_value)

    def get_reflection_phase(self):
        return _pycrysfml.reflection_type_get_reflection_phase(self)

    def set_reflection_phase(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_phase(self, new_value)

    def get_reflection_mult(self):
        return _pycrysfml.reflection_type_get_reflection_mult(self)

    def set_reflection_mult(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_mult(self, new_value)

    def get_reflection_fo(self):
        return _pycrysfml.reflection_type_get_reflection_fo(self)

    def set_reflection_fo(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_fo(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflection_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflection_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.reflection_type_data_ptr_get, _pycrysfml.reflection_type_data_ptr_set)
reflection_type_swigregister = _pycrysfml.reflection_type_swigregister
reflection_type_swigregister(reflection_type)

class reflect_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflect_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflect_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_reflect_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflect_type
    __del__ = lambda self: None

    def get_reflect_h(self, output_value):
        return _pycrysfml.reflect_type_get_reflect_h(self, output_value)

    def set_reflect_h(self, new_value):
        return _pycrysfml.reflect_type_set_reflect_h(self, new_value)

    def get_reflect_s(self):
        return _pycrysfml.reflect_type_get_reflect_s(self)

    def set_reflect_s(self, new_value):
        return _pycrysfml.reflect_type_set_reflect_s(self, new_value)

    def get_reflect_mult(self):
        return _pycrysfml.reflect_type_get_reflect_mult(self)

    def set_reflect_mult(self, new_value):
        return _pycrysfml.reflect_type_set_reflect_mult(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflect_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflect_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.reflect_type_data_ptr_get, _pycrysfml.reflect_type_data_ptr_set)
reflect_type_swigregister = _pycrysfml.reflect_type_swigregister
reflect_type_swigregister(reflect_type)

class sbvs_par_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbvs_par_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbvs_par_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_sbvs_par_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_sbvs_par_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.sbvs_par_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sbvs_par_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.sbvs_par_type_data_ptr_get, _pycrysfml.sbvs_par_type_data_ptr_set)
sbvs_par_type_swigregister = _pycrysfml.sbvs_par_type_swigregister
sbvs_par_type_swigregister(sbvs_par_type)

class scattering_species_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scattering_species_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scattering_species_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_scattering_species_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_scattering_species_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.scattering_species_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.scattering_species_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.scattering_species_type_data_ptr_get, _pycrysfml.scattering_species_type_data_ptr_set)
scattering_species_type_swigregister = _pycrysfml.scattering_species_type_swigregister
scattering_species_type_swigregister(scattering_species_type)

class space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, space_group_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_space_group_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_space_group_type
    __del__ = lambda self: None

    def set_atom_equiv_list(self, cell, a, ate, lun=None):
        return _pycrysfml.space_group_type_set_atom_equiv_list(self, cell, a, ate, lun)

    def set_formal_charges(self, cell, a, eps_val=None, iwrt=None):
        return _pycrysfml.space_group_type_set_formal_charges(self, cell, a, eps_val, iwrt)

    def set_new_asymunit(self, ate, mat, orig, a_n, matkind=None, debug=None):
        return _pycrysfml.space_group_type_set_new_asymunit(self, ate, mat, orig, a_n, matkind, debug)

    def set_orbits_inlist(self, pl):
        return _pycrysfml.space_group_type_set_orbits_inlist(self, pl)

    def get_hallsymb_from_gener(self, spaceh=None):
        return _pycrysfml.space_group_type_get_hallsymb_from_gener(self, spaceh)

    def get_laue_pg(self, laue_car, point_car):
        return _pycrysfml.space_group_type_get_laue_pg(self, laue_car, point_car)

    def get_space_group_centred(self):
        return _pycrysfml.space_group_type_get_space_group_centred(self)

    def set_space_group_centred(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_centred(self, new_value)

    def get_space_group_centre_coord(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_centre_coord(self, output_value)

    def set_space_group_centre_coord(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_centre_coord(self, new_value)

    def get_space_group_hexa(self):
        return _pycrysfml.space_group_type_get_space_group_hexa(self)

    def set_space_group_hexa(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_hexa(self, new_value)

    def get_space_group_numspg(self):
        return _pycrysfml.space_group_type_get_space_group_numspg(self)

    def set_space_group_numspg(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_numspg(self, new_value)

    def get_space_group_crystalsys(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_crystalsys(self, output_value)

    def set_space_group_crystalsys(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_crystalsys(self, new_value)

    def get_space_group_numlat(self):
        return _pycrysfml.space_group_type_get_space_group_numlat(self)

    def set_space_group_numlat(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_numlat(self, new_value)

    def get_space_group_pg(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_pg(self, output_value)

    def set_space_group_pg(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_pg(self, new_value)

    def get_space_group_wyckoff(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_wyckoff(self, output_value)

    def set_space_group_wyckoff(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_wyckoff(self, new_value)

    def get_space_group_hall(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_hall(self, output_value)

    def set_space_group_hall(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_hall(self, new_value)

    def get_space_group_info(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_info(self, output_value)

    def set_space_group_info(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_info(self, new_value)

    def get_space_group_spg_lat(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_spg_lat(self, output_value)

    def set_space_group_spg_lat(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_spg_lat(self, new_value)

    def get_space_group_laue(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_laue(self, output_value)

    def set_space_group_laue(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_laue(self, new_value)

    def get_space_group_spg_latsy(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_spg_latsy(self, output_value)

    def set_space_group_spg_latsy(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_spg_latsy(self, new_value)

    def get_space_group_num_gen(self):
        return _pycrysfml.space_group_type_get_space_group_num_gen(self)

    def set_space_group_num_gen(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_num_gen(self, new_value)

    def get_space_group_bravais(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_bravais(self, output_value)

    def set_space_group_bravais(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_bravais(self, new_value)

    def get_space_group_sg_setting(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_sg_setting(self, output_value)

    def set_space_group_sg_setting(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_sg_setting(self, new_value)

    def get_space_group_ghall(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_ghall(self, output_value)

    def set_space_group_ghall(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_ghall(self, new_value)

    def get_space_group_spg_symb(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_spg_symb(self, output_value)

    def set_space_group_spg_symb(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_spg_symb(self, new_value)

    def get_space_group_centre(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_centre(self, output_value)

    def set_space_group_centre(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_centre(self, new_value)

    def get_space_group_numops(self):
        return _pycrysfml.space_group_type_get_space_group_numops(self)

    def set_space_group_numops(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_numops(self, new_value)

    def get_space_group_r_asym_unit(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_r_asym_unit(self, output_value)

    def set_space_group_r_asym_unit(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_r_asym_unit(self, new_value)

    def get_space_group_multip(self):
        return _pycrysfml.space_group_type_get_space_group_multip(self)

    def set_space_group_multip(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_multip(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.space_group_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.space_group_type_data_ptr_get, _pycrysfml.space_group_type_data_ptr_set)
space_group_type_swigregister = _pycrysfml.space_group_type_swigregister
space_group_type_swigregister(space_group_type)

class spgr_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spgr_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spgr_info_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_spgr_info_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_spgr_info_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.spgr_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.spgr_info_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.spgr_info_type_data_ptr_get, _pycrysfml.spgr_info_type_data_ptr_set)
spgr_info_type_swigregister = _pycrysfml.spgr_info_type_swigregister
spgr_info_type_swigregister(spgr_info_type)


def getPowderNumor_title(obj):
    return _pycrysfml.getPowderNumor_title(obj)
getPowderNumor_title = _pycrysfml.getPowderNumor_title

def getPowderNumor_instrm(obj):
    return _pycrysfml.getPowderNumor_instrm(obj)
getPowderNumor_instrm = _pycrysfml.getPowderNumor_instrm

def getPowderNumor_header(obj):
    return _pycrysfml.getPowderNumor_header(obj)
getPowderNumor_header = _pycrysfml.getPowderNumor_header

def getPowderNumor_scantype(obj):
    return _pycrysfml.getPowderNumor_scantype(obj)
getPowderNumor_scantype = _pycrysfml.getPowderNumor_scantype

def getCrystalCell_carttype(obj):
    return _pycrysfml.getCrystalCell_carttype(obj)
getCrystalCell_carttype = _pycrysfml.getCrystalCell_carttype

def getAtomEquiv_chemsymb(obj):
    return _pycrysfml.getAtomEquiv_chemsymb(obj)
getAtomEquiv_chemsymb = _pycrysfml.getAtomEquiv_chemsymb

def getMagneticSpaceGroup_bns_symbol(obj):
    return _pycrysfml.getMagneticSpaceGroup_bns_symbol(obj)
getMagneticSpaceGroup_bns_symbol = _pycrysfml.getMagneticSpaceGroup_bns_symbol

def getMagneticSpaceGroup_bns_number(obj):
    return _pycrysfml.getMagneticSpaceGroup_bns_number(obj)
getMagneticSpaceGroup_bns_number = _pycrysfml.getMagneticSpaceGroup_bns_number

def getMagneticSpaceGroup_crystalsys(obj):
    return _pycrysfml.getMagneticSpaceGroup_crystalsys(obj)
getMagneticSpaceGroup_crystalsys = _pycrysfml.getMagneticSpaceGroup_crystalsys

def getMagneticSpaceGroup_spg_lat(obj):
    return _pycrysfml.getMagneticSpaceGroup_spg_lat(obj)
getMagneticSpaceGroup_spg_lat = _pycrysfml.getMagneticSpaceGroup_spg_lat

def getMagneticSpaceGroup_og_number(obj):
    return _pycrysfml.getMagneticSpaceGroup_og_number(obj)
getMagneticSpaceGroup_og_number = _pycrysfml.getMagneticSpaceGroup_og_number

def getMagneticSpaceGroup_spg_latsy(obj):
    return _pycrysfml.getMagneticSpaceGroup_spg_latsy(obj)
getMagneticSpaceGroup_spg_latsy = _pycrysfml.getMagneticSpaceGroup_spg_latsy

def getMagneticSpaceGroup_parent_spg(obj):
    return _pycrysfml.getMagneticSpaceGroup_parent_spg(obj)
getMagneticSpaceGroup_parent_spg = _pycrysfml.getMagneticSpaceGroup_parent_spg

def getMagneticSpaceGroup_og_symbol(obj):
    return _pycrysfml.getMagneticSpaceGroup_og_symbol(obj)
getMagneticSpaceGroup_og_symbol = _pycrysfml.getMagneticSpaceGroup_og_symbol

def getMagneticSpaceGroup_centre(obj):
    return _pycrysfml.getMagneticSpaceGroup_centre(obj)
getMagneticSpaceGroup_centre = _pycrysfml.getMagneticSpaceGroup_centre

def getMagneticSpaceGroup_trn_to_standard(obj):
    return _pycrysfml.getMagneticSpaceGroup_trn_to_standard(obj)
getMagneticSpaceGroup_trn_to_standard = _pycrysfml.getMagneticSpaceGroup_trn_to_standard

def getMagneticSpaceGroup_trn_from_parent(obj):
    return _pycrysfml.getMagneticSpaceGroup_trn_from_parent(obj)
getMagneticSpaceGroup_trn_from_parent = _pycrysfml.getMagneticSpaceGroup_trn_from_parent

def getJobInfo_title(obj):
    return _pycrysfml.getJobInfo_title(obj)
getJobInfo_title = _pycrysfml.getJobInfo_title

def getMagsymmK_latt(obj):
    return _pycrysfml.getMagsymmK_latt(obj)
getMagsymmK_latt = _pycrysfml.getMagsymmK_latt

def getMagsymmK_bns_symbol(obj):
    return _pycrysfml.getMagsymmK_bns_symbol(obj)
getMagsymmK_bns_symbol = _pycrysfml.getMagsymmK_bns_symbol

def getMagsymmK_bns_number(obj):
    return _pycrysfml.getMagsymmK_bns_number(obj)
getMagsymmK_bns_number = _pycrysfml.getMagsymmK_bns_number

def getMagsymmK_magmodel(obj):
    return _pycrysfml.getMagsymmK_magmodel(obj)
getMagsymmK_magmodel = _pycrysfml.getMagsymmK_magmodel

def getMagsymmK_sk_type(obj):
    return _pycrysfml.getMagsymmK_sk_type(obj)
getMagsymmK_sk_type = _pycrysfml.getMagsymmK_sk_type

def getMagsymmK_og_number(obj):
    return _pycrysfml.getMagsymmK_og_number(obj)
getMagsymmK_og_number = _pycrysfml.getMagsymmK_og_number

def getMagsymmK_parent_spg(obj):
    return _pycrysfml.getMagsymmK_parent_spg(obj)
getMagsymmK_parent_spg = _pycrysfml.getMagsymmK_parent_spg

def getMagsymmK_og_symbol(obj):
    return _pycrysfml.getMagsymmK_og_symbol(obj)
getMagsymmK_og_symbol = _pycrysfml.getMagsymmK_og_symbol

def getMatom_utype(obj):
    return _pycrysfml.getMatom_utype(obj)
getMatom_utype = _pycrysfml.getMatom_utype

def getMatom_sfacsymb(obj):
    return _pycrysfml.getMatom_sfacsymb(obj)
getMatom_sfacsymb = _pycrysfml.getMatom_sfacsymb

def getMatom_lab(obj):
    return _pycrysfml.getMatom_lab(obj)
getMatom_lab = _pycrysfml.getMatom_lab

def getMatom_wyck(obj):
    return _pycrysfml.getMatom_wyck(obj)
getMatom_wyck = _pycrysfml.getMatom_wyck

def getMatom_chemsymb(obj):
    return _pycrysfml.getMatom_chemsymb(obj)
getMatom_chemsymb = _pycrysfml.getMatom_chemsymb

def getMatom_thtype(obj):
    return _pycrysfml.getMatom_thtype(obj)
getMatom_thtype = _pycrysfml.getMatom_thtype

def getMatom_atminfo(obj):
    return _pycrysfml.getMatom_atminfo(obj)
getMatom_atminfo = _pycrysfml.getMatom_atminfo

def getWyckPos_str_orig(obj):
    return _pycrysfml.getWyckPos_str_orig(obj)
getWyckPos_str_orig = _pycrysfml.getWyckPos_str_orig

def getWyckPos_site(obj):
    return _pycrysfml.getWyckPos_site(obj)
getWyckPos_site = _pycrysfml.getWyckPos_site

def getAtom_utype(obj):
    return _pycrysfml.getAtom_utype(obj)
getAtom_utype = _pycrysfml.getAtom_utype

def getAtom_sfacsymb(obj):
    return _pycrysfml.getAtom_sfacsymb(obj)
getAtom_sfacsymb = _pycrysfml.getAtom_sfacsymb

def getAtom_lab(obj):
    return _pycrysfml.getAtom_lab(obj)
getAtom_lab = _pycrysfml.getAtom_lab

def getAtom_wyck(obj):
    return _pycrysfml.getAtom_wyck(obj)
getAtom_wyck = _pycrysfml.getAtom_wyck

def getAtom_chemsymb(obj):
    return _pycrysfml.getAtom_chemsymb(obj)
getAtom_chemsymb = _pycrysfml.getAtom_chemsymb

def getAtom_thtype(obj):
    return _pycrysfml.getAtom_thtype(obj)
getAtom_thtype = _pycrysfml.getAtom_thtype

def getAtom_atminfo(obj):
    return _pycrysfml.getAtom_atminfo(obj)
getAtom_atminfo = _pycrysfml.getAtom_atminfo

def getMagneticGroup_shubnikov(obj):
    return _pycrysfml.getMagneticGroup_shubnikov(obj)
getMagneticGroup_shubnikov = _pycrysfml.getMagneticGroup_shubnikov

def getDiffractionPattern_instr(obj):
    return _pycrysfml.getDiffractionPattern_instr(obj)
getDiffractionPattern_instr = _pycrysfml.getDiffractionPattern_instr

def getDiffractionPattern_yax_text(obj):
    return _pycrysfml.getDiffractionPattern_yax_text(obj)
getDiffractionPattern_yax_text = _pycrysfml.getDiffractionPattern_yax_text

def getDiffractionPattern_diff_kind(obj):
    return _pycrysfml.getDiffractionPattern_diff_kind(obj)
getDiffractionPattern_diff_kind = _pycrysfml.getDiffractionPattern_diff_kind

def getDiffractionPattern_filepath(obj):
    return _pycrysfml.getDiffractionPattern_filepath(obj)
getDiffractionPattern_filepath = _pycrysfml.getDiffractionPattern_filepath

def getDiffractionPattern_title(obj):
    return _pycrysfml.getDiffractionPattern_title(obj)
getDiffractionPattern_title = _pycrysfml.getDiffractionPattern_title

def getDiffractionPattern_filename(obj):
    return _pycrysfml.getDiffractionPattern_filename(obj)
getDiffractionPattern_filename = _pycrysfml.getDiffractionPattern_filename

def getDiffractionPattern_scat_var(obj):
    return _pycrysfml.getDiffractionPattern_scat_var(obj)
getDiffractionPattern_scat_var = _pycrysfml.getDiffractionPattern_scat_var

def getDiffractionPattern_xax_text(obj):
    return _pycrysfml.getDiffractionPattern_xax_text(obj)
getDiffractionPattern_xax_text = _pycrysfml.getDiffractionPattern_xax_text

def getNsSpaceGroup_crystalsys(obj):
    return _pycrysfml.getNsSpaceGroup_crystalsys(obj)
getNsSpaceGroup_crystalsys = _pycrysfml.getNsSpaceGroup_crystalsys

def getNsSpaceGroup_pg(obj):
    return _pycrysfml.getNsSpaceGroup_pg(obj)
getNsSpaceGroup_pg = _pycrysfml.getNsSpaceGroup_pg

def getNsSpaceGroup_hall(obj):
    return _pycrysfml.getNsSpaceGroup_hall(obj)
getNsSpaceGroup_hall = _pycrysfml.getNsSpaceGroup_hall

def getNsSpaceGroup_info(obj):
    return _pycrysfml.getNsSpaceGroup_info(obj)
getNsSpaceGroup_info = _pycrysfml.getNsSpaceGroup_info

def getNsSpaceGroup_spg_lat(obj):
    return _pycrysfml.getNsSpaceGroup_spg_lat(obj)
getNsSpaceGroup_spg_lat = _pycrysfml.getNsSpaceGroup_spg_lat

def getNsSpaceGroup_laue(obj):
    return _pycrysfml.getNsSpaceGroup_laue(obj)
getNsSpaceGroup_laue = _pycrysfml.getNsSpaceGroup_laue

def getNsSpaceGroup_spg_latsy(obj):
    return _pycrysfml.getNsSpaceGroup_spg_latsy(obj)
getNsSpaceGroup_spg_latsy = _pycrysfml.getNsSpaceGroup_spg_latsy

def getNsSpaceGroup_bravais(obj):
    return _pycrysfml.getNsSpaceGroup_bravais(obj)
getNsSpaceGroup_bravais = _pycrysfml.getNsSpaceGroup_bravais

def getNsSpaceGroup_sg_setting(obj):
    return _pycrysfml.getNsSpaceGroup_sg_setting(obj)
getNsSpaceGroup_sg_setting = _pycrysfml.getNsSpaceGroup_sg_setting

def getNsSpaceGroup_ghall(obj):
    return _pycrysfml.getNsSpaceGroup_ghall(obj)
getNsSpaceGroup_ghall = _pycrysfml.getNsSpaceGroup_ghall

def getNsSpaceGroup_spg_symb(obj):
    return _pycrysfml.getNsSpaceGroup_spg_symb(obj)
getNsSpaceGroup_spg_symb = _pycrysfml.getNsSpaceGroup_spg_symb

def getNsSpaceGroup_centre(obj):
    return _pycrysfml.getNsSpaceGroup_centre(obj)
getNsSpaceGroup_centre = _pycrysfml.getNsSpaceGroup_centre

def getSpaceGroup_crystalsys(obj):
    return _pycrysfml.getSpaceGroup_crystalsys(obj)
getSpaceGroup_crystalsys = _pycrysfml.getSpaceGroup_crystalsys

def getSpaceGroup_pg(obj):
    return _pycrysfml.getSpaceGroup_pg(obj)
getSpaceGroup_pg = _pycrysfml.getSpaceGroup_pg

def getSpaceGroup_hall(obj):
    return _pycrysfml.getSpaceGroup_hall(obj)
getSpaceGroup_hall = _pycrysfml.getSpaceGroup_hall

def getSpaceGroup_info(obj):
    return _pycrysfml.getSpaceGroup_info(obj)
getSpaceGroup_info = _pycrysfml.getSpaceGroup_info

def getSpaceGroup_spg_lat(obj):
    return _pycrysfml.getSpaceGroup_spg_lat(obj)
getSpaceGroup_spg_lat = _pycrysfml.getSpaceGroup_spg_lat

def getSpaceGroup_laue(obj):
    return _pycrysfml.getSpaceGroup_laue(obj)
getSpaceGroup_laue = _pycrysfml.getSpaceGroup_laue

def getSpaceGroup_spg_latsy(obj):
    return _pycrysfml.getSpaceGroup_spg_latsy(obj)
getSpaceGroup_spg_latsy = _pycrysfml.getSpaceGroup_spg_latsy

def getSpaceGroup_bravais(obj):
    return _pycrysfml.getSpaceGroup_bravais(obj)
getSpaceGroup_bravais = _pycrysfml.getSpaceGroup_bravais

def getSpaceGroup_sg_setting(obj):
    return _pycrysfml.getSpaceGroup_sg_setting(obj)
getSpaceGroup_sg_setting = _pycrysfml.getSpaceGroup_sg_setting

def getSpaceGroup_ghall(obj):
    return _pycrysfml.getSpaceGroup_ghall(obj)
getSpaceGroup_ghall = _pycrysfml.getSpaceGroup_ghall

def getSpaceGroup_spg_symb(obj):
    return _pycrysfml.getSpaceGroup_spg_symb(obj)
getSpaceGroup_spg_symb = _pycrysfml.getSpaceGroup_spg_symb

def getSpaceGroup_centre(obj):
    return _pycrysfml.getSpaceGroup_centre(obj)
getSpaceGroup_centre = _pycrysfml.getSpaceGroup_centre
class sxd_val_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxd_val_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxd_val_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_sxd_val_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxd_val_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxd_val_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxd_val_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.sxd_val_type_data_ptr_get, _pycrysfml.sxd_val_type_data_ptr_set)
sxd_val_type_swigregister = _pycrysfml.sxd_val_type_swigregister
sxd_val_type_swigregister(sxd_val_type)

class sxtal_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxtal_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxtal_numor_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_sxtal_numor_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxtal_numor_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxtal_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxtal_numor_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.sxtal_numor_type_data_ptr_get, _pycrysfml.sxtal_numor_type_data_ptr_set)
sxtal_numor_type_swigregister = _pycrysfml.sxtal_numor_type_swigregister
sxtal_numor_type_swigregister(sxtal_numor_type)

class sxtal_orient_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxtal_orient_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxtal_orient_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_sxtal_orient_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxtal_orient_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxtal_orient_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxtal_orient_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.sxtal_orient_type_data_ptr_get, _pycrysfml.sxtal_orient_type_data_ptr_set)
sxtal_orient_type_swigregister = _pycrysfml.sxtal_orient_type_swigregister
sxtal_orient_type_swigregister(sxtal_orient_type)

class sym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sym_oper_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_sym_oper_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_sym_oper_type
    __del__ = lambda self: None

    def get_sym_oper_tr(self, output_value):
        return _pycrysfml.sym_oper_type_get_sym_oper_tr(self, output_value)

    def set_sym_oper_tr(self, new_value):
        return _pycrysfml.sym_oper_type_set_sym_oper_tr(self, new_value)

    def get_sym_oper_rot(self, output_value):
        return _pycrysfml.sym_oper_type_get_sym_oper_rot(self, output_value)

    def set_sym_oper_rot(self, new_value):
        return _pycrysfml.sym_oper_type_set_sym_oper_rot(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.sym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sym_oper_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.sym_oper_type_data_ptr_get, _pycrysfml.sym_oper_type_data_ptr_set)
sym_oper_type_swigregister = _pycrysfml.sym_oper_type_swigregister
sym_oper_type_swigregister(sym_oper_type)

class table_equiv_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_equiv_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_equiv_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_table_equiv_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_table_equiv_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.table_equiv_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.table_equiv_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.table_equiv_type_data_ptr_get, _pycrysfml.table_equiv_type_data_ptr_set)
table_equiv_type_swigregister = _pycrysfml.table_equiv_type_swigregister
table_equiv_type_swigregister(table_equiv_type)

class torsion_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, torsion_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, torsion_restraint_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_torsion_restraint_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_torsion_restraint_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.torsion_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.torsion_restraint_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.torsion_restraint_type_data_ptr_get, _pycrysfml.torsion_restraint_type_data_ptr_set)
torsion_restraint_type_swigregister = _pycrysfml.torsion_restraint_type_swigregister
torsion_restraint_type_swigregister(torsion_restraint_type)

class twin_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twin_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twin_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_twin_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_twin_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.twin_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.twin_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.twin_type_data_ptr_get, _pycrysfml.twin_type_data_ptr_set)
twin_type_swigregister = _pycrysfml.twin_type_swigregister
twin_type_swigregister(twin_type)

class twofold_axes_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twofold_axes_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twofold_axes_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_twofold_axes_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_twofold_axes_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.twofold_axes_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.twofold_axes_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.twofold_axes_type_data_ptr_get, _pycrysfml.twofold_axes_type_data_ptr_set)
twofold_axes_type_swigregister = _pycrysfml.twofold_axes_type_swigregister
twofold_axes_type_swigregister(twofold_axes_type)

class wyck_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyck_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyck_info_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_wyck_info_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyck_info_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyck_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyck_info_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.wyck_info_type_data_ptr_get, _pycrysfml.wyck_info_type_data_ptr_set)
wyck_info_type_swigregister = _pycrysfml.wyck_info_type_swigregister
wyck_info_type_swigregister(wyck_info_type)

class wyckoff_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyckoff_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyckoff_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_wyckoff_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyckoff_type
    __del__ = lambda self: None

    def get_wyckoff_num_orbit(self):
        return _pycrysfml.wyckoff_type_get_wyckoff_num_orbit(self)

    def set_wyckoff_num_orbit(self, new_value):
        return _pycrysfml.wyckoff_type_set_wyckoff_num_orbit(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyckoff_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyckoff_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.wyckoff_type_data_ptr_get, _pycrysfml.wyckoff_type_data_ptr_set)
wyckoff_type_swigregister = _pycrysfml.wyckoff_type_swigregister
wyckoff_type_swigregister(wyckoff_type)

class wyck_pos_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyck_pos_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyck_pos_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_wyck_pos_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyck_pos_type
    __del__ = lambda self: None

    def get_wyck_pos_norb(self):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_norb(self)

    def set_wyck_pos_norb(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_norb(self, new_value)

    def get_wyck_pos_str_orig(self, output_value):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_str_orig(self, output_value)

    def set_wyck_pos_str_orig(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_str_orig(self, new_value)

    def get_wyck_pos_multp(self):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_multp(self)

    def set_wyck_pos_multp(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_multp(self, new_value)

    def get_wyck_pos_site(self, output_value):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_site(self, output_value)

    def set_wyck_pos_site(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_site(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyck_pos_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyck_pos_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.wyck_pos_type_data_ptr_get, _pycrysfml.wyck_pos_type_data_ptr_set)
wyck_pos_type_swigregister = _pycrysfml.wyck_pos_type_swigregister
wyck_pos_type_swigregister(wyck_pos_type)

class xray_form_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xray_form_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xray_form_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_xray_form_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_xray_form_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.xray_form_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.xray_form_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.xray_form_type_data_ptr_get, _pycrysfml.xray_form_type_data_ptr_set)
xray_form_type_swigregister = _pycrysfml.xray_form_type_swigregister
xray_form_type_swigregister(xray_form_type)

class xray_wavelength_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xray_wavelength_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xray_wavelength_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_xray_wavelength_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_xray_wavelength_type
    __del__ = lambda self: None
    __swig_setmethods__["data_ptr"] = _pycrysfml.xray_wavelength_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.xray_wavelength_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.xray_wavelength_type_data_ptr_get, _pycrysfml.xray_wavelength_type_data_ptr_set)
xray_wavelength_type_swigregister = _pycrysfml.xray_wavelength_type_swigregister
xray_wavelength_type_swigregister(xray_wavelength_type)

class zone_axis_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, zone_axis_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, zone_axis_type, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pycrysfml.new_zone_axis_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycrysfml.delete_zone_axis_type
    __del__ = lambda self: None

    def get_zone_axis_nlayer(self):
        return _pycrysfml.zone_axis_type_get_zone_axis_nlayer(self)

    def set_zone_axis_nlayer(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_nlayer(self, new_value)

    def get_zone_axis_rx(self, output_value):
        return _pycrysfml.zone_axis_type_get_zone_axis_rx(self, output_value)

    def set_zone_axis_rx(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_rx(self, new_value)

    def get_zone_axis_ry(self, output_value):
        return _pycrysfml.zone_axis_type_get_zone_axis_ry(self, output_value)

    def set_zone_axis_ry(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_ry(self, new_value)

    def get_zone_axis_uvw(self, output_value):
        return _pycrysfml.zone_axis_type_get_zone_axis_uvw(self, output_value)

    def set_zone_axis_uvw(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_uvw(self, new_value)
    __swig_setmethods__["data_ptr"] = _pycrysfml.zone_axis_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.zone_axis_type_data_ptr_get
    if _newclass:
        data_ptr = _swig_property(_pycrysfml.zone_axis_type_data_ptr_get, _pycrysfml.zone_axis_type_data_ptr_set)
zone_axis_type_swigregister = _pycrysfml.zone_axis_type_swigregister
zone_axis_type_swigregister(zone_axis_type)

# This file is compatible with both classic and new-style classes.


