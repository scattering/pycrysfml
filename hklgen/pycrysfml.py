# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pycrysfml
else:
    import _pycrysfml

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.intp_swiginit(self, _pycrysfml.new_intp())
    __swig_destroy__ = _pycrysfml.delete_intp

    def assign(self, value):
        return _pycrysfml.intp_assign(self, value)

    def value(self):
        return _pycrysfml.intp_value(self)

    def cast(self):
        return _pycrysfml.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return _pycrysfml.intp_frompointer(t)

# Register intp in _pycrysfml:
_pycrysfml.intp_swigregister(intp)

def intp_frompointer(t):
    return _pycrysfml.intp_frompointer(t)

class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.doublep_swiginit(self, _pycrysfml.new_doublep())
    __swig_destroy__ = _pycrysfml.delete_doublep

    def assign(self, value):
        return _pycrysfml.doublep_assign(self, value)

    def value(self):
        return _pycrysfml.doublep_value(self)

    def cast(self):
        return _pycrysfml.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return _pycrysfml.doublep_frompointer(t)

# Register doublep in _pycrysfml:
_pycrysfml.doublep_swigregister(doublep)

def doublep_frompointer(t):
    return _pycrysfml.doublep_frompointer(t)

class floatp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.floatp_swiginit(self, _pycrysfml.new_floatp())
    __swig_destroy__ = _pycrysfml.delete_floatp

    def assign(self, value):
        return _pycrysfml.floatp_assign(self, value)

    def value(self):
        return _pycrysfml.floatp_value(self)

    def cast(self):
        return _pycrysfml.floatp_cast(self)

    @staticmethod
    def frompointer(t):
        return _pycrysfml.floatp_frompointer(t)

# Register floatp in _pycrysfml:
_pycrysfml.floatp_swigregister(floatp)

def floatp_frompointer(t):
    return _pycrysfml.floatp_frompointer(t)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycrysfml.delete_SwigPyIterator

    def value(self):
        return _pycrysfml.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pycrysfml.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pycrysfml.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pycrysfml.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pycrysfml.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pycrysfml.SwigPyIterator_copy(self)

    def next(self):
        return _pycrysfml.SwigPyIterator_next(self)

    def __next__(self):
        return _pycrysfml.SwigPyIterator___next__(self)

    def previous(self):
        return _pycrysfml.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pycrysfml.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pycrysfml.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pycrysfml.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pycrysfml.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pycrysfml.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pycrysfml.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pycrysfml.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pycrysfml:
_pycrysfml.SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycrysfml.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycrysfml.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pycrysfml.FloatVector___bool__(self)

    def __len__(self):
        return _pycrysfml.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pycrysfml.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycrysfml.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycrysfml.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycrysfml.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycrysfml.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycrysfml.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pycrysfml.FloatVector_pop(self)

    def append(self, x):
        return _pycrysfml.FloatVector_append(self, x)

    def empty(self):
        return _pycrysfml.FloatVector_empty(self)

    def size(self):
        return _pycrysfml.FloatVector_size(self)

    def swap(self, v):
        return _pycrysfml.FloatVector_swap(self, v)

    def begin(self):
        return _pycrysfml.FloatVector_begin(self)

    def end(self):
        return _pycrysfml.FloatVector_end(self)

    def rbegin(self):
        return _pycrysfml.FloatVector_rbegin(self)

    def rend(self):
        return _pycrysfml.FloatVector_rend(self)

    def clear(self):
        return _pycrysfml.FloatVector_clear(self)

    def get_allocator(self):
        return _pycrysfml.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pycrysfml.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pycrysfml.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _pycrysfml.FloatVector_swiginit(self, _pycrysfml.new_FloatVector(*args))

    def push_back(self, x):
        return _pycrysfml.FloatVector_push_back(self, x)

    def front(self):
        return _pycrysfml.FloatVector_front(self)

    def back(self):
        return _pycrysfml.FloatVector_back(self)

    def assign(self, n, x):
        return _pycrysfml.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pycrysfml.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pycrysfml.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pycrysfml.FloatVector_reserve(self, n)

    def capacity(self):
        return _pycrysfml.FloatVector_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_FloatVector

# Register FloatVector in _pycrysfml:
_pycrysfml.FloatVector_swigregister(FloatVector)

class FloatMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycrysfml.FloatMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycrysfml.FloatMatrix___nonzero__(self)

    def __bool__(self):
        return _pycrysfml.FloatMatrix___bool__(self)

    def __len__(self):
        return _pycrysfml.FloatMatrix___len__(self)

    def __getslice__(self, i, j):
        return _pycrysfml.FloatMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycrysfml.FloatMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycrysfml.FloatMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycrysfml.FloatMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycrysfml.FloatMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycrysfml.FloatMatrix___setitem__(self, *args)

    def pop(self):
        return _pycrysfml.FloatMatrix_pop(self)

    def append(self, x):
        return _pycrysfml.FloatMatrix_append(self, x)

    def empty(self):
        return _pycrysfml.FloatMatrix_empty(self)

    def size(self):
        return _pycrysfml.FloatMatrix_size(self)

    def swap(self, v):
        return _pycrysfml.FloatMatrix_swap(self, v)

    def begin(self):
        return _pycrysfml.FloatMatrix_begin(self)

    def end(self):
        return _pycrysfml.FloatMatrix_end(self)

    def rbegin(self):
        return _pycrysfml.FloatMatrix_rbegin(self)

    def rend(self):
        return _pycrysfml.FloatMatrix_rend(self)

    def clear(self):
        return _pycrysfml.FloatMatrix_clear(self)

    def get_allocator(self):
        return _pycrysfml.FloatMatrix_get_allocator(self)

    def pop_back(self):
        return _pycrysfml.FloatMatrix_pop_back(self)

    def erase(self, *args):
        return _pycrysfml.FloatMatrix_erase(self, *args)

    def __init__(self, *args):
        _pycrysfml.FloatMatrix_swiginit(self, _pycrysfml.new_FloatMatrix(*args))

    def push_back(self, x):
        return _pycrysfml.FloatMatrix_push_back(self, x)

    def front(self):
        return _pycrysfml.FloatMatrix_front(self)

    def back(self):
        return _pycrysfml.FloatMatrix_back(self)

    def assign(self, n, x):
        return _pycrysfml.FloatMatrix_assign(self, n, x)

    def resize(self, *args):
        return _pycrysfml.FloatMatrix_resize(self, *args)

    def insert(self, *args):
        return _pycrysfml.FloatMatrix_insert(self, *args)

    def reserve(self, n):
        return _pycrysfml.FloatMatrix_reserve(self, n)

    def capacity(self):
        return _pycrysfml.FloatMatrix_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_FloatMatrix

# Register FloatMatrix in _pycrysfml:
_pycrysfml.FloatMatrix_swigregister(FloatMatrix)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycrysfml.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycrysfml.IntVector___nonzero__(self)

    def __bool__(self):
        return _pycrysfml.IntVector___bool__(self)

    def __len__(self):
        return _pycrysfml.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pycrysfml.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycrysfml.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycrysfml.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycrysfml.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycrysfml.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycrysfml.IntVector___setitem__(self, *args)

    def pop(self):
        return _pycrysfml.IntVector_pop(self)

    def append(self, x):
        return _pycrysfml.IntVector_append(self, x)

    def empty(self):
        return _pycrysfml.IntVector_empty(self)

    def size(self):
        return _pycrysfml.IntVector_size(self)

    def swap(self, v):
        return _pycrysfml.IntVector_swap(self, v)

    def begin(self):
        return _pycrysfml.IntVector_begin(self)

    def end(self):
        return _pycrysfml.IntVector_end(self)

    def rbegin(self):
        return _pycrysfml.IntVector_rbegin(self)

    def rend(self):
        return _pycrysfml.IntVector_rend(self)

    def clear(self):
        return _pycrysfml.IntVector_clear(self)

    def get_allocator(self):
        return _pycrysfml.IntVector_get_allocator(self)

    def pop_back(self):
        return _pycrysfml.IntVector_pop_back(self)

    def erase(self, *args):
        return _pycrysfml.IntVector_erase(self, *args)

    def __init__(self, *args):
        _pycrysfml.IntVector_swiginit(self, _pycrysfml.new_IntVector(*args))

    def push_back(self, x):
        return _pycrysfml.IntVector_push_back(self, x)

    def front(self):
        return _pycrysfml.IntVector_front(self)

    def back(self):
        return _pycrysfml.IntVector_back(self)

    def assign(self, n, x):
        return _pycrysfml.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pycrysfml.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pycrysfml.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pycrysfml.IntVector_reserve(self, n)

    def capacity(self):
        return _pycrysfml.IntVector_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_IntVector

# Register IntVector in _pycrysfml:
_pycrysfml.IntVector_swigregister(IntVector)

class FortFuncs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def equiv_atm(nam1, nam2, nameat):
        return _pycrysfml.FortFuncs_equiv_atm(nam1, nam2, nameat)

    @staticmethod
    def allocate_atoms_cell(nasu, mul, dmax, ac):
        return _pycrysfml.FortFuncs_allocate_atoms_cell(nasu, mul, dmax, ac)

    @staticmethod
    def allocate_atom_list(n, a, fail=None):
        return _pycrysfml.FortFuncs_allocate_atom_list(n, a, fail)

    @staticmethod
    def allocate_matom_list(n, a, mfield=None, dirf=None):
        return _pycrysfml.FortFuncs_allocate_matom_list(n, a, mfield, dirf)

    @staticmethod
    def atlist1_extencell_atlist2(spg, a, c, conven):
        return _pycrysfml.FortFuncs_atlist1_extencell_atlist2(spg, a, c, conven)

    @staticmethod
    def atoms_cell_to_list(ac, a):
        return _pycrysfml.FortFuncs_atoms_cell_to_list(ac, a)

    @staticmethod
    def atom_list_to_cell(a, ac):
        return _pycrysfml.FortFuncs_atom_list_to_cell(a, ac)

    @staticmethod
    def atom_uequi_list(cell, ac):
        return _pycrysfml.FortFuncs_atom_uequi_list(cell, ac)

    @staticmethod
    def copy_atom_list(a, ac):
        return _pycrysfml.FortFuncs_copy_atom_list(a, ac)

    @staticmethod
    def deallocate_atoms_cell(ac):
        return _pycrysfml.FortFuncs_deallocate_atoms_cell(ac)

    @staticmethod
    def deallocate_atom_list(a):
        return _pycrysfml.FortFuncs_deallocate_atom_list(a)

    @staticmethod
    def deallocate_matom_list(a):
        return _pycrysfml.FortFuncs_deallocate_matom_list(a)

    @staticmethod
    def get_atom_2nd_tensor_ctr(x, tensval, spgr, codini, icodes, multip, ord=None, ipr=None):
        return _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr(x, tensval, spgr, codini, icodes, multip, ord, ipr)

    @staticmethod
    def init_atom_type(a):
        return _pycrysfml.FortFuncs_init_atom_type(a)

    @staticmethod
    def init_matom_type(a):
        return _pycrysfml.FortFuncs_init_matom_type(a)

    @staticmethod
    def init_err_atmd():
        return _pycrysfml.FortFuncs_init_err_atmd()

    @staticmethod
    def multi(lun, iprin, conven, spg, a, ac):
        return _pycrysfml.FortFuncs_multi(lun, iprin, conven, spg, a, ac)

    @staticmethod
    def read_bin_atom_list(ats, lun, ok):
        return _pycrysfml.FortFuncs_read_bin_atom_list(ats, lun, ok)

    @staticmethod
    def write_atom_list(ats, level=None, lun=None, cell=None):
        return _pycrysfml.FortFuncs_write_atom_list(ats, level, lun, cell)

    @staticmethod
    def write_bin_atom_list(ats, lun):
        return _pycrysfml.FortFuncs_write_bin_atom_list(ats, lun)

    @staticmethod
    def deallocate_ap_table():
        return _pycrysfml.FortFuncs_deallocate_ap_table()

    @staticmethod
    def deallocate_bvel_table():
        return _pycrysfml.FortFuncs_deallocate_bvel_table()

    @staticmethod
    def deallocate_bvs_table():
        return _pycrysfml.FortFuncs_deallocate_bvs_table()

    @staticmethod
    def deallocate_sbvs_table():
        return _pycrysfml.FortFuncs_deallocate_sbvs_table()

    @staticmethod
    def set_atomic_properties():
        return _pycrysfml.FortFuncs_set_atomic_properties()

    @staticmethod
    def set_bvel_table():
        return _pycrysfml.FortFuncs_set_bvel_table()

    @staticmethod
    def set_bvs_table():
        return _pycrysfml.FortFuncs_set_bvs_table()

    @staticmethod
    def set_sbvs_table():
        return _pycrysfml.FortFuncs_set_sbvs_table()

    @staticmethod
    def set_common_oxidation_states_table():
        return _pycrysfml.FortFuncs_set_common_oxidation_states_table()

    @staticmethod
    def set_oxidation_states_table():
        return _pycrysfml.FortFuncs_set_oxidation_states_table()

    @staticmethod
    def set_pauling_electronegativity():
        return _pycrysfml.FortFuncs_set_pauling_electronegativity()

    @staticmethod
    def init_err_bond():
        return _pycrysfml.FortFuncs_init_err_bond()

    @staticmethod
    def remove_bonds_table():
        return _pycrysfml.FortFuncs_remove_bonds_table()

    @staticmethod
    def set_bonds_table():
        return _pycrysfml.FortFuncs_set_bonds_table()

    @staticmethod
    def get_atomic_mass(atm, mass):
        return _pycrysfml.FortFuncs_get_atomic_mass(atm, mass)

    @staticmethod
    def get_atomic_vol(atm, vol):
        return _pycrysfml.FortFuncs_get_atomic_vol(atm, vol)

    @staticmethod
    def get_chemsymb(label, chemsymb, z=None):
        return _pycrysfml.FortFuncs_get_chemsymb(label, chemsymb, z)

    @staticmethod
    def get_covalent_radius(nam, rad):
        return _pycrysfml.FortFuncs_get_covalent_radius(nam, rad)

    @staticmethod
    def get_fermi_length(nam, b):
        return _pycrysfml.FortFuncs_get_fermi_length(nam, b)

    @staticmethod
    def get_inc_xs(nam, u):
        return _pycrysfml.FortFuncs_get_inc_xs(nam, u)

    @staticmethod
    def get_abs_xs(nam, u):
        return _pycrysfml.FortFuncs_get_abs_xs(nam, u)

    @staticmethod
    def get_ionic_radius(nam, valence, rad):
        return _pycrysfml.FortFuncs_get_ionic_radius(nam, valence, rad)

    @staticmethod
    def remove_chem_info():
        return _pycrysfml.FortFuncs_remove_chem_info()

    @staticmethod
    def remove_delta_fp_fpp():
        return _pycrysfml.FortFuncs_remove_delta_fp_fpp()

    @staticmethod
    def remove_magnetic_form():
        return _pycrysfml.FortFuncs_remove_magnetic_form()

    @staticmethod
    def remove_xray_form():
        return _pycrysfml.FortFuncs_remove_xray_form()

    @staticmethod
    def set_chem_info():
        return _pycrysfml.FortFuncs_set_chem_info()

    @staticmethod
    def set_delta_fp_fpp():
        return _pycrysfml.FortFuncs_set_delta_fp_fpp()

    @staticmethod
    def set_magnetic_form():
        return _pycrysfml.FortFuncs_set_magnetic_form()

    @staticmethod
    def set_xray_form():
        return _pycrysfml.FortFuncs_set_xray_form()

    @staticmethod
    def allocate_atoms_conf_list(n, a):
        return _pycrysfml.FortFuncs_allocate_atoms_conf_list(n, a)

    @staticmethod
    def calc_bvs(a, ipr=None, n_bvsm=None, filecod=None, info_string=None):
        return _pycrysfml.FortFuncs_calc_bvs(a, ipr, n_bvsm, filecod, info_string)

    @staticmethod
    def calc_map_bvel(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta=None, vol=None, emin=None, npix=None, outp=None):
        return _pycrysfml.FortFuncs_calc_map_bvel(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta, vol, emin, npix, outp)

    @staticmethod
    def calc_map_bvs(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta=None, vol=None):
        return _pycrysfml.FortFuncs_calc_map_bvs(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta, vol)

    @staticmethod
    def cost_bvs(a, gii, erep=None, gic=None):
        return _pycrysfml.FortFuncs_cost_bvs(a, gii, erep, gic)

    @staticmethod
    def cost_bvs_coulombrep(a, gii, erep):
        return _pycrysfml.FortFuncs_cost_bvs_coulombrep(a, gii, erep)

    @staticmethod
    def deallocate_atoms_conf_list(a):
        return _pycrysfml.FortFuncs_deallocate_atoms_conf_list(a)

    @staticmethod
    def ewald(lattvec, vol, ac, e):
        return _pycrysfml.FortFuncs_ewald(lattvec, vol, ac, e)

    @staticmethod
    def init_err_conf():
        return _pycrysfml.FortFuncs_init_err_conf()

    @staticmethod
    def species_on_list(a, mulg=None, tol=None, covalent=None, softbvs=None):
        return _pycrysfml.FortFuncs_species_on_list(a, mulg, tol, covalent, softbvs)

    @staticmethod
    def cell_volume_sigma(cell):
        return _pycrysfml.FortFuncs_cell_volume_sigma(cell)

    @staticmethod
    def u_equiv(cell, th_u):
        return _pycrysfml.FortFuncs_u_equiv(cell, th_u)

    @staticmethod
    def volume_from_cell(a, ang):
        return _pycrysfml.FortFuncs_volume_from_cell(a, ang)

    @staticmethod
    def cell_from_metric(g, vcell, volume=None):
        return _pycrysfml.FortFuncs_cell_from_metric(g, vcell, volume)

    @staticmethod
    def get_basis_from_uvw(dmin, u, cell, zoneb, ok, mode=None):
        return _pycrysfml.FortFuncs_get_basis_from_uvw(dmin, u, cell, zoneb, ok, mode)

    @staticmethod
    def get_conventional_cell(twofold, cell, tr, message, ok, told=None):
        return _pycrysfml.FortFuncs_get_conventional_cell(twofold, cell, tr, message, ok, told)

    @staticmethod
    def get_cryst_orthog_matrix(cellv, ang, crystort, cartypein=None):
        return _pycrysfml.FortFuncs_get_cryst_orthog_matrix(cellv, ang, crystort, cartypein)

    @staticmethod
    def get_primitive_cell(lat_type, centred_cell, primitive_cell, transfm):
        return _pycrysfml.FortFuncs_get_primitive_cell(lat_type, centred_cell, primitive_cell, transfm)

    @staticmethod
    def init_err_crys():
        return _pycrysfml.FortFuncs_init_err_crys()

    @staticmethod
    def orient_eigenvectors(eval, evec):
        return _pycrysfml.FortFuncs_orient_eigenvectors(eval, evec)

    @staticmethod
    def read_bin_crystal_cell(celda, lun, ok):
        return _pycrysfml.FortFuncs_read_bin_crystal_cell(celda, lun, ok)

    @staticmethod
    def set_crystal_cell(cellv, angl, celda, cartype=None, scell=None, sangl=None):
        return _pycrysfml.FortFuncs_set_crystal_cell(cellv, angl, celda, cartype, scell, sangl)

    @staticmethod
    def volume_sigma_from_cell(cell, ang, sigc, siga, volume, sigv):
        return _pycrysfml.FortFuncs_volume_sigma_from_cell(cell, ang, sigc, siga, volume, sigv)

    @staticmethod
    def write_bin_crystal_cell(celda, lun):
        return _pycrysfml.FortFuncs_write_bin_crystal_cell(celda, lun)

    @staticmethod
    def write_crystal_cell(celda, lun=None):
        return _pycrysfml.FortFuncs_write_crystal_cell(celda, lun)

    @staticmethod
    def calc_fwhm_peak(pat, xi, yi, ybi, rlim=None):
        return _pycrysfml.FortFuncs_calc_fwhm_peak(pat, xi, yi, ybi, rlim)

    @staticmethod
    def allocate_diffraction_pattern(pat, npts=None):
        return _pycrysfml.FortFuncs_allocate_diffraction_pattern(pat, npts)

    @staticmethod
    def calc_background(pat, ncyc, np, xmin=None, xmax=None):
        return _pycrysfml.FortFuncs_calc_background(pat, ncyc, np, xmin, xmax)

    @staticmethod
    def delete_noisy_points(pat, noisyp, fileinfo=None):
        return _pycrysfml.FortFuncs_delete_noisy_points(pat, noisyp, fileinfo)

    @staticmethod
    def init_err_diffpatt():
        return _pycrysfml.FortFuncs_init_err_diffpatt()

    @staticmethod
    def purge_diffraction_pattern(pat, mode):
        return _pycrysfml.FortFuncs_purge_diffraction_pattern(pat, mode)

    @staticmethod
    def read_background_file(bck_file, bck_mode, dif_pat):
        return _pycrysfml.FortFuncs_read_background_file(bck_file, bck_mode, dif_pat)

    @staticmethod
    def write_pattern_freeformat(filename, pat, xmin=None, xmax=None):
        return _pycrysfml.FortFuncs_write_pattern_freeformat(filename, pat, xmin, xmax)

    @staticmethod
    def write_pattern_instrm5(filename, pat, xmin=None, xmax=None, var=None):
        return _pycrysfml.FortFuncs_write_pattern_instrm5(filename, pat, xmin, xmax, var)

    @staticmethod
    def write_pattern_xysig(filename, pat, xmin=None, xmax=None):
        return _pycrysfml.FortFuncs_write_pattern_xysig(filename, pat, xmin, xmax)

    @staticmethod
    def unitcell_to_pdbfile(cell, spaceg, atom_list, filename):
        return _pycrysfml.FortFuncs_unitcell_to_pdbfile(cell, spaceg, atom_list, filename)

    @staticmethod
    def ag_theta(cos2t):
        return _pycrysfml.FortFuncs_ag_theta(cos2t)

    @staticmethod
    def al_theta(cos2t):
        return _pycrysfml.FortFuncs_al_theta(cos2t)

    @staticmethod
    def bg_theta(cos2t):
        return _pycrysfml.FortFuncs_bg_theta(cos2t)

    @staticmethod
    def bl_theta(cos2t):
        return _pycrysfml.FortFuncs_bl_theta(cos2t)

    @staticmethod
    def becker_coppens(iext, f2, cext, r, g, ys, dydr=None, dydg=None):
        return _pycrysfml.FortFuncs_becker_coppens(iext, f2, cext, r, g, ys, dydr, dydg)

    @staticmethod
    def shelx_extinction(job, iext, _lambda, ssnn, hkl, f2, extc, ys, der=None, derf2=None):
        return _pycrysfml.FortFuncs_shelx_extinction(job, iext, _lambda, ssnn, hkl, f2, extc, ys, der, derf2)

    @staticmethod
    def correct_flippingratios(iext, _lambda, q, extc, ssnn, hkl, an, bn, am, bm, yp, ym, ypm):
        return _pycrysfml.FortFuncs_correct_flippingratios(iext, _lambda, q, extc, ssnn, hkl, an, bn, am, bm, yp, ym, ypm)

    @staticmethod
    def cleanup_symmetry_operators(mspg):
        return _pycrysfml.FortFuncs_cleanup_symmetry_operators(mspg)

    @staticmethod
    def file_to_filelist(file_dat, file_list):
        return _pycrysfml.FortFuncs_file_to_filelist(file_dat, file_list)

    @staticmethod
    def init_err_form():
        return _pycrysfml.FortFuncs_init_err_form()

    @staticmethod
    def read_uvals(line, atomo, ulabel):
        return _pycrysfml.FortFuncs_read_uvals(line, atomo, ulabel)

    @staticmethod
    def readn_set_magnetic_structure_mcif(file_mcif, mcell, mgp, am):
        return _pycrysfml.FortFuncs_readn_set_magnetic_structure_mcif(file_mcif, mcell, mgp, am)

    @staticmethod
    def set_magnetic_space_group(symb, setting, mspg, parent=None, mcif=None, keepd=None, trn_to=None):
        return _pycrysfml.FortFuncs_set_magnetic_space_group(symb, setting, mspg, parent, mcif, keepd, trn_to)

    @staticmethod
    def write_cif_powder_profile(filename, pat, r_facts=None):
        return _pycrysfml.FortFuncs_write_cif_powder_profile(filename, pat, r_facts)

    @staticmethod
    def write_cif_template(filename, type_data, code, cell, spg, a):
        return _pycrysfml.FortFuncs_write_cif_template(filename, type_data, code, cell, spg, a)

    @staticmethod
    def write_shx_template(filename, code, title, _lambda, z, celda, space, atomos):
        return _pycrysfml.FortFuncs_write_shx_template(filename, code, title, _lambda, z, celda, space, atomos)

    @staticmethod
    def write_mcif(ipr, mcell, msgp, am, cell=None):
        return _pycrysfml.FortFuncs_write_mcif(ipr, mcell, msgp, am, cell)

    @staticmethod
    def allocate_coordination_type(nasu, numops, dmax, max_coor):
        return _pycrysfml.FortFuncs_allocate_coordination_type(nasu, numops, dmax, max_coor)

    @staticmethod
    def allocate_point_list(n, pl, ier):
        return _pycrysfml.FortFuncs_allocate_point_list(n, pl, ier)

    @staticmethod
    def angle_and_sigma(cellp, derm, x1, x0, x2, s1, s0, s2, ang, s):
        return _pycrysfml.FortFuncs_angle_and_sigma(cellp, derm, x1, x0, x2, s1, s0, s2, ang, s)

    @staticmethod
    def calc_dist_angle(dmax, dangl, cell, spg, a, lun=None):
        return _pycrysfml.FortFuncs_calc_dist_angle(dmax, dangl, cell, spg, a, lun)

    @staticmethod
    def calc_dist_angle_sigma(dmax, dangl, cell, spg, a, lun=None, lun_cons=None, lun_cif=None, filrest=None, rdmax=None, ramin=None):
        return _pycrysfml.FortFuncs_calc_dist_angle_sigma(dmax, dangl, cell, spg, a, lun, lun_cons, lun_cif, filrest, rdmax, ramin)

    @staticmethod
    def deallocate_coordination_type():
        return _pycrysfml.FortFuncs_deallocate_coordination_type()

    @staticmethod
    def deallocate_point_list(pl):
        return _pycrysfml.FortFuncs_deallocate_point_list(pl)

    @staticmethod
    def distance_and_sigma(cellp, derm, x0, x1, s0, s1, dis, s):
        return _pycrysfml.FortFuncs_distance_and_sigma(cellp, derm, x0, x1, s0, s1, dis, s)

    @staticmethod
    def get_anglen_axis_from_rotmat(r, axis, angle):
        return _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat(r, axis, angle)

    @staticmethod
    def get_euler_from_fract(x1, x2, x3, mt, phi, theta, chi, eum=None, code=None):
        return _pycrysfml.FortFuncs_get_euler_from_fract(x1, x2, x3, mt, phi, theta, chi, eum, code)

    @staticmethod
    def get_matrix_moving_v_to_u(v, u, r, w=None, ang=None):
        return _pycrysfml.FortFuncs_get_matrix_moving_v_to_u(v, u, r, w, ang)

    @staticmethod
    def get_omegachiphi(mt, omega, chi, phi, code=None):
        return _pycrysfml.FortFuncs_get_omegachiphi(mt, omega, chi, phi, code)

    @staticmethod
    def get_phithechi(mt, phi, theta, chi, code=None):
        return _pycrysfml.FortFuncs_get_phithechi(mt, phi, theta, chi, code)

    @staticmethod
    def get_transf_list(trans, ox, pl, npl, ifail):
        return _pycrysfml.FortFuncs_get_transf_list(trans, ox, pl, npl, ifail)

    @staticmethod
    def init_err_geom():
        return _pycrysfml.FortFuncs_init_err_geom()

    @staticmethod
    def p1_dist(dmax, cell, spg, ac, lun=None):
        return _pycrysfml.FortFuncs_p1_dist(dmax, cell, spg, ac, lun)

    @staticmethod
    def print_distances(lun, dmax, cell, spg, a):
        return _pycrysfml.FortFuncs_print_distances(lun, dmax, cell, spg, a)

    @staticmethod
    def set_rotation_matrix(ang, rot):
        return _pycrysfml.FortFuncs_set_rotation_matrix(ang, rot)

    @staticmethod
    def set_tdist_coordination(max_coor, dmax, cell, spg, a):
        return _pycrysfml.FortFuncs_set_tdist_coordination(max_coor, dmax, cell, spg, a)

    @staticmethod
    def set_tdist_partial_coordination(list, max_coor, dmax, cell, spg, a):
        return _pycrysfml.FortFuncs_set_tdist_partial_coordination(list, max_coor, dmax, cell, spg, a)

    @staticmethod
    def torsion_and_sigma(cellp, x1, x2, x3, x4, sx1, sx2, sx3, sx4, tor, s):
        return _pycrysfml.FortFuncs_torsion_and_sigma(cellp, x1, x2, x3, x4, sx1, sx2, sx3, sx4, tor, s)

    @staticmethod
    def directory_exists(dirname):
        return _pycrysfml.FortFuncs_directory_exists(dirname)

    @staticmethod
    def write_date_time(lun=None, dtim=None):
        return _pycrysfml.FortFuncs_write_date_time(lun, dtim)

    @staticmethod
    def define_uncompress_program(progname):
        return _pycrysfml.FortFuncs_define_uncompress_program(progname)

    @staticmethod
    def get_absolute_data_path(numor, instrm, path, iyear=None, icycle=None, actual_path=None):
        return _pycrysfml.FortFuncs_get_absolute_data_path(numor, instrm, path, iyear, icycle, actual_path)

    @staticmethod
    def get_next_yearcycle(yearcycle, reset_to_most_recent=None):
        return _pycrysfml.FortFuncs_get_next_yearcycle(yearcycle, reset_to_most_recent)

    @staticmethod
    def init_err_illdata():
        return _pycrysfml.FortFuncs_init_err_illdata()

    @staticmethod
    def init_sxtal_numor(numor, nbang=None, nbdata=None, nframes=None):
        return _pycrysfml.FortFuncs_init_sxtal_numor(numor, nbang, nbdata, nframes)

    @staticmethod
    def initialize_data_directory():
        return _pycrysfml.FortFuncs_initialize_data_directory()

    @staticmethod
    def read_current_instrm(filenam):
        return _pycrysfml.FortFuncs_read_current_instrm(filenam)

    @staticmethod
    def set_current_orient(wave, ub, setting=None):
        return _pycrysfml.FortFuncs_set_current_orient(wave, ub, setting)

    @staticmethod
    def set_default_instrument(typ=None, wav=None):
        return _pycrysfml.FortFuncs_set_default_instrument(typ, wav)

    @staticmethod
    def set_ill_data_directory(filedir):
        return _pycrysfml.FortFuncs_set_ill_data_directory(filedir)

    @staticmethod
    def set_instrm_directory(working_dir=None, instrm=None, iyear=None, icycle=None):
        return _pycrysfml.FortFuncs_set_instrm_directory(working_dir, instrm, iyear, icycle)

    @staticmethod
    def set_instrm_geometry_directory(env_var=None):
        return _pycrysfml.FortFuncs_set_instrm_geometry_directory(env_var)

    @staticmethod
    def update_current_instrm_ub(filenam, ub, wave):
        return _pycrysfml.FortFuncs_update_current_instrm_ub(filenam, ub, wave)

    @staticmethod
    def write_current_instrm_data(lun=None, fil=None):
        return _pycrysfml.FortFuncs_write_current_instrm_data(lun, fil)

    @staticmethod
    def write_generic_numor(num, lun=None):
        return _pycrysfml.FortFuncs_write_generic_numor(num, lun)

    @staticmethod
    def write_headerinfo_sxtal_numor(num, lun=None):
        return _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor(num, lun)

    @staticmethod
    def write_sxtal_numor(num, lun=None):
        return _pycrysfml.FortFuncs_write_sxtal_numor(num, lun)

    @staticmethod
    def read_calibration_file(filecal, instrm, cal):
        return _pycrysfml.FortFuncs_read_calibration_file(filecal, instrm, cal)

    @staticmethod
    def error_message(mess, iunit=None, routine=None, fatal=None):
        return _pycrysfml.FortFuncs_error_message(mess, iunit, routine, fatal)

    @staticmethod
    def info_message(mess, iunit=None):
        return _pycrysfml.FortFuncs_info_message(mess, iunit)

    @staticmethod
    def print_message(mess):
        return _pycrysfml.FortFuncs_print_message(mess)

    @staticmethod
    def wait_message(mess=None):
        return _pycrysfml.FortFuncs_wait_message(mess)

    @staticmethod
    def write_scroll_text(mess):
        return _pycrysfml.FortFuncs_write_scroll_text(mess)

    @staticmethod
    def calc_induced_sk(cell, spg, mfield, dir_mfield, atm, ipr=None):
        return _pycrysfml.FortFuncs_calc_induced_sk(cell, spg, mfield, dir_mfield, atm, ipr)

    @staticmethod
    def init_magsymm_k_type(mgp):
        return _pycrysfml.FortFuncs_init_magsymm_k_type(mgp)

    @staticmethod
    def set_shubnikov_group(shubk, sg, mgp):
        return _pycrysfml.FortFuncs_set_shubnikov_group(shubk, sg, mgp)

    @staticmethod
    def write_magnetic_structure(ipr, mgp, am, mag_dom=None, cell=None):
        return _pycrysfml.FortFuncs_write_magnetic_structure(ipr, mgp, am, mag_dom, cell)

    @staticmethod
    def write_shubnikov_group(sg, iunit=None):
        return _pycrysfml.FortFuncs_write_shubnikov_group(sg, iunit)

    @staticmethod
    def index_cube(iv, mc):
        return _pycrysfml.FortFuncs_index_cube(iv, mc)

    @staticmethod
    def vpoint_in_cube(r, s, t, x000, x001, x010, x011, x100, x101, x110, x111):
        return _pycrysfml.FortFuncs_vpoint_in_cube(r, s, t, x000, x001, x010, x011, x100, x101, x110, x111)

    @staticmethod
    def vpoint_in_line(r, x0, x1):
        return _pycrysfml.FortFuncs_vpoint_in_line(r, x0, x1)

    @staticmethod
    def vpoint_in_square(r, s, x00, x01, x10, x11):
        return _pycrysfml.FortFuncs_vpoint_in_square(r, s, x00, x01, x10, x11)

    @staticmethod
    def init_err_maps():
        return _pycrysfml.FortFuncs_init_err_maps()

    @staticmethod
    def set_cube_info():
        return _pycrysfml.FortFuncs_set_cube_info()

    @staticmethod
    def veclength(a, b):
        return _pycrysfml.FortFuncs_veclength(a, b)

    @staticmethod
    def init_err_math3d():
        return _pycrysfml.FortFuncs_init_err_math3d()

    @staticmethod
    def set_eps(neweps):
        return _pycrysfml.FortFuncs_set_eps(neweps)

    @staticmethod
    def set_eps_default():
        return _pycrysfml.FortFuncs_set_eps_default()

    @staticmethod
    def get_plane_from_3points(p1, p2, p3, a, b, c, d):
        return _pycrysfml.FortFuncs_get_plane_from_3points(p1, p2, p3, a, b, c, d)

    @staticmethod
    def matrix_diageigen(a, v, c):
        return _pycrysfml.FortFuncs_matrix_diageigen(a, v, c)

    @staticmethod
    def matrix_inverse(a, b, ifail):
        return _pycrysfml.FortFuncs_matrix_inverse(a, b, ifail)

    @staticmethod
    def resolv_sist_1x2(w, t, ts, x, ix):
        return _pycrysfml.FortFuncs_resolv_sist_1x2(w, t, ts, x, ix)

    @staticmethod
    def resolv_sist_1x3(w, t, ts, x, ix):
        return _pycrysfml.FortFuncs_resolv_sist_1x3(w, t, ts, x, ix)

    @staticmethod
    def resolv_sist_2x2(w, t, ts, x, ix):
        return _pycrysfml.FortFuncs_resolv_sist_2x2(w, t, ts, x, ix)

    @staticmethod
    def resolv_sist_2x3(w, t, ts, x, ix):
        return _pycrysfml.FortFuncs_resolv_sist_2x3(w, t, ts, x, ix)

    @staticmethod
    def resolv_sist_3x3(w, t, ts, x, ix):
        return _pycrysfml.FortFuncs_resolv_sist_3x3(w, t, ts, x, ix)

    @staticmethod
    def bessj0(x):
        return _pycrysfml.FortFuncs_bessj0(x)

    @staticmethod
    def bessj1(x):
        return _pycrysfml.FortFuncs_bessj1(x)

    @staticmethod
    def bessj(n, x):
        return _pycrysfml.FortFuncs_bessj(n, x)

    @staticmethod
    def pgcd(a, b):
        return _pycrysfml.FortFuncs_pgcd(a, b)

    @staticmethod
    def ppcm(a, b):
        return _pycrysfml.FortFuncs_ppcm(a, b)

    @staticmethod
    def epss_val():
        return _pycrysfml.FortFuncs_epss_val()

    @staticmethod
    def ep_ss_val():
        return _pycrysfml.FortFuncs_ep_ss_val()

    @staticmethod
    def init_err_mathgen():
        return _pycrysfml.FortFuncs_init_err_mathgen()

    @staticmethod
    def set_epsg_default():
        return _pycrysfml.FortFuncs_set_epsg_default()

    @staticmethod
    def cartesian_to_fractional(molecule, cell, newmolecule=None):
        return _pycrysfml.FortFuncs_cartesian_to_fractional(molecule, cell, newmolecule)

    @staticmethod
    def cartesian_to_spherical(molecule, newmolecule=None):
        return _pycrysfml.FortFuncs_cartesian_to_spherical(molecule, newmolecule)

    @staticmethod
    def cartesian_to_zmatrix(molecule, newmolecule=None, cell=None, d_min=None, d_max=None):
        return _pycrysfml.FortFuncs_cartesian_to_zmatrix(molecule, newmolecule, cell, d_min, d_max)

    @staticmethod
    def fix_reference(molecule, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None):
        return _pycrysfml.FortFuncs_fix_reference(molecule, newmolecule, natom_o, natom_x, natom_xy)

    @staticmethod
    def fix_orient_cartesian(molecule, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None, mat=None):
        return _pycrysfml.FortFuncs_fix_orient_cartesian(molecule, newmolecule, natom_o, natom_x, natom_xy, mat)

    @staticmethod
    def fractional_to_cartesian(molecule, cell, newmolecule=None):
        return _pycrysfml.FortFuncs_fractional_to_cartesian(molecule, cell, newmolecule)

    @staticmethod
    def fractional_to_spherical(molecule, cell, newmolecule=None):
        return _pycrysfml.FortFuncs_fractional_to_spherical(molecule, cell, newmolecule)

    @staticmethod
    def fractional_to_zmatrix(molecule, cell, newmolecule=None):
        return _pycrysfml.FortFuncs_fractional_to_zmatrix(molecule, cell, newmolecule)

    @staticmethod
    def init_err_molec():
        return _pycrysfml.FortFuncs_init_err_molec()

    @staticmethod
    def init_molecule(molecule, natm=None):
        return _pycrysfml.FortFuncs_init_molecule(molecule, natm)

    @staticmethod
    def init_mol_crys(molx, natm=None, nmol=None):
        return _pycrysfml.FortFuncs_init_mol_crys(molx, natm, nmol)

    @staticmethod
    def molcrys_to_atomlist(molcrys, atm):
        return _pycrysfml.FortFuncs_molcrys_to_atomlist(molcrys, atm)

    @staticmethod
    def molec_to_atomlist(molec, atm, coor_type=None, cell=None):
        return _pycrysfml.FortFuncs_molec_to_atomlist(molec, atm, coor_type, cell)

    @staticmethod
    def set_euler_matrix(rt, phi, theta, chi, eu):
        return _pycrysfml.FortFuncs_set_euler_matrix(rt, phi, theta, chi, eu)

    @staticmethod
    def spherical_to_cartesian(molecule, newmolecule=None):
        return _pycrysfml.FortFuncs_spherical_to_cartesian(molecule, newmolecule)

    @staticmethod
    def spherical_to_fractional(molecule, cell, newmolecule=None):
        return _pycrysfml.FortFuncs_spherical_to_fractional(molecule, cell, newmolecule)

    @staticmethod
    def spherical_to_zmatrix(molecule, newmolecule=None, cell=None):
        return _pycrysfml.FortFuncs_spherical_to_zmatrix(molecule, newmolecule, cell)

    @staticmethod
    def write_molecular_crystal(molcrys, lun=None):
        return _pycrysfml.FortFuncs_write_molecular_crystal(molcrys, lun)

    @staticmethod
    def write_molecule(molecule, lun=None):
        return _pycrysfml.FortFuncs_write_molecule(molecule, lun)

    @staticmethod
    def zmatrix_to_cartesian(molecule, newmolecule=None):
        return _pycrysfml.FortFuncs_zmatrix_to_cartesian(molecule, newmolecule)

    @staticmethod
    def zmatrix_to_fractional(molecule, cell, newmolecule=None):
        return _pycrysfml.FortFuncs_zmatrix_to_fractional(molecule, cell, newmolecule)

    @staticmethod
    def zmatrix_to_spherical(molecule, newmolecule=None):
        return _pycrysfml.FortFuncs_zmatrix_to_spherical(molecule, newmolecule)

    @staticmethod
    def calc_mag_interaction_vector(reflex, cell):
        return _pycrysfml.FortFuncs_calc_mag_interaction_vector(reflex, cell)

    @staticmethod
    def calc_magnetic_strf_miv(cell, mgp, atm, mh):
        return _pycrysfml.FortFuncs_calc_magnetic_strf_miv(cell, mgp, atm, mh)

    @staticmethod
    def calc_magnetic_strf_miv_dom(cell, mgp, atm, mag_dom, mh):
        return _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom(cell, mgp, atm, mag_dom, mh)

    @staticmethod
    def calc_magnetic_strf_tensor(spg, atm, mh):
        return _pycrysfml.FortFuncs_calc_magnetic_strf_tensor(spg, atm, mh)

    @staticmethod
    def gen_satellites(cell, grp, smax, h, ord=None, powder=None, hkl=None):
        return _pycrysfml.FortFuncs_gen_satellites(cell, grp, smax, h, ord, powder, hkl)

    @staticmethod
    def init_err_msfac():
        return _pycrysfml.FortFuncs_init_err_msfac()

    @staticmethod
    def init_mag_structure_factors(reflex, atm, grp, lun=None):
        return _pycrysfml.FortFuncs_init_mag_structure_factors(reflex, atm, grp, lun)

    @staticmethod
    def mag_structure_factors(cell, atm, grp, reflex):
        return _pycrysfml.FortFuncs_mag_structure_factors(cell, atm, grp, reflex)

    @staticmethod
    def write_mag_structure_factors(lun, reflex, grp):
        return _pycrysfml.FortFuncs_write_mag_structure_factors(lun, reflex, grp)

    @staticmethod
    def init_err_optim():
        return _pycrysfml.FortFuncs_init_err_optim()

    @staticmethod
    def init_opt_conditions(opt):
        return _pycrysfml.FortFuncs_init_opt_conditions(opt)

    @staticmethod
    def write_optimization_conditions(ipr, c):
        return _pycrysfml.FortFuncs_write_optimization_conditions(ipr, c)

    @staticmethod
    def write_polar_info(polari, mag_dom, lun=None, info=None):
        return _pycrysfml.FortFuncs_write_polar_info(polari, mag_dom, lun, info)

    @staticmethod
    def write_polar_line(polari, lun=None):
        return _pycrysfml.FortFuncs_write_polar_line(polari, lun)

    @staticmethod
    def init_prof_val():
        return _pycrysfml.FortFuncs_init_prof_val()

    @staticmethod
    def prof_val(eta, gamma, asym1, asym2, twoth, twoth0, dprdt, dprdg, dprde, dprds, dprdd, profval, use_asym, use_hps):
        return _pycrysfml.FortFuncs_prof_val(eta, gamma, asym1, asym2, twoth, twoth0, dprdt, dprdg, dprde, dprds, dprdd, profval, use_asym, use_hps)

    @staticmethod
    def tof_carpenter(dt, d, alfa, beta, gamma, eta, kappa, tof_theta, tof_peak, deriv=None):
        return _pycrysfml.FortFuncs_tof_carpenter(dt, d, alfa, beta, gamma, eta, kappa, tof_theta, tof_peak, deriv)

    @staticmethod
    def tof_jorgensen(dt, alfa, beta, sigma, tof_peak, deriv=None):
        return _pycrysfml.FortFuncs_tof_jorgensen(dt, alfa, beta, sigma, tof_peak, deriv)

    @staticmethod
    def tof_jorgensen_vondreele(dt, alfa, beta, gamma, eta, tof_peak, deriv=None):
        return _pycrysfml.FortFuncs_tof_jorgensen_vondreele(dt, alfa, beta, gamma, eta, tof_peak, deriv)

    @staticmethod
    def hk_equiv(h, k, spacegk, friedel=None):
        return _pycrysfml.FortFuncs_hk_equiv(h, k, spacegk, friedel)

    @staticmethod
    def k_equiv(h, k, latyp):
        return _pycrysfml.FortFuncs_k_equiv(h, k, latyp)

    @staticmethod
    def k_equiv_minus_k(vec, lat):
        return _pycrysfml.FortFuncs_k_equiv_minus_k(vec, lat)

    @staticmethod
    def k_star(k, spacegroup, gk, ext=None):
        return _pycrysfml.FortFuncs_k_star(k, spacegroup, gk, ext)

    @staticmethod
    def write_group_k(gk, lun=None):
        return _pycrysfml.FortFuncs_write_group_k(gk, lun)

    @staticmethod
    def init_err_random():
        return _pycrysfml.FortFuncs_init_err_random()

    @staticmethod
    def random_beta(aa, bb, first, fn_val):
        return _pycrysfml.FortFuncs_random_beta(aa, bb, first, fn_val)

    @staticmethod
    def random_binomial1(n, p, first, ival):
        return _pycrysfml.FortFuncs_random_binomial1(n, p, first, ival)

    @staticmethod
    def random_binomial2(n, pp, first, ival):
        return _pycrysfml.FortFuncs_random_binomial2(n, pp, first, ival)

    @staticmethod
    def random_cauchy(fn_val):
        return _pycrysfml.FortFuncs_random_cauchy(fn_val)

    @staticmethod
    def random_chisq(ndf, first, fn_val):
        return _pycrysfml.FortFuncs_random_chisq(ndf, first, fn_val)

    @staticmethod
    def random_exponential(fn_val):
        return _pycrysfml.FortFuncs_random_exponential(fn_val)

    @staticmethod
    def random_gamma(s, first, fn_val):
        return _pycrysfml.FortFuncs_random_gamma(s, first, fn_val)

    @staticmethod
    def random_gamma1(s, first, fn_val):
        return _pycrysfml.FortFuncs_random_gamma1(s, first, fn_val)

    @staticmethod
    def random_gamma2(s, first, fn_val):
        return _pycrysfml.FortFuncs_random_gamma2(s, first, fn_val)

    @staticmethod
    def random_inv_gauss(h, b, first, fn_val):
        return _pycrysfml.FortFuncs_random_inv_gauss(h, b, first, fn_val)

    @staticmethod
    def random_mvnorm(h, d, f, first, x, ier):
        return _pycrysfml.FortFuncs_random_mvnorm(h, d, f, first, x, ier)

    @staticmethod
    def random_neg_binomial(sk, p, ival):
        return _pycrysfml.FortFuncs_random_neg_binomial(sk, p, ival)

    @staticmethod
    def random_normal(fn_val):
        return _pycrysfml.FortFuncs_random_normal(fn_val)

    @staticmethod
    def random_order(order):
        return _pycrysfml.FortFuncs_random_order(order)

    @staticmethod
    def random_poisson(mt, genpoi):
        return _pycrysfml.FortFuncs_random_poisson(mt, genpoi)

    @staticmethod
    def random_t(m, fn_val):
        return _pycrysfml.FortFuncs_random_t(m, fn_val)

    @staticmethod
    def random_von_mises(k, first, fn_val):
        return _pycrysfml.FortFuncs_random_von_mises(k, first, fn_val)

    @staticmethod
    def random_weibull(a, fn_val):
        return _pycrysfml.FortFuncs_random_weibull(a, fn_val)

    @staticmethod
    def seed_random_number(i_input=None, i_output=None):
        return _pycrysfml.FortFuncs_seed_random_number(i_input, i_output)

    @staticmethod
    def allocate_vparam(n):
        return _pycrysfml.FortFuncs_allocate_vparam(n)

    @staticmethod
    def get_restang_line(line, fatom):
        return _pycrysfml.FortFuncs_get_restang_line(line, fatom)

    @staticmethod
    def get_restdis_line(line, fatom):
        return _pycrysfml.FortFuncs_get_restdis_line(line, fatom)

    @staticmethod
    def get_resttor_line(line, fatom):
        return _pycrysfml.FortFuncs_get_resttor_line(line, fatom)

    @staticmethod
    def init_err_refcodes():
        return _pycrysfml.FortFuncs_init_err_refcodes()

    @staticmethod
    def init_refcodes(fatom=None, fmatom=None, mag_dom=None, molcrys=None, molec=None, model=None):
        return _pycrysfml.FortFuncs_init_refcodes(fatom, fmatom, mag_dom, molcrys, molec, model)

    @staticmethod
    def read_refgcodes_file(file_dat, n_ini, n_end, model, sys=None, iphas=None):
        return _pycrysfml.FortFuncs_read_refgcodes_file(file_dat, n_ini, n_end, model, sys, iphas)

    @staticmethod
    def vstate_to_modelpar(model, mode=None):
        return _pycrysfml.FortFuncs_vstate_to_modelpar(model, mode)

    @staticmethod
    def write_info_refgcodes(model, iunit=None):
        return _pycrysfml.FortFuncs_write_info_refgcodes(model, iunit)

    @staticmethod
    def write_info_refparams(iunit=None):
        return _pycrysfml.FortFuncs_write_info_refparams(iunit)

    @staticmethod
    def write_restraints_obscalc(a, iunit=None):
        return _pycrysfml.FortFuncs_write_restraints_obscalc(a, iunit)

    @staticmethod
    def get_maxnumref(sintlmax, volcell, sintlmin=None, mult=None):
        return _pycrysfml.FortFuncs_get_maxnumref(sintlmax, volcell, sintlmin, mult)

    @staticmethod
    def mhkl_absent(h, shubg):
        return _pycrysfml.FortFuncs_mhkl_absent(h, shubg)

    @staticmethod
    def init_err_refl():
        return _pycrysfml.FortFuncs_init_err_refl()

    @staticmethod
    def init_reflist(reflex, n=None):
        return _pycrysfml.FortFuncs_init_reflist(reflex, n)

    @staticmethod
    def write_asu(spacegroup, iunit=None):
        return _pycrysfml.FortFuncs_write_asu(spacegroup, iunit)

    @staticmethod
    def write_reflist_info(rfl, iunit=None, mode=None):
        return _pycrysfml.FortFuncs_write_reflist_info(rfl, iunit, mode)

    @staticmethod
    def angs_4c_bisecting(wave, z1, tth, om, ch, ph, ierr):
        return _pycrysfml.FortFuncs_angs_4c_bisecting(wave, z1, tth, om, ch, ph, ierr)

    @staticmethod
    def calang(h, tteta, om, ch, ph, ierr, wav=None, ubm=None, geom=None):
        return _pycrysfml.FortFuncs_calang(h, tteta, om, ch, ph, ierr, wav, ubm, geom)

    @staticmethod
    def calc_om_chi_phi(vhkl, vlab1, psi, ub, om, ch, ph, ierr):
        return _pycrysfml.FortFuncs_calc_om_chi_phi(vhkl, vlab1, psi, ub, om, ch, ph, ierr)

    @staticmethod
    def calc_psi(vhkl, vlab1, om, ch, ph, ub, psi, ierr):
        return _pycrysfml.FortFuncs_calc_psi(vhkl, vlab1, om, ch, ph, ub, psi, ierr)

    @staticmethod
    def cell_fr_ub(ub, ipr=None, dcel=None, rcel=None):
        return _pycrysfml.FortFuncs_cell_fr_ub(ub, ipr, dcel, rcel)

    @staticmethod
    def chi_mat(chi, dum):
        return _pycrysfml.FortFuncs_chi_mat(chi, dum)

    @staticmethod
    def psd_convert(mpsd, gamm, gamp, nup, xobs, zobs, cath, anod, ierr):
        return _pycrysfml.FortFuncs_psd_convert(mpsd, gamm, gamp, nup, xobs, zobs, cath, anod, ierr)

    @staticmethod
    def d19psd(mpsd, ga, nu, cath, anod, ierr):
        return _pycrysfml.FortFuncs_d19psd(mpsd, ga, nu, cath, anod, ierr)

    @staticmethod
    def dspace(wave, vhkl, cell, ds, th, ierr):
        return _pycrysfml.FortFuncs_dspace(wave, vhkl, cell, ds, th, ierr)

    @staticmethod
    def equatorial_chi_phi(z1, ch, ph):
        return _pycrysfml.FortFuncs_equatorial_chi_phi(z1, ch, ph)

    @staticmethod
    def fixdnu(wave, z1, nu, ch, ph, ga, om, ierr):
        return _pycrysfml.FortFuncs_fixdnu(wave, z1, nu, ch, ph, ga, om, ierr)

    @staticmethod
    def flat_cone_vertdet(wave, z1, ub, vrho, rho, ch, ph, ga, om, nu, ierr):
        return _pycrysfml.FortFuncs_flat_cone_vertdet(wave, z1, ub, vrho, rho, ch, ph, ga, om, nu, ierr)

    @staticmethod
    def genb(c, b):
        return _pycrysfml.FortFuncs_genb(c, b)

    @staticmethod
    def genub(b, h1, h2, h1o, h2o, ub, ierr):
        return _pycrysfml.FortFuncs_genub(b, h1, h2, h1o, h2o, ub, ierr)

    @staticmethod
    def get_angs_nb(wave, z1, ga, om, nu, ierr):
        return _pycrysfml.FortFuncs_get_angs_nb(wave, z1, ga, om, nu, ierr)

    @staticmethod
    def get_dspacing_theta(wave, z1, ds, th, ierr):
        return _pycrysfml.FortFuncs_get_dspacing_theta(wave, z1, ds, th, ierr)

    @staticmethod
    def get_gaomnu_frchiphi(wave, z1, ch, ph, ga, om, nu, ierr):
        return _pycrysfml.FortFuncs_get_gaomnu_frchiphi(wave, z1, ch, ph, ga, om, nu, ierr)

    @staticmethod
    def get_ub_from_hkl_hkl_omega(wave, cell, h1, h2, omega, ub, ok, mess):
        return _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega(wave, cell, h1, h2, omega, ub, ok, mess)

    @staticmethod
    def get_ub_from_uvw_hkl_omega(wave, cell, zone_axis, h1, omega, ub, ok, mess):
        return _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega(wave, cell, zone_axis, h1, omega, ub, ok, mess)

    @staticmethod
    def get_waveganu_frz4(z4, wave, ga, nu, ierr):
        return _pycrysfml.FortFuncs_get_waveganu_frz4(z4, wave, ga, nu, ierr)

    @staticmethod
    def get_z1_d9angls(wave, ttheta, om, ch, ph, z1):
        return _pycrysfml.FortFuncs_get_z1_d9angls(wave, ttheta, om, ch, ph, z1)

    @staticmethod
    def normal(v, ierr):
        return _pycrysfml.FortFuncs_normal(v, ierr)

    @staticmethod
    def phi_mat(phi, dum):
        return _pycrysfml.FortFuncs_phi_mat(phi, dum)

    @staticmethod
    def psi_mat(psi, dum):
        return _pycrysfml.FortFuncs_psi_mat(psi, dum)

    @staticmethod
    def read_twinlaw(twin, read_ok, lun=None, fich_cfl=None):
        return _pycrysfml.FortFuncs_read_twinlaw(twin, read_ok, lun, fich_cfl)

    @staticmethod
    def refvec(vhkl, ub, vs, vz, ierr):
        return _pycrysfml.FortFuncs_refvec(vhkl, ub, vs, vz, ierr)

    @staticmethod
    def s4cnb(angl_4c, angl_nb, ierr):
        return _pycrysfml.FortFuncs_s4cnb(angl_4c, angl_nb, ierr)

    @staticmethod
    def set_psd(dist=None, cg=None, ag=None, nh=None, nv=None, ip=None):
        return _pycrysfml.FortFuncs_set_psd(dist, cg, ag, nh, nv, ip)

    @staticmethod
    def snb4c(angl_nb, angl_4c):
        return _pycrysfml.FortFuncs_snb4c(angl_nb, angl_4c)

    @staticmethod
    def sxdpsd(mpsd, gamm, wave, nup, gamp, xobs, zobs, xcel, time, zcel, ierr):
        return _pycrysfml.FortFuncs_sxdpsd(mpsd, gamm, wave, nup, gamp, xobs, zobs, xcel, time, zcel, ierr)

    @staticmethod
    def triple(v1, v2, tv, ierr):
        return _pycrysfml.FortFuncs_triple(v1, v2, tv, ierr)

    @staticmethod
    def write_twinlaw(twin, lun, cell=None):
        return _pycrysfml.FortFuncs_write_twinlaw(twin, lun, cell)

    @staticmethod
    def z1frfc(wave, tth, om, ch, ph, z1):
        return _pycrysfml.FortFuncs_z1frfc(wave, tth, om, ch, ph, z1)

    @staticmethod
    def z1frmd(wave, ch, ph, ga, om, nu, z1):
        return _pycrysfml.FortFuncs_z1frmd(wave, ch, ph, ga, om, nu, z1)

    @staticmethod
    def z1frnb(wave, ga, om, nu, z1):
        return _pycrysfml.FortFuncs_z1frnb(wave, ga, om, nu, z1)

    @staticmethod
    def z1frz2(z2, ph, z1):
        return _pycrysfml.FortFuncs_z1frz2(z2, ph, z1)

    @staticmethod
    def z1frz3(z3, ch, ph, z1):
        return _pycrysfml.FortFuncs_z1frz3(z3, ch, ph, z1)

    @staticmethod
    def z1frz4(z4, om, ch, ph, z1):
        return _pycrysfml.FortFuncs_z1frz4(z4, om, ch, ph, z1)

    @staticmethod
    def z2frz1(z1, ph, z2):
        return _pycrysfml.FortFuncs_z2frz1(z1, ph, z2)

    @staticmethod
    def z3frz1(z1, ch, ph, z3):
        return _pycrysfml.FortFuncs_z3frz1(z1, ch, ph, z3)

    @staticmethod
    def z4frgn(wave, ga, nu, z4):
        return _pycrysfml.FortFuncs_z4frgn(wave, ga, nu, z4)

    @staticmethod
    def z4frz1(z1, om, ch, ph, z4):
        return _pycrysfml.FortFuncs_z4frz1(z1, om, ch, ph, z4)

    @staticmethod
    def additional_scattering_factors(fil, add_scatt, ok, mess):
        return _pycrysfml.FortFuncs_additional_scattering_factors(fil, add_scatt, ok, mess)

    @staticmethod
    def allocate_scattering_species(n, scf):
        return _pycrysfml.FortFuncs_allocate_scattering_species(n, scf)

    @staticmethod
    def calc_mag_structure_factor(mode, hm, cell, grp, atm, scf, strf, magonly=None, mdom=None, tdom=None, twin=None):
        return _pycrysfml.FortFuncs_calc_mag_structure_factor(mode, hm, cell, grp, atm, scf, strf, magonly, mdom, tdom, twin)

    @staticmethod
    def calc_strfactor(mode, rad, nn, sn, atm, grp, sf2):
        return _pycrysfml.FortFuncs_calc_strfactor(mode, rad, nn, sn, atm, grp, sf2)

    @staticmethod
    def calc_hkl_strfactor(mode, rad, hn, sn, atm, grp, sf2):
        return _pycrysfml.FortFuncs_calc_hkl_strfactor(mode, rad, hn, sn, atm, grp, sf2)

    @staticmethod
    def init_calc_hkl_strfactors(atm, mode=None, _lambda=None, lun=None):
        return _pycrysfml.FortFuncs_init_calc_hkl_strfactors(atm, mode, _lambda, lun)

    @staticmethod
    def init_calc_strfactors(reflex, atm, grp, mode=None, _lambda=None, lun=None):
        return _pycrysfml.FortFuncs_init_calc_strfactors(reflex, atm, grp, mode, _lambda, lun)

    @staticmethod
    def init_structure_factors(reflex, atm, grp, mode=None, _lambda=None, lun=None):
        return _pycrysfml.FortFuncs_init_structure_factors(reflex, atm, grp, mode, _lambda, lun)

    @staticmethod
    def magnetic_structure_factors(cell, atm, grp, maxs, reflex, stf, lun=None):
        return _pycrysfml.FortFuncs_magnetic_structure_factors(cell, atm, grp, maxs, reflex, stf, lun)

    @staticmethod
    def structure_factors(atm, grp, reflex, mode=None, _lambda=None):
        return _pycrysfml.FortFuncs_structure_factors(atm, grp, reflex, mode, _lambda)

    @staticmethod
    def cubic_harm_ang(l, m, theta, phi):
        return _pycrysfml.FortFuncs_cubic_harm_ang(l, m, theta, phi)

    @staticmethod
    def cubic_harm_ucvec(l, m, u):
        return _pycrysfml.FortFuncs_cubic_harm_ucvec(l, m, u)

    @staticmethod
    def int_slater_bessel(n, l, z, s):
        return _pycrysfml.FortFuncs_int_slater_bessel(n, l, z, s)

    @staticmethod
    def real_spher_harm_ang(l, m, p, theta, phi):
        return _pycrysfml.FortFuncs_real_spher_harm_ang(l, m, p, theta, phi)

    @staticmethod
    def real_spher_harm_ucvec(l, m, p, u):
        return _pycrysfml.FortFuncs_real_spher_harm_ucvec(l, m, p, u)

    @staticmethod
    def real_spher_harmcharge_ucvec(l, m, p, u):
        return _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec(l, m, p, u)

    @staticmethod
    def init_err_spher():
        return _pycrysfml.FortFuncs_init_err_spher()

    @staticmethod
    def pikout_lj_cubic(group, lj, ncoef, lun=None):
        return _pycrysfml.FortFuncs_pikout_lj_cubic(group, lj, ncoef, lun)

    @staticmethod
    def get_generators(spg, gener):
        return _pycrysfml.FortFuncs_get_generators(spg, gener)

    @staticmethod
    def remove_spgr_info():
        return _pycrysfml.FortFuncs_remove_spgr_info()

    @staticmethod
    def remove_system_equiv():
        return _pycrysfml.FortFuncs_remove_system_equiv()

    @staticmethod
    def remove_wyckoff_info():
        return _pycrysfml.FortFuncs_remove_wyckoff_info()

    @staticmethod
    def set_spgr_info():
        return _pycrysfml.FortFuncs_set_spgr_info()

    @staticmethod
    def set_system_equiv():
        return _pycrysfml.FortFuncs_set_system_equiv()

    @staticmethod
    def set_wyckoff_info():
        return _pycrysfml.FortFuncs_set_wyckoff_info()

    @staticmethod
    def axes_rotation(r):
        return _pycrysfml.FortFuncs_axes_rotation(r)

    @staticmethod
    def get_laue_num(laueclass):
        return _pycrysfml.FortFuncs_get_laue_num(laueclass)

    @staticmethod
    def get_occ_site(pto, spg):
        return _pycrysfml.FortFuncs_get_occ_site(pto, spg)

    @staticmethod
    def get_pointgroup_num(pgname):
        return _pycrysfml.FortFuncs_get_pointgroup_num(pgname)

    @staticmethod
    def lattice_trans(v, lat):
        return _pycrysfml.FortFuncs_lattice_trans(v, lat)

    @staticmethod
    def spgr_equal(spacegroup1, spacegroup2):
        return _pycrysfml.FortFuncs_spgr_equal(spacegroup1, spacegroup2)

    @staticmethod
    def allocate_lattice_centring(latt, n, tinv=None):
        return _pycrysfml.FortFuncs_allocate_lattice_centring(latt, n, tinv)

    @staticmethod
    def check_generator(gen, ok, symbol=None):
        return _pycrysfml.FortFuncs_check_generator(gen, ok, symbol)

    @staticmethod
    def decodmatmag(sim, xyzstring):
        return _pycrysfml.FortFuncs_decodmatmag(sim, xyzstring)

    @staticmethod
    def get_laue_str(ilaue, str):
        return _pycrysfml.FortFuncs_get_laue_str(ilaue, str)

    @staticmethod
    def get_pointgroup_str(ipg, str):
        return _pycrysfml.FortFuncs_get_pointgroup_str(ipg, str)

    @staticmethod
    def get_seitz_symbol(iop, itim, tr, seitz_symb):
        return _pycrysfml.FortFuncs_get_seitz_symbol(iop, itim, tr, seitz_symb)

    @staticmethod
    def get_setting_info(mat, orig, setting, matkind=None):
        return _pycrysfml.FortFuncs_get_setting_info(mat, orig, setting, matkind)

    @staticmethod
    def get_shubnikov_operator_symbol(mat, rot, tr, shop_symb, mcif=None, invt=None):
        return _pycrysfml.FortFuncs_get_shubnikov_operator_symbol(mat, rot, tr, shop_symb, mcif, invt)

    @staticmethod
    def get_string_resolv(t, x, ix, symb):
        return _pycrysfml.FortFuncs_get_string_resolv(t, x, ix, symb)

    @staticmethod
    def get_symel(sim, xyzstring):
        return _pycrysfml.FortFuncs_get_symel(sim, xyzstring)

    @staticmethod
    def get_symkov(sim, xyzstring):
        return _pycrysfml.FortFuncs_get_symkov(sim, xyzstring)

    @staticmethod
    def get_trasfm_symbol(mat, tr, abc_symb, oposite=None):
        return _pycrysfml.FortFuncs_get_trasfm_symbol(mat, tr, abc_symb, oposite)

    @staticmethod
    def get_transl_symbol(tr, transl_symb):
        return _pycrysfml.FortFuncs_get_transl_symbol(tr, transl_symb)

    @staticmethod
    def init_err_symm():
        return _pycrysfml.FortFuncs_init_err_symm()

    @staticmethod
    def init_magnetic_space_group_type(mgp):
        return _pycrysfml.FortFuncs_init_magnetic_space_group_type(mgp)

    @staticmethod
    def inverse_symm(r, t, s, u):
        return _pycrysfml.FortFuncs_inverse_symm(r, t, s, u)

    @staticmethod
    def latsym(symb, numl=None):
        return _pycrysfml.FortFuncs_latsym(symb, numl)

    @staticmethod
    def read_bin_spacegroup(spg, lun, ok):
        return _pycrysfml.FortFuncs_read_bin_spacegroup(spg, lun, ok)

    @staticmethod
    def read_msymm(info, sim, p_mag, ctrl=None):
        return _pycrysfml.FortFuncs_read_msymm(info, sim, p_mag, ctrl)

    @staticmethod
    def read_symtrans_code(code, n, tr):
        return _pycrysfml.FortFuncs_read_symtrans_code(code, n, tr)

    @staticmethod
    def read_xsym(info, istart, sim, tt=None, ctrl=None):
        return _pycrysfml.FortFuncs_read_xsym(info, istart, sim, tt, ctrl)

    @staticmethod
    def searchop(sim, i1, i2, isl):
        return _pycrysfml.FortFuncs_searchop(sim, i1, i2, isl)

    @staticmethod
    def set_spacegroup(spacegen, spacegroup, ngen=None, mode=None, force_hall=None):
        return _pycrysfml.FortFuncs_set_spacegroup(spacegen, spacegroup, ngen, mode, force_hall)

    @staticmethod
    def similar_transf_sg(mat, orig, spg, spgn, matkind=None, fix_lat=None):
        return _pycrysfml.FortFuncs_similar_transf_sg(mat, orig, spg, spgn, matkind, fix_lat)

    @staticmethod
    def sym_prod_st(syma, symb, symab, modlat=None):
        return _pycrysfml.FortFuncs_sym_prod_st(syma, symb, symab, modlat)

    @staticmethod
    def write_bin_spacegroup(spg, lun):
        return _pycrysfml.FortFuncs_write_bin_spacegroup(spg, lun)

    @staticmethod
    def write_magnetic_space_group(sg, iunit=None, full=None):
        return _pycrysfml.FortFuncs_write_magnetic_space_group(sg, iunit, full)

    @staticmethod
    def write_spacegroup(spacegroup, iunit=None, full=None):
        return _pycrysfml.FortFuncs_write_spacegroup(spacegroup, iunit, full)

    @staticmethod
    def write_sym(lun, indx, sim, tt, p_mag, mag):
        return _pycrysfml.FortFuncs_write_sym(lun, indx, sim, tt, p_mag, mag)

    @staticmethod
    def write_symtrans_code(n, tr, code):
        return _pycrysfml.FortFuncs_write_symtrans_code(n, tr, code)

    @staticmethod
    def write_wyckoff(wyckoff, spg, lun=None, sorting=None):
        return _pycrysfml.FortFuncs_write_wyckoff(wyckoff, spg, lun, sorting)

    @staticmethod
    def copy_ns_spg_to_spg(spgn, spg):
        return _pycrysfml.FortFuncs_copy_ns_spg_to_spg(spgn, spg)

    @staticmethod
    def alloc_mhlist_array(list):
        return _pycrysfml.FortFuncs_alloc_mhlist_array(list)

    @staticmethod
    def alloc_refllist_array(list):
        return _pycrysfml.FortFuncs_alloc_refllist_array(list)

    @staticmethod
    def reflct_array_ctor(array):
        return _pycrysfml.FortFuncs_reflct_array_ctor(array)

    @staticmethod
    def reflct_append(array, rflctn):
        return _pycrysfml.FortFuncs_reflct_append(array, rflctn)

    @staticmethod
    def readxtal_structure_file(filenam, cell, spg, a, mode=None, iphase=None, job_info=None, file_list=None, cframe=None):
        return _pycrysfml.FortFuncs_readxtal_structure_file(filenam, cell, spg, a, mode, iphase, job_info, file_list, cframe)

    @staticmethod
    def hkls_r(h, crystalcell):
        return _pycrysfml.FortFuncs_hkls_r(h, crystalcell)

    @staticmethod
    def hklgen_sxtal_reflection(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord=None, hlim=None):
        return _pycrysfml.FortFuncs_hklgen_sxtal_reflection(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord, hlim)

    @staticmethod
    def hklgen_sxtal_list(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord=None, hlim=None):
        return _pycrysfml.FortFuncs_hklgen_sxtal_list(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord, hlim)

    @staticmethod
    def hkluni_reflection(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order=None):
        return _pycrysfml.FortFuncs_hkluni_reflection(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order)

    @staticmethod
    def hkluni_refllist(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order=None):
        return _pycrysfml.FortFuncs_hkluni_refllist(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order)

    @staticmethod
    def read_mag_cfl_file(file_cfl, n_ini, n_end, mgp, am, sgo=None, mag_dom=None, cell=None):
        return _pycrysfml.FortFuncs_read_mag_cfl_file(file_cfl, n_ini, n_end, mgp, am, sgo, mag_dom, cell)

    @staticmethod
    def read_mag_mcif_file(file_mcif, mcell, mgp, am):
        return _pycrysfml.FortFuncs_read_mag_mcif_file(file_mcif, mcell, mgp, am)

    @staticmethod
    def calcgaussian(x, h):
        return _pycrysfml.FortFuncs_calcgaussian(x, h)

    @staticmethod
    def calchat(x, h):
        return _pycrysfml.FortFuncs_calchat(x, h)

    @staticmethod
    def calclorentzian(x, h):
        return _pycrysfml.FortFuncs_calclorentzian(x, h)

    @staticmethod
    def calcpseudovoigt(x, h, eta):
        return _pycrysfml.FortFuncs_calcpseudovoigt(x, h, eta)

    @staticmethod
    def gausspeak(x, h, output):
        return _pycrysfml.FortFuncs_gausspeak(x, h, output)

    @staticmethod
    def read_ill_data(filename, dif_pat, mode=None):
        return _pycrysfml.FortFuncs_read_ill_data(filename, dif_pat, mode)

    @staticmethod
    def printbasis(matm):
        return _pycrysfml.FortFuncs_printbasis(matm)

    @staticmethod
    def atom_type_ctor(atom_type_param, locc_param, lvarf_param, utype_param, mbiso_param, occ_param, charge_param, sfacsymb_param, lab_param, mvarf_param, moment_param, lu_param, mocc_param, active_param, mult_param, x_std_param, u_std_param, nvar_param, wyck_param, biso_std_param, lbiso_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, mu_param, lx_param, chemsymb_param, ind_param, thtype_param, atminfo_param, ueq_param, mx_param):
        return _pycrysfml.FortFuncs_atom_type_ctor(atom_type_param, locc_param, lvarf_param, utype_param, mbiso_param, occ_param, charge_param, sfacsymb_param, lab_param, mvarf_param, moment_param, lu_param, mocc_param, active_param, mult_param, x_std_param, u_std_param, nvar_param, wyck_param, biso_std_param, lbiso_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, mu_param, lx_param, chemsymb_param, ind_param, thtype_param, atminfo_param, ueq_param, mx_param)

    @staticmethod
    def matom_type_ctor(matom_type_param, mmphas_param, locc_param, ski_std_param, lvarf_param, utype_param, mbiso_param, occ_param, lbas_param, charge_param, sfacsymb_param, imat_param, lmphas_param, mphas_param, spher_ski_param, skr_param, lskr_param, lab_param, moment_param, lu_param, mocc_param, active_param, ski_param, mult_param, spher_skr_std_param, x_std_param, u_std_param, lski_param, nvar_param, wyck_param, biso_std_param, lbiso_param, mphas_std_param, mvarf_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, nvk_param, mbas_param, spher_ski_std_param, spher_skr_param, mski_param, skr_std_param, mu_param, mskr_param, lx_param, chemsymb_param, cbas_param, ind_param, cbas_std_param, thtype_param, atminfo_param, ueq_param, mx_param):
        return _pycrysfml.FortFuncs_matom_type_ctor(matom_type_param, mmphas_param, locc_param, ski_std_param, lvarf_param, utype_param, mbiso_param, occ_param, lbas_param, charge_param, sfacsymb_param, imat_param, lmphas_param, mphas_param, spher_ski_param, skr_param, lskr_param, lab_param, moment_param, lu_param, mocc_param, active_param, ski_param, mult_param, spher_skr_std_param, x_std_param, u_std_param, lski_param, nvar_param, wyck_param, biso_std_param, lbiso_param, mphas_std_param, mvarf_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, nvk_param, mbas_param, spher_ski_std_param, spher_skr_param, mski_param, skr_std_param, mu_param, mskr_param, lx_param, chemsymb_param, cbas_param, ind_param, cbas_std_param, thtype_param, atminfo_param, ueq_param, mx_param)

    @staticmethod
    def crystal_cell_type_ctor(crystal_cell_type_param, lang_param, rcellvol_param, cell_std_param, ang_param, bl_minv_param, gr_param, cr_orth_cel_param, bl_m_param, orth_cr_cel_param, carttype_param, rang_param, rcell_param, cell_param, gd_param, cellvol_param, ang_std_param, lcell_param):
        return _pycrysfml.FortFuncs_crystal_cell_type_ctor(crystal_cell_type_param, lang_param, rcellvol_param, cell_std_param, ang_param, bl_minv_param, gr_param, cr_orth_cel_param, bl_m_param, orth_cr_cel_param, carttype_param, rang_param, rcell_param, cell_param, gd_param, cellvol_param, ang_std_param, lcell_param)

    @staticmethod
    def get_twofold_axes_a(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_a(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_a(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_a(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_c(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_c(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_c(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_c(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_b(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_b(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_b(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_b(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_maxes(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_maxes(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_maxes(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_maxes(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_ntwo(obj_var):
        return _pycrysfml.FortFuncs_get_twofold_axes_ntwo(obj_var)

    @staticmethod
    def set_twofold_axes_ntwo(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_ntwo(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_cross(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_cross(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_cross(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_cross(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_tol(obj_var):
        return _pycrysfml.FortFuncs_get_twofold_axes_tol(obj_var)

    @staticmethod
    def set_twofold_axes_tol(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_tol(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_rtwofold(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_rtwofold(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_rtwofold(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_rtwofold(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_caxes(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_caxes(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_caxes(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_caxes(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_dot(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_dot(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_dot(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_dot(obj_var, new_value)

    @staticmethod
    def get_twofold_axes_dtwofold(obj_var, output_value):
        return _pycrysfml.FortFuncs_get_twofold_axes_dtwofold(obj_var, output_value)

    @staticmethod
    def set_twofold_axes_dtwofold(obj_var, new_value):
        return _pycrysfml.FortFuncs_set_twofold_axes_dtwofold(obj_var, new_value)

    @staticmethod
    def twofold_axes_type_ctor(twofold_axes_type_param, a_param, c_param, b_param, maxes_param, ntwo_param, cross_param, tol_param, rtwofold_param, caxes_param, dot_param, dtwofold_param):
        return _pycrysfml.FortFuncs_twofold_axes_type_ctor(twofold_axes_type_param, a_param, c_param, b_param, maxes_param, ntwo_param, cross_param, tol_param, rtwofold_param, caxes_param, dot_param, dtwofold_param)

    @staticmethod
    def zone_axis_type_ctor(zone_axis_type_param, nlayer_param, rx_param, ry_param, uvw_param):
        return _pycrysfml.FortFuncs_zone_axis_type_ctor(zone_axis_type_param, nlayer_param, rx_param, ry_param, uvw_param)

    @staticmethod
    def interval_type_ctor(interval_type_param, maxb_param, mina_param):
        return _pycrysfml.FortFuncs_interval_type_ctor(interval_type_param, maxb_param, mina_param)

    @staticmethod
    def msym_oper_type_ctor(msym_oper_type_param, phas_param, rot_param):
        return _pycrysfml.FortFuncs_msym_oper_type_ctor(msym_oper_type_param, phas_param, rot_param)

    @staticmethod
    def magnetic_group_type_ctor(magnetic_group_type_param, tinv_param, shubnikov_param, spg_param):
        return _pycrysfml.FortFuncs_magnetic_group_type_ctor(magnetic_group_type_param, tinv_param, shubnikov_param, spg_param)

    @staticmethod
    def reflect_type_ctor(reflect_type_param, h_param, s_param, mult_param):
        return _pycrysfml.FortFuncs_reflect_type_ctor(reflect_type_param, h_param, s_param, mult_param)

    @staticmethod
    def reflection_type_ctor(reflection_type_param, a_param, aa_param, b_param, bb_param, h_param, sfo_param, s_param, fc_param, w_param, phase_param, mult_param, fo_param):
        return _pycrysfml.FortFuncs_reflection_type_ctor(reflection_type_param, a_param, aa_param, b_param, bb_param, h_param, sfo_param, s_param, fc_param, w_param, phase_param, mult_param, fo_param)

    @staticmethod
    def ns_sym_oper_type_ctor(ns_sym_oper_type_param, tr_param, rot_param):
        return _pycrysfml.FortFuncs_ns_sym_oper_type_ctor(ns_sym_oper_type_param, tr_param, rot_param)

    @staticmethod
    def sym_oper_type_ctor(sym_oper_type_param, tr_param, rot_param):
        return _pycrysfml.FortFuncs_sym_oper_type_ctor(sym_oper_type_param, tr_param, rot_param)

    @staticmethod
    def get_command(command=None, length=None, status=None):
        return _pycrysfml.FortFuncs_get_command(command, length, status)

    @staticmethod
    def get_command_argument(number, value=None, length=None, status=None):
        return _pycrysfml.FortFuncs_get_command_argument(number, value, length, status)

    @staticmethod
    def get_environment_variable(name, value=None, length=None, status=None, trim_name=None):
        return _pycrysfml.FortFuncs_get_environment_variable(name, value, length, status, trim_name)

    def __init__(self):
        _pycrysfml.FortFuncs_swiginit(self, _pycrysfml.new_FortFuncs())
    __swig_destroy__ = _pycrysfml.delete_FortFuncs

# Register FortFuncs in _pycrysfml:
_pycrysfml.FortFuncs_swigregister(FortFuncs)

def FortFuncs_equiv_atm(nam1, nam2, nameat):
    return _pycrysfml.FortFuncs_equiv_atm(nam1, nam2, nameat)

def FortFuncs_allocate_atoms_cell(nasu, mul, dmax, ac):
    return _pycrysfml.FortFuncs_allocate_atoms_cell(nasu, mul, dmax, ac)

def FortFuncs_allocate_atom_list(n, a, fail=None):
    return _pycrysfml.FortFuncs_allocate_atom_list(n, a, fail)

def FortFuncs_allocate_matom_list(n, a, mfield=None, dirf=None):
    return _pycrysfml.FortFuncs_allocate_matom_list(n, a, mfield, dirf)

def FortFuncs_atlist1_extencell_atlist2(spg, a, c, conven):
    return _pycrysfml.FortFuncs_atlist1_extencell_atlist2(spg, a, c, conven)

def FortFuncs_atoms_cell_to_list(ac, a):
    return _pycrysfml.FortFuncs_atoms_cell_to_list(ac, a)

def FortFuncs_atom_list_to_cell(a, ac):
    return _pycrysfml.FortFuncs_atom_list_to_cell(a, ac)

def FortFuncs_atom_uequi_list(cell, ac):
    return _pycrysfml.FortFuncs_atom_uequi_list(cell, ac)

def FortFuncs_copy_atom_list(a, ac):
    return _pycrysfml.FortFuncs_copy_atom_list(a, ac)

def FortFuncs_deallocate_atoms_cell(ac):
    return _pycrysfml.FortFuncs_deallocate_atoms_cell(ac)

def FortFuncs_deallocate_atom_list(a):
    return _pycrysfml.FortFuncs_deallocate_atom_list(a)

def FortFuncs_deallocate_matom_list(a):
    return _pycrysfml.FortFuncs_deallocate_matom_list(a)

def FortFuncs_get_atom_2nd_tensor_ctr(x, tensval, spgr, codini, icodes, multip, ord=None, ipr=None):
    return _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr(x, tensval, spgr, codini, icodes, multip, ord, ipr)

def FortFuncs_init_atom_type(a):
    return _pycrysfml.FortFuncs_init_atom_type(a)

def FortFuncs_init_matom_type(a):
    return _pycrysfml.FortFuncs_init_matom_type(a)

def FortFuncs_init_err_atmd():
    return _pycrysfml.FortFuncs_init_err_atmd()

def FortFuncs_multi(lun, iprin, conven, spg, a, ac):
    return _pycrysfml.FortFuncs_multi(lun, iprin, conven, spg, a, ac)

def FortFuncs_read_bin_atom_list(ats, lun, ok):
    return _pycrysfml.FortFuncs_read_bin_atom_list(ats, lun, ok)

def FortFuncs_write_atom_list(ats, level=None, lun=None, cell=None):
    return _pycrysfml.FortFuncs_write_atom_list(ats, level, lun, cell)

def FortFuncs_write_bin_atom_list(ats, lun):
    return _pycrysfml.FortFuncs_write_bin_atom_list(ats, lun)

def FortFuncs_deallocate_ap_table():
    return _pycrysfml.FortFuncs_deallocate_ap_table()

def FortFuncs_deallocate_bvel_table():
    return _pycrysfml.FortFuncs_deallocate_bvel_table()

def FortFuncs_deallocate_bvs_table():
    return _pycrysfml.FortFuncs_deallocate_bvs_table()

def FortFuncs_deallocate_sbvs_table():
    return _pycrysfml.FortFuncs_deallocate_sbvs_table()

def FortFuncs_set_atomic_properties():
    return _pycrysfml.FortFuncs_set_atomic_properties()

def FortFuncs_set_bvel_table():
    return _pycrysfml.FortFuncs_set_bvel_table()

def FortFuncs_set_bvs_table():
    return _pycrysfml.FortFuncs_set_bvs_table()

def FortFuncs_set_sbvs_table():
    return _pycrysfml.FortFuncs_set_sbvs_table()

def FortFuncs_set_common_oxidation_states_table():
    return _pycrysfml.FortFuncs_set_common_oxidation_states_table()

def FortFuncs_set_oxidation_states_table():
    return _pycrysfml.FortFuncs_set_oxidation_states_table()

def FortFuncs_set_pauling_electronegativity():
    return _pycrysfml.FortFuncs_set_pauling_electronegativity()

def FortFuncs_init_err_bond():
    return _pycrysfml.FortFuncs_init_err_bond()

def FortFuncs_remove_bonds_table():
    return _pycrysfml.FortFuncs_remove_bonds_table()

def FortFuncs_set_bonds_table():
    return _pycrysfml.FortFuncs_set_bonds_table()

def FortFuncs_get_atomic_mass(atm, mass):
    return _pycrysfml.FortFuncs_get_atomic_mass(atm, mass)

def FortFuncs_get_atomic_vol(atm, vol):
    return _pycrysfml.FortFuncs_get_atomic_vol(atm, vol)

def FortFuncs_get_chemsymb(label, chemsymb, z=None):
    return _pycrysfml.FortFuncs_get_chemsymb(label, chemsymb, z)

def FortFuncs_get_covalent_radius(nam, rad):
    return _pycrysfml.FortFuncs_get_covalent_radius(nam, rad)

def FortFuncs_get_fermi_length(nam, b):
    return _pycrysfml.FortFuncs_get_fermi_length(nam, b)

def FortFuncs_get_inc_xs(nam, u):
    return _pycrysfml.FortFuncs_get_inc_xs(nam, u)

def FortFuncs_get_abs_xs(nam, u):
    return _pycrysfml.FortFuncs_get_abs_xs(nam, u)

def FortFuncs_get_ionic_radius(nam, valence, rad):
    return _pycrysfml.FortFuncs_get_ionic_radius(nam, valence, rad)

def FortFuncs_remove_chem_info():
    return _pycrysfml.FortFuncs_remove_chem_info()

def FortFuncs_remove_delta_fp_fpp():
    return _pycrysfml.FortFuncs_remove_delta_fp_fpp()

def FortFuncs_remove_magnetic_form():
    return _pycrysfml.FortFuncs_remove_magnetic_form()

def FortFuncs_remove_xray_form():
    return _pycrysfml.FortFuncs_remove_xray_form()

def FortFuncs_set_chem_info():
    return _pycrysfml.FortFuncs_set_chem_info()

def FortFuncs_set_delta_fp_fpp():
    return _pycrysfml.FortFuncs_set_delta_fp_fpp()

def FortFuncs_set_magnetic_form():
    return _pycrysfml.FortFuncs_set_magnetic_form()

def FortFuncs_set_xray_form():
    return _pycrysfml.FortFuncs_set_xray_form()

def FortFuncs_allocate_atoms_conf_list(n, a):
    return _pycrysfml.FortFuncs_allocate_atoms_conf_list(n, a)

def FortFuncs_calc_bvs(a, ipr=None, n_bvsm=None, filecod=None, info_string=None):
    return _pycrysfml.FortFuncs_calc_bvs(a, ipr, n_bvsm, filecod, info_string)

def FortFuncs_calc_map_bvel(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta=None, vol=None, emin=None, npix=None, outp=None):
    return _pycrysfml.FortFuncs_calc_map_bvel(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta, vol, emin, npix, outp)

def FortFuncs_calc_map_bvs(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta=None, vol=None):
    return _pycrysfml.FortFuncs_calc_map_bvs(a, spg, cell, filecod, ndimx, ndimy, ndimz, atname, drmax, delta, vol)

def FortFuncs_cost_bvs(a, gii, erep=None, gic=None):
    return _pycrysfml.FortFuncs_cost_bvs(a, gii, erep, gic)

def FortFuncs_cost_bvs_coulombrep(a, gii, erep):
    return _pycrysfml.FortFuncs_cost_bvs_coulombrep(a, gii, erep)

def FortFuncs_deallocate_atoms_conf_list(a):
    return _pycrysfml.FortFuncs_deallocate_atoms_conf_list(a)

def FortFuncs_ewald(lattvec, vol, ac, e):
    return _pycrysfml.FortFuncs_ewald(lattvec, vol, ac, e)

def FortFuncs_init_err_conf():
    return _pycrysfml.FortFuncs_init_err_conf()

def FortFuncs_species_on_list(a, mulg=None, tol=None, covalent=None, softbvs=None):
    return _pycrysfml.FortFuncs_species_on_list(a, mulg, tol, covalent, softbvs)

def FortFuncs_cell_volume_sigma(cell):
    return _pycrysfml.FortFuncs_cell_volume_sigma(cell)

def FortFuncs_u_equiv(cell, th_u):
    return _pycrysfml.FortFuncs_u_equiv(cell, th_u)

def FortFuncs_volume_from_cell(a, ang):
    return _pycrysfml.FortFuncs_volume_from_cell(a, ang)

def FortFuncs_cell_from_metric(g, vcell, volume=None):
    return _pycrysfml.FortFuncs_cell_from_metric(g, vcell, volume)

def FortFuncs_get_basis_from_uvw(dmin, u, cell, zoneb, ok, mode=None):
    return _pycrysfml.FortFuncs_get_basis_from_uvw(dmin, u, cell, zoneb, ok, mode)

def FortFuncs_get_conventional_cell(twofold, cell, tr, message, ok, told=None):
    return _pycrysfml.FortFuncs_get_conventional_cell(twofold, cell, tr, message, ok, told)

def FortFuncs_get_cryst_orthog_matrix(cellv, ang, crystort, cartypein=None):
    return _pycrysfml.FortFuncs_get_cryst_orthog_matrix(cellv, ang, crystort, cartypein)

def FortFuncs_get_primitive_cell(lat_type, centred_cell, primitive_cell, transfm):
    return _pycrysfml.FortFuncs_get_primitive_cell(lat_type, centred_cell, primitive_cell, transfm)

def FortFuncs_init_err_crys():
    return _pycrysfml.FortFuncs_init_err_crys()

def FortFuncs_orient_eigenvectors(eval, evec):
    return _pycrysfml.FortFuncs_orient_eigenvectors(eval, evec)

def FortFuncs_read_bin_crystal_cell(celda, lun, ok):
    return _pycrysfml.FortFuncs_read_bin_crystal_cell(celda, lun, ok)

def FortFuncs_set_crystal_cell(cellv, angl, celda, cartype=None, scell=None, sangl=None):
    return _pycrysfml.FortFuncs_set_crystal_cell(cellv, angl, celda, cartype, scell, sangl)

def FortFuncs_volume_sigma_from_cell(cell, ang, sigc, siga, volume, sigv):
    return _pycrysfml.FortFuncs_volume_sigma_from_cell(cell, ang, sigc, siga, volume, sigv)

def FortFuncs_write_bin_crystal_cell(celda, lun):
    return _pycrysfml.FortFuncs_write_bin_crystal_cell(celda, lun)

def FortFuncs_write_crystal_cell(celda, lun=None):
    return _pycrysfml.FortFuncs_write_crystal_cell(celda, lun)

def FortFuncs_calc_fwhm_peak(pat, xi, yi, ybi, rlim=None):
    return _pycrysfml.FortFuncs_calc_fwhm_peak(pat, xi, yi, ybi, rlim)

def FortFuncs_allocate_diffraction_pattern(pat, npts=None):
    return _pycrysfml.FortFuncs_allocate_diffraction_pattern(pat, npts)

def FortFuncs_calc_background(pat, ncyc, np, xmin=None, xmax=None):
    return _pycrysfml.FortFuncs_calc_background(pat, ncyc, np, xmin, xmax)

def FortFuncs_delete_noisy_points(pat, noisyp, fileinfo=None):
    return _pycrysfml.FortFuncs_delete_noisy_points(pat, noisyp, fileinfo)

def FortFuncs_init_err_diffpatt():
    return _pycrysfml.FortFuncs_init_err_diffpatt()

def FortFuncs_purge_diffraction_pattern(pat, mode):
    return _pycrysfml.FortFuncs_purge_diffraction_pattern(pat, mode)

def FortFuncs_read_background_file(bck_file, bck_mode, dif_pat):
    return _pycrysfml.FortFuncs_read_background_file(bck_file, bck_mode, dif_pat)

def FortFuncs_write_pattern_freeformat(filename, pat, xmin=None, xmax=None):
    return _pycrysfml.FortFuncs_write_pattern_freeformat(filename, pat, xmin, xmax)

def FortFuncs_write_pattern_instrm5(filename, pat, xmin=None, xmax=None, var=None):
    return _pycrysfml.FortFuncs_write_pattern_instrm5(filename, pat, xmin, xmax, var)

def FortFuncs_write_pattern_xysig(filename, pat, xmin=None, xmax=None):
    return _pycrysfml.FortFuncs_write_pattern_xysig(filename, pat, xmin, xmax)

def FortFuncs_unitcell_to_pdbfile(cell, spaceg, atom_list, filename):
    return _pycrysfml.FortFuncs_unitcell_to_pdbfile(cell, spaceg, atom_list, filename)

def FortFuncs_ag_theta(cos2t):
    return _pycrysfml.FortFuncs_ag_theta(cos2t)

def FortFuncs_al_theta(cos2t):
    return _pycrysfml.FortFuncs_al_theta(cos2t)

def FortFuncs_bg_theta(cos2t):
    return _pycrysfml.FortFuncs_bg_theta(cos2t)

def FortFuncs_bl_theta(cos2t):
    return _pycrysfml.FortFuncs_bl_theta(cos2t)

def FortFuncs_becker_coppens(iext, f2, cext, r, g, ys, dydr=None, dydg=None):
    return _pycrysfml.FortFuncs_becker_coppens(iext, f2, cext, r, g, ys, dydr, dydg)

def FortFuncs_shelx_extinction(job, iext, _lambda, ssnn, hkl, f2, extc, ys, der=None, derf2=None):
    return _pycrysfml.FortFuncs_shelx_extinction(job, iext, _lambda, ssnn, hkl, f2, extc, ys, der, derf2)

def FortFuncs_correct_flippingratios(iext, _lambda, q, extc, ssnn, hkl, an, bn, am, bm, yp, ym, ypm):
    return _pycrysfml.FortFuncs_correct_flippingratios(iext, _lambda, q, extc, ssnn, hkl, an, bn, am, bm, yp, ym, ypm)

def FortFuncs_cleanup_symmetry_operators(mspg):
    return _pycrysfml.FortFuncs_cleanup_symmetry_operators(mspg)

def FortFuncs_file_to_filelist(file_dat, file_list):
    return _pycrysfml.FortFuncs_file_to_filelist(file_dat, file_list)

def FortFuncs_init_err_form():
    return _pycrysfml.FortFuncs_init_err_form()

def FortFuncs_read_uvals(line, atomo, ulabel):
    return _pycrysfml.FortFuncs_read_uvals(line, atomo, ulabel)

def FortFuncs_readn_set_magnetic_structure_mcif(file_mcif, mcell, mgp, am):
    return _pycrysfml.FortFuncs_readn_set_magnetic_structure_mcif(file_mcif, mcell, mgp, am)

def FortFuncs_set_magnetic_space_group(symb, setting, mspg, parent=None, mcif=None, keepd=None, trn_to=None):
    return _pycrysfml.FortFuncs_set_magnetic_space_group(symb, setting, mspg, parent, mcif, keepd, trn_to)

def FortFuncs_write_cif_powder_profile(filename, pat, r_facts=None):
    return _pycrysfml.FortFuncs_write_cif_powder_profile(filename, pat, r_facts)

def FortFuncs_write_cif_template(filename, type_data, code, cell, spg, a):
    return _pycrysfml.FortFuncs_write_cif_template(filename, type_data, code, cell, spg, a)

def FortFuncs_write_shx_template(filename, code, title, _lambda, z, celda, space, atomos):
    return _pycrysfml.FortFuncs_write_shx_template(filename, code, title, _lambda, z, celda, space, atomos)

def FortFuncs_write_mcif(ipr, mcell, msgp, am, cell=None):
    return _pycrysfml.FortFuncs_write_mcif(ipr, mcell, msgp, am, cell)

def FortFuncs_allocate_coordination_type(nasu, numops, dmax, max_coor):
    return _pycrysfml.FortFuncs_allocate_coordination_type(nasu, numops, dmax, max_coor)

def FortFuncs_allocate_point_list(n, pl, ier):
    return _pycrysfml.FortFuncs_allocate_point_list(n, pl, ier)

def FortFuncs_angle_and_sigma(cellp, derm, x1, x0, x2, s1, s0, s2, ang, s):
    return _pycrysfml.FortFuncs_angle_and_sigma(cellp, derm, x1, x0, x2, s1, s0, s2, ang, s)

def FortFuncs_calc_dist_angle(dmax, dangl, cell, spg, a, lun=None):
    return _pycrysfml.FortFuncs_calc_dist_angle(dmax, dangl, cell, spg, a, lun)

def FortFuncs_calc_dist_angle_sigma(dmax, dangl, cell, spg, a, lun=None, lun_cons=None, lun_cif=None, filrest=None, rdmax=None, ramin=None):
    return _pycrysfml.FortFuncs_calc_dist_angle_sigma(dmax, dangl, cell, spg, a, lun, lun_cons, lun_cif, filrest, rdmax, ramin)

def FortFuncs_deallocate_coordination_type():
    return _pycrysfml.FortFuncs_deallocate_coordination_type()

def FortFuncs_deallocate_point_list(pl):
    return _pycrysfml.FortFuncs_deallocate_point_list(pl)

def FortFuncs_distance_and_sigma(cellp, derm, x0, x1, s0, s1, dis, s):
    return _pycrysfml.FortFuncs_distance_and_sigma(cellp, derm, x0, x1, s0, s1, dis, s)

def FortFuncs_get_anglen_axis_from_rotmat(r, axis, angle):
    return _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat(r, axis, angle)

def FortFuncs_get_euler_from_fract(x1, x2, x3, mt, phi, theta, chi, eum=None, code=None):
    return _pycrysfml.FortFuncs_get_euler_from_fract(x1, x2, x3, mt, phi, theta, chi, eum, code)

def FortFuncs_get_matrix_moving_v_to_u(v, u, r, w=None, ang=None):
    return _pycrysfml.FortFuncs_get_matrix_moving_v_to_u(v, u, r, w, ang)

def FortFuncs_get_omegachiphi(mt, omega, chi, phi, code=None):
    return _pycrysfml.FortFuncs_get_omegachiphi(mt, omega, chi, phi, code)

def FortFuncs_get_phithechi(mt, phi, theta, chi, code=None):
    return _pycrysfml.FortFuncs_get_phithechi(mt, phi, theta, chi, code)

def FortFuncs_get_transf_list(trans, ox, pl, npl, ifail):
    return _pycrysfml.FortFuncs_get_transf_list(trans, ox, pl, npl, ifail)

def FortFuncs_init_err_geom():
    return _pycrysfml.FortFuncs_init_err_geom()

def FortFuncs_p1_dist(dmax, cell, spg, ac, lun=None):
    return _pycrysfml.FortFuncs_p1_dist(dmax, cell, spg, ac, lun)

def FortFuncs_print_distances(lun, dmax, cell, spg, a):
    return _pycrysfml.FortFuncs_print_distances(lun, dmax, cell, spg, a)

def FortFuncs_set_rotation_matrix(ang, rot):
    return _pycrysfml.FortFuncs_set_rotation_matrix(ang, rot)

def FortFuncs_set_tdist_coordination(max_coor, dmax, cell, spg, a):
    return _pycrysfml.FortFuncs_set_tdist_coordination(max_coor, dmax, cell, spg, a)

def FortFuncs_set_tdist_partial_coordination(list, max_coor, dmax, cell, spg, a):
    return _pycrysfml.FortFuncs_set_tdist_partial_coordination(list, max_coor, dmax, cell, spg, a)

def FortFuncs_torsion_and_sigma(cellp, x1, x2, x3, x4, sx1, sx2, sx3, sx4, tor, s):
    return _pycrysfml.FortFuncs_torsion_and_sigma(cellp, x1, x2, x3, x4, sx1, sx2, sx3, sx4, tor, s)

def FortFuncs_directory_exists(dirname):
    return _pycrysfml.FortFuncs_directory_exists(dirname)

def FortFuncs_write_date_time(lun=None, dtim=None):
    return _pycrysfml.FortFuncs_write_date_time(lun, dtim)

def FortFuncs_define_uncompress_program(progname):
    return _pycrysfml.FortFuncs_define_uncompress_program(progname)

def FortFuncs_get_absolute_data_path(numor, instrm, path, iyear=None, icycle=None, actual_path=None):
    return _pycrysfml.FortFuncs_get_absolute_data_path(numor, instrm, path, iyear, icycle, actual_path)

def FortFuncs_get_next_yearcycle(yearcycle, reset_to_most_recent=None):
    return _pycrysfml.FortFuncs_get_next_yearcycle(yearcycle, reset_to_most_recent)

def FortFuncs_init_err_illdata():
    return _pycrysfml.FortFuncs_init_err_illdata()

def FortFuncs_init_sxtal_numor(numor, nbang=None, nbdata=None, nframes=None):
    return _pycrysfml.FortFuncs_init_sxtal_numor(numor, nbang, nbdata, nframes)

def FortFuncs_initialize_data_directory():
    return _pycrysfml.FortFuncs_initialize_data_directory()

def FortFuncs_read_current_instrm(filenam):
    return _pycrysfml.FortFuncs_read_current_instrm(filenam)

def FortFuncs_set_current_orient(wave, ub, setting=None):
    return _pycrysfml.FortFuncs_set_current_orient(wave, ub, setting)

def FortFuncs_set_default_instrument(typ=None, wav=None):
    return _pycrysfml.FortFuncs_set_default_instrument(typ, wav)

def FortFuncs_set_ill_data_directory(filedir):
    return _pycrysfml.FortFuncs_set_ill_data_directory(filedir)

def FortFuncs_set_instrm_directory(working_dir=None, instrm=None, iyear=None, icycle=None):
    return _pycrysfml.FortFuncs_set_instrm_directory(working_dir, instrm, iyear, icycle)

def FortFuncs_set_instrm_geometry_directory(env_var=None):
    return _pycrysfml.FortFuncs_set_instrm_geometry_directory(env_var)

def FortFuncs_update_current_instrm_ub(filenam, ub, wave):
    return _pycrysfml.FortFuncs_update_current_instrm_ub(filenam, ub, wave)

def FortFuncs_write_current_instrm_data(lun=None, fil=None):
    return _pycrysfml.FortFuncs_write_current_instrm_data(lun, fil)

def FortFuncs_write_generic_numor(num, lun=None):
    return _pycrysfml.FortFuncs_write_generic_numor(num, lun)

def FortFuncs_write_headerinfo_sxtal_numor(num, lun=None):
    return _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor(num, lun)

def FortFuncs_write_sxtal_numor(num, lun=None):
    return _pycrysfml.FortFuncs_write_sxtal_numor(num, lun)

def FortFuncs_read_calibration_file(filecal, instrm, cal):
    return _pycrysfml.FortFuncs_read_calibration_file(filecal, instrm, cal)

def FortFuncs_error_message(mess, iunit=None, routine=None, fatal=None):
    return _pycrysfml.FortFuncs_error_message(mess, iunit, routine, fatal)

def FortFuncs_info_message(mess, iunit=None):
    return _pycrysfml.FortFuncs_info_message(mess, iunit)

def FortFuncs_print_message(mess):
    return _pycrysfml.FortFuncs_print_message(mess)

def FortFuncs_wait_message(mess=None):
    return _pycrysfml.FortFuncs_wait_message(mess)

def FortFuncs_write_scroll_text(mess):
    return _pycrysfml.FortFuncs_write_scroll_text(mess)

def FortFuncs_calc_induced_sk(cell, spg, mfield, dir_mfield, atm, ipr=None):
    return _pycrysfml.FortFuncs_calc_induced_sk(cell, spg, mfield, dir_mfield, atm, ipr)

def FortFuncs_init_magsymm_k_type(mgp):
    return _pycrysfml.FortFuncs_init_magsymm_k_type(mgp)

def FortFuncs_set_shubnikov_group(shubk, sg, mgp):
    return _pycrysfml.FortFuncs_set_shubnikov_group(shubk, sg, mgp)

def FortFuncs_write_magnetic_structure(ipr, mgp, am, mag_dom=None, cell=None):
    return _pycrysfml.FortFuncs_write_magnetic_structure(ipr, mgp, am, mag_dom, cell)

def FortFuncs_write_shubnikov_group(sg, iunit=None):
    return _pycrysfml.FortFuncs_write_shubnikov_group(sg, iunit)

def FortFuncs_index_cube(iv, mc):
    return _pycrysfml.FortFuncs_index_cube(iv, mc)

def FortFuncs_vpoint_in_cube(r, s, t, x000, x001, x010, x011, x100, x101, x110, x111):
    return _pycrysfml.FortFuncs_vpoint_in_cube(r, s, t, x000, x001, x010, x011, x100, x101, x110, x111)

def FortFuncs_vpoint_in_line(r, x0, x1):
    return _pycrysfml.FortFuncs_vpoint_in_line(r, x0, x1)

def FortFuncs_vpoint_in_square(r, s, x00, x01, x10, x11):
    return _pycrysfml.FortFuncs_vpoint_in_square(r, s, x00, x01, x10, x11)

def FortFuncs_init_err_maps():
    return _pycrysfml.FortFuncs_init_err_maps()

def FortFuncs_set_cube_info():
    return _pycrysfml.FortFuncs_set_cube_info()

def FortFuncs_veclength(a, b):
    return _pycrysfml.FortFuncs_veclength(a, b)

def FortFuncs_init_err_math3d():
    return _pycrysfml.FortFuncs_init_err_math3d()

def FortFuncs_set_eps(neweps):
    return _pycrysfml.FortFuncs_set_eps(neweps)

def FortFuncs_set_eps_default():
    return _pycrysfml.FortFuncs_set_eps_default()

def FortFuncs_get_plane_from_3points(p1, p2, p3, a, b, c, d):
    return _pycrysfml.FortFuncs_get_plane_from_3points(p1, p2, p3, a, b, c, d)

def FortFuncs_matrix_diageigen(a, v, c):
    return _pycrysfml.FortFuncs_matrix_diageigen(a, v, c)

def FortFuncs_matrix_inverse(a, b, ifail):
    return _pycrysfml.FortFuncs_matrix_inverse(a, b, ifail)

def FortFuncs_resolv_sist_1x2(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_1x2(w, t, ts, x, ix)

def FortFuncs_resolv_sist_1x3(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_1x3(w, t, ts, x, ix)

def FortFuncs_resolv_sist_2x2(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_2x2(w, t, ts, x, ix)

def FortFuncs_resolv_sist_2x3(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_2x3(w, t, ts, x, ix)

def FortFuncs_resolv_sist_3x3(w, t, ts, x, ix):
    return _pycrysfml.FortFuncs_resolv_sist_3x3(w, t, ts, x, ix)

def FortFuncs_bessj0(x):
    return _pycrysfml.FortFuncs_bessj0(x)

def FortFuncs_bessj1(x):
    return _pycrysfml.FortFuncs_bessj1(x)

def FortFuncs_bessj(n, x):
    return _pycrysfml.FortFuncs_bessj(n, x)

def FortFuncs_pgcd(a, b):
    return _pycrysfml.FortFuncs_pgcd(a, b)

def FortFuncs_ppcm(a, b):
    return _pycrysfml.FortFuncs_ppcm(a, b)

def FortFuncs_epss_val():
    return _pycrysfml.FortFuncs_epss_val()

def FortFuncs_ep_ss_val():
    return _pycrysfml.FortFuncs_ep_ss_val()

def FortFuncs_init_err_mathgen():
    return _pycrysfml.FortFuncs_init_err_mathgen()

def FortFuncs_set_epsg_default():
    return _pycrysfml.FortFuncs_set_epsg_default()

def FortFuncs_cartesian_to_fractional(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_cartesian_to_fractional(molecule, cell, newmolecule)

def FortFuncs_cartesian_to_spherical(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_cartesian_to_spherical(molecule, newmolecule)

def FortFuncs_cartesian_to_zmatrix(molecule, newmolecule=None, cell=None, d_min=None, d_max=None):
    return _pycrysfml.FortFuncs_cartesian_to_zmatrix(molecule, newmolecule, cell, d_min, d_max)

def FortFuncs_fix_reference(molecule, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None):
    return _pycrysfml.FortFuncs_fix_reference(molecule, newmolecule, natom_o, natom_x, natom_xy)

def FortFuncs_fix_orient_cartesian(molecule, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None, mat=None):
    return _pycrysfml.FortFuncs_fix_orient_cartesian(molecule, newmolecule, natom_o, natom_x, natom_xy, mat)

def FortFuncs_fractional_to_cartesian(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_fractional_to_cartesian(molecule, cell, newmolecule)

def FortFuncs_fractional_to_spherical(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_fractional_to_spherical(molecule, cell, newmolecule)

def FortFuncs_fractional_to_zmatrix(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_fractional_to_zmatrix(molecule, cell, newmolecule)

def FortFuncs_init_err_molec():
    return _pycrysfml.FortFuncs_init_err_molec()

def FortFuncs_init_molecule(molecule, natm=None):
    return _pycrysfml.FortFuncs_init_molecule(molecule, natm)

def FortFuncs_init_mol_crys(molx, natm=None, nmol=None):
    return _pycrysfml.FortFuncs_init_mol_crys(molx, natm, nmol)

def FortFuncs_molcrys_to_atomlist(molcrys, atm):
    return _pycrysfml.FortFuncs_molcrys_to_atomlist(molcrys, atm)

def FortFuncs_molec_to_atomlist(molec, atm, coor_type=None, cell=None):
    return _pycrysfml.FortFuncs_molec_to_atomlist(molec, atm, coor_type, cell)

def FortFuncs_set_euler_matrix(rt, phi, theta, chi, eu):
    return _pycrysfml.FortFuncs_set_euler_matrix(rt, phi, theta, chi, eu)

def FortFuncs_spherical_to_cartesian(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_spherical_to_cartesian(molecule, newmolecule)

def FortFuncs_spherical_to_fractional(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_spherical_to_fractional(molecule, cell, newmolecule)

def FortFuncs_spherical_to_zmatrix(molecule, newmolecule=None, cell=None):
    return _pycrysfml.FortFuncs_spherical_to_zmatrix(molecule, newmolecule, cell)

def FortFuncs_write_molecular_crystal(molcrys, lun=None):
    return _pycrysfml.FortFuncs_write_molecular_crystal(molcrys, lun)

def FortFuncs_write_molecule(molecule, lun=None):
    return _pycrysfml.FortFuncs_write_molecule(molecule, lun)

def FortFuncs_zmatrix_to_cartesian(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_zmatrix_to_cartesian(molecule, newmolecule)

def FortFuncs_zmatrix_to_fractional(molecule, cell, newmolecule=None):
    return _pycrysfml.FortFuncs_zmatrix_to_fractional(molecule, cell, newmolecule)

def FortFuncs_zmatrix_to_spherical(molecule, newmolecule=None):
    return _pycrysfml.FortFuncs_zmatrix_to_spherical(molecule, newmolecule)

def FortFuncs_calc_mag_interaction_vector(reflex, cell):
    return _pycrysfml.FortFuncs_calc_mag_interaction_vector(reflex, cell)

def FortFuncs_calc_magnetic_strf_miv(cell, mgp, atm, mh):
    return _pycrysfml.FortFuncs_calc_magnetic_strf_miv(cell, mgp, atm, mh)

def FortFuncs_calc_magnetic_strf_miv_dom(cell, mgp, atm, mag_dom, mh):
    return _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom(cell, mgp, atm, mag_dom, mh)

def FortFuncs_calc_magnetic_strf_tensor(spg, atm, mh):
    return _pycrysfml.FortFuncs_calc_magnetic_strf_tensor(spg, atm, mh)

def FortFuncs_gen_satellites(cell, grp, smax, h, ord=None, powder=None, hkl=None):
    return _pycrysfml.FortFuncs_gen_satellites(cell, grp, smax, h, ord, powder, hkl)

def FortFuncs_init_err_msfac():
    return _pycrysfml.FortFuncs_init_err_msfac()

def FortFuncs_init_mag_structure_factors(reflex, atm, grp, lun=None):
    return _pycrysfml.FortFuncs_init_mag_structure_factors(reflex, atm, grp, lun)

def FortFuncs_mag_structure_factors(cell, atm, grp, reflex):
    return _pycrysfml.FortFuncs_mag_structure_factors(cell, atm, grp, reflex)

def FortFuncs_write_mag_structure_factors(lun, reflex, grp):
    return _pycrysfml.FortFuncs_write_mag_structure_factors(lun, reflex, grp)

def FortFuncs_init_err_optim():
    return _pycrysfml.FortFuncs_init_err_optim()

def FortFuncs_init_opt_conditions(opt):
    return _pycrysfml.FortFuncs_init_opt_conditions(opt)

def FortFuncs_write_optimization_conditions(ipr, c):
    return _pycrysfml.FortFuncs_write_optimization_conditions(ipr, c)

def FortFuncs_write_polar_info(polari, mag_dom, lun=None, info=None):
    return _pycrysfml.FortFuncs_write_polar_info(polari, mag_dom, lun, info)

def FortFuncs_write_polar_line(polari, lun=None):
    return _pycrysfml.FortFuncs_write_polar_line(polari, lun)

def FortFuncs_init_prof_val():
    return _pycrysfml.FortFuncs_init_prof_val()

def FortFuncs_prof_val(eta, gamma, asym1, asym2, twoth, twoth0, dprdt, dprdg, dprde, dprds, dprdd, profval, use_asym, use_hps):
    return _pycrysfml.FortFuncs_prof_val(eta, gamma, asym1, asym2, twoth, twoth0, dprdt, dprdg, dprde, dprds, dprdd, profval, use_asym, use_hps)

def FortFuncs_tof_carpenter(dt, d, alfa, beta, gamma, eta, kappa, tof_theta, tof_peak, deriv=None):
    return _pycrysfml.FortFuncs_tof_carpenter(dt, d, alfa, beta, gamma, eta, kappa, tof_theta, tof_peak, deriv)

def FortFuncs_tof_jorgensen(dt, alfa, beta, sigma, tof_peak, deriv=None):
    return _pycrysfml.FortFuncs_tof_jorgensen(dt, alfa, beta, sigma, tof_peak, deriv)

def FortFuncs_tof_jorgensen_vondreele(dt, alfa, beta, gamma, eta, tof_peak, deriv=None):
    return _pycrysfml.FortFuncs_tof_jorgensen_vondreele(dt, alfa, beta, gamma, eta, tof_peak, deriv)

def FortFuncs_hk_equiv(h, k, spacegk, friedel=None):
    return _pycrysfml.FortFuncs_hk_equiv(h, k, spacegk, friedel)

def FortFuncs_k_equiv(h, k, latyp):
    return _pycrysfml.FortFuncs_k_equiv(h, k, latyp)

def FortFuncs_k_equiv_minus_k(vec, lat):
    return _pycrysfml.FortFuncs_k_equiv_minus_k(vec, lat)

def FortFuncs_k_star(k, spacegroup, gk, ext=None):
    return _pycrysfml.FortFuncs_k_star(k, spacegroup, gk, ext)

def FortFuncs_write_group_k(gk, lun=None):
    return _pycrysfml.FortFuncs_write_group_k(gk, lun)

def FortFuncs_init_err_random():
    return _pycrysfml.FortFuncs_init_err_random()

def FortFuncs_random_beta(aa, bb, first, fn_val):
    return _pycrysfml.FortFuncs_random_beta(aa, bb, first, fn_val)

def FortFuncs_random_binomial1(n, p, first, ival):
    return _pycrysfml.FortFuncs_random_binomial1(n, p, first, ival)

def FortFuncs_random_binomial2(n, pp, first, ival):
    return _pycrysfml.FortFuncs_random_binomial2(n, pp, first, ival)

def FortFuncs_random_cauchy(fn_val):
    return _pycrysfml.FortFuncs_random_cauchy(fn_val)

def FortFuncs_random_chisq(ndf, first, fn_val):
    return _pycrysfml.FortFuncs_random_chisq(ndf, first, fn_val)

def FortFuncs_random_exponential(fn_val):
    return _pycrysfml.FortFuncs_random_exponential(fn_val)

def FortFuncs_random_gamma(s, first, fn_val):
    return _pycrysfml.FortFuncs_random_gamma(s, first, fn_val)

def FortFuncs_random_gamma1(s, first, fn_val):
    return _pycrysfml.FortFuncs_random_gamma1(s, first, fn_val)

def FortFuncs_random_gamma2(s, first, fn_val):
    return _pycrysfml.FortFuncs_random_gamma2(s, first, fn_val)

def FortFuncs_random_inv_gauss(h, b, first, fn_val):
    return _pycrysfml.FortFuncs_random_inv_gauss(h, b, first, fn_val)

def FortFuncs_random_mvnorm(h, d, f, first, x, ier):
    return _pycrysfml.FortFuncs_random_mvnorm(h, d, f, first, x, ier)

def FortFuncs_random_neg_binomial(sk, p, ival):
    return _pycrysfml.FortFuncs_random_neg_binomial(sk, p, ival)

def FortFuncs_random_normal(fn_val):
    return _pycrysfml.FortFuncs_random_normal(fn_val)

def FortFuncs_random_order(order):
    return _pycrysfml.FortFuncs_random_order(order)

def FortFuncs_random_poisson(mt, genpoi):
    return _pycrysfml.FortFuncs_random_poisson(mt, genpoi)

def FortFuncs_random_t(m, fn_val):
    return _pycrysfml.FortFuncs_random_t(m, fn_val)

def FortFuncs_random_von_mises(k, first, fn_val):
    return _pycrysfml.FortFuncs_random_von_mises(k, first, fn_val)

def FortFuncs_random_weibull(a, fn_val):
    return _pycrysfml.FortFuncs_random_weibull(a, fn_val)

def FortFuncs_seed_random_number(i_input=None, i_output=None):
    return _pycrysfml.FortFuncs_seed_random_number(i_input, i_output)

def FortFuncs_allocate_vparam(n):
    return _pycrysfml.FortFuncs_allocate_vparam(n)

def FortFuncs_get_restang_line(line, fatom):
    return _pycrysfml.FortFuncs_get_restang_line(line, fatom)

def FortFuncs_get_restdis_line(line, fatom):
    return _pycrysfml.FortFuncs_get_restdis_line(line, fatom)

def FortFuncs_get_resttor_line(line, fatom):
    return _pycrysfml.FortFuncs_get_resttor_line(line, fatom)

def FortFuncs_init_err_refcodes():
    return _pycrysfml.FortFuncs_init_err_refcodes()

def FortFuncs_init_refcodes(fatom=None, fmatom=None, mag_dom=None, molcrys=None, molec=None, model=None):
    return _pycrysfml.FortFuncs_init_refcodes(fatom, fmatom, mag_dom, molcrys, molec, model)

def FortFuncs_read_refgcodes_file(file_dat, n_ini, n_end, model, sys=None, iphas=None):
    return _pycrysfml.FortFuncs_read_refgcodes_file(file_dat, n_ini, n_end, model, sys, iphas)

def FortFuncs_vstate_to_modelpar(model, mode=None):
    return _pycrysfml.FortFuncs_vstate_to_modelpar(model, mode)

def FortFuncs_write_info_refgcodes(model, iunit=None):
    return _pycrysfml.FortFuncs_write_info_refgcodes(model, iunit)

def FortFuncs_write_info_refparams(iunit=None):
    return _pycrysfml.FortFuncs_write_info_refparams(iunit)

def FortFuncs_write_restraints_obscalc(a, iunit=None):
    return _pycrysfml.FortFuncs_write_restraints_obscalc(a, iunit)

def FortFuncs_get_maxnumref(sintlmax, volcell, sintlmin=None, mult=None):
    return _pycrysfml.FortFuncs_get_maxnumref(sintlmax, volcell, sintlmin, mult)

def FortFuncs_mhkl_absent(h, shubg):
    return _pycrysfml.FortFuncs_mhkl_absent(h, shubg)

def FortFuncs_init_err_refl():
    return _pycrysfml.FortFuncs_init_err_refl()

def FortFuncs_init_reflist(reflex, n=None):
    return _pycrysfml.FortFuncs_init_reflist(reflex, n)

def FortFuncs_write_asu(spacegroup, iunit=None):
    return _pycrysfml.FortFuncs_write_asu(spacegroup, iunit)

def FortFuncs_write_reflist_info(rfl, iunit=None, mode=None):
    return _pycrysfml.FortFuncs_write_reflist_info(rfl, iunit, mode)

def FortFuncs_angs_4c_bisecting(wave, z1, tth, om, ch, ph, ierr):
    return _pycrysfml.FortFuncs_angs_4c_bisecting(wave, z1, tth, om, ch, ph, ierr)

def FortFuncs_calang(h, tteta, om, ch, ph, ierr, wav=None, ubm=None, geom=None):
    return _pycrysfml.FortFuncs_calang(h, tteta, om, ch, ph, ierr, wav, ubm, geom)

def FortFuncs_calc_om_chi_phi(vhkl, vlab1, psi, ub, om, ch, ph, ierr):
    return _pycrysfml.FortFuncs_calc_om_chi_phi(vhkl, vlab1, psi, ub, om, ch, ph, ierr)

def FortFuncs_calc_psi(vhkl, vlab1, om, ch, ph, ub, psi, ierr):
    return _pycrysfml.FortFuncs_calc_psi(vhkl, vlab1, om, ch, ph, ub, psi, ierr)

def FortFuncs_cell_fr_ub(ub, ipr=None, dcel=None, rcel=None):
    return _pycrysfml.FortFuncs_cell_fr_ub(ub, ipr, dcel, rcel)

def FortFuncs_chi_mat(chi, dum):
    return _pycrysfml.FortFuncs_chi_mat(chi, dum)

def FortFuncs_psd_convert(mpsd, gamm, gamp, nup, xobs, zobs, cath, anod, ierr):
    return _pycrysfml.FortFuncs_psd_convert(mpsd, gamm, gamp, nup, xobs, zobs, cath, anod, ierr)

def FortFuncs_d19psd(mpsd, ga, nu, cath, anod, ierr):
    return _pycrysfml.FortFuncs_d19psd(mpsd, ga, nu, cath, anod, ierr)

def FortFuncs_dspace(wave, vhkl, cell, ds, th, ierr):
    return _pycrysfml.FortFuncs_dspace(wave, vhkl, cell, ds, th, ierr)

def FortFuncs_equatorial_chi_phi(z1, ch, ph):
    return _pycrysfml.FortFuncs_equatorial_chi_phi(z1, ch, ph)

def FortFuncs_fixdnu(wave, z1, nu, ch, ph, ga, om, ierr):
    return _pycrysfml.FortFuncs_fixdnu(wave, z1, nu, ch, ph, ga, om, ierr)

def FortFuncs_flat_cone_vertdet(wave, z1, ub, vrho, rho, ch, ph, ga, om, nu, ierr):
    return _pycrysfml.FortFuncs_flat_cone_vertdet(wave, z1, ub, vrho, rho, ch, ph, ga, om, nu, ierr)

def FortFuncs_genb(c, b):
    return _pycrysfml.FortFuncs_genb(c, b)

def FortFuncs_genub(b, h1, h2, h1o, h2o, ub, ierr):
    return _pycrysfml.FortFuncs_genub(b, h1, h2, h1o, h2o, ub, ierr)

def FortFuncs_get_angs_nb(wave, z1, ga, om, nu, ierr):
    return _pycrysfml.FortFuncs_get_angs_nb(wave, z1, ga, om, nu, ierr)

def FortFuncs_get_dspacing_theta(wave, z1, ds, th, ierr):
    return _pycrysfml.FortFuncs_get_dspacing_theta(wave, z1, ds, th, ierr)

def FortFuncs_get_gaomnu_frchiphi(wave, z1, ch, ph, ga, om, nu, ierr):
    return _pycrysfml.FortFuncs_get_gaomnu_frchiphi(wave, z1, ch, ph, ga, om, nu, ierr)

def FortFuncs_get_ub_from_hkl_hkl_omega(wave, cell, h1, h2, omega, ub, ok, mess):
    return _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega(wave, cell, h1, h2, omega, ub, ok, mess)

def FortFuncs_get_ub_from_uvw_hkl_omega(wave, cell, zone_axis, h1, omega, ub, ok, mess):
    return _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega(wave, cell, zone_axis, h1, omega, ub, ok, mess)

def FortFuncs_get_waveganu_frz4(z4, wave, ga, nu, ierr):
    return _pycrysfml.FortFuncs_get_waveganu_frz4(z4, wave, ga, nu, ierr)

def FortFuncs_get_z1_d9angls(wave, ttheta, om, ch, ph, z1):
    return _pycrysfml.FortFuncs_get_z1_d9angls(wave, ttheta, om, ch, ph, z1)

def FortFuncs_normal(v, ierr):
    return _pycrysfml.FortFuncs_normal(v, ierr)

def FortFuncs_phi_mat(phi, dum):
    return _pycrysfml.FortFuncs_phi_mat(phi, dum)

def FortFuncs_psi_mat(psi, dum):
    return _pycrysfml.FortFuncs_psi_mat(psi, dum)

def FortFuncs_read_twinlaw(twin, read_ok, lun=None, fich_cfl=None):
    return _pycrysfml.FortFuncs_read_twinlaw(twin, read_ok, lun, fich_cfl)

def FortFuncs_refvec(vhkl, ub, vs, vz, ierr):
    return _pycrysfml.FortFuncs_refvec(vhkl, ub, vs, vz, ierr)

def FortFuncs_s4cnb(angl_4c, angl_nb, ierr):
    return _pycrysfml.FortFuncs_s4cnb(angl_4c, angl_nb, ierr)

def FortFuncs_set_psd(dist=None, cg=None, ag=None, nh=None, nv=None, ip=None):
    return _pycrysfml.FortFuncs_set_psd(dist, cg, ag, nh, nv, ip)

def FortFuncs_snb4c(angl_nb, angl_4c):
    return _pycrysfml.FortFuncs_snb4c(angl_nb, angl_4c)

def FortFuncs_sxdpsd(mpsd, gamm, wave, nup, gamp, xobs, zobs, xcel, time, zcel, ierr):
    return _pycrysfml.FortFuncs_sxdpsd(mpsd, gamm, wave, nup, gamp, xobs, zobs, xcel, time, zcel, ierr)

def FortFuncs_triple(v1, v2, tv, ierr):
    return _pycrysfml.FortFuncs_triple(v1, v2, tv, ierr)

def FortFuncs_write_twinlaw(twin, lun, cell=None):
    return _pycrysfml.FortFuncs_write_twinlaw(twin, lun, cell)

def FortFuncs_z1frfc(wave, tth, om, ch, ph, z1):
    return _pycrysfml.FortFuncs_z1frfc(wave, tth, om, ch, ph, z1)

def FortFuncs_z1frmd(wave, ch, ph, ga, om, nu, z1):
    return _pycrysfml.FortFuncs_z1frmd(wave, ch, ph, ga, om, nu, z1)

def FortFuncs_z1frnb(wave, ga, om, nu, z1):
    return _pycrysfml.FortFuncs_z1frnb(wave, ga, om, nu, z1)

def FortFuncs_z1frz2(z2, ph, z1):
    return _pycrysfml.FortFuncs_z1frz2(z2, ph, z1)

def FortFuncs_z1frz3(z3, ch, ph, z1):
    return _pycrysfml.FortFuncs_z1frz3(z3, ch, ph, z1)

def FortFuncs_z1frz4(z4, om, ch, ph, z1):
    return _pycrysfml.FortFuncs_z1frz4(z4, om, ch, ph, z1)

def FortFuncs_z2frz1(z1, ph, z2):
    return _pycrysfml.FortFuncs_z2frz1(z1, ph, z2)

def FortFuncs_z3frz1(z1, ch, ph, z3):
    return _pycrysfml.FortFuncs_z3frz1(z1, ch, ph, z3)

def FortFuncs_z4frgn(wave, ga, nu, z4):
    return _pycrysfml.FortFuncs_z4frgn(wave, ga, nu, z4)

def FortFuncs_z4frz1(z1, om, ch, ph, z4):
    return _pycrysfml.FortFuncs_z4frz1(z1, om, ch, ph, z4)

def FortFuncs_additional_scattering_factors(fil, add_scatt, ok, mess):
    return _pycrysfml.FortFuncs_additional_scattering_factors(fil, add_scatt, ok, mess)

def FortFuncs_allocate_scattering_species(n, scf):
    return _pycrysfml.FortFuncs_allocate_scattering_species(n, scf)

def FortFuncs_calc_mag_structure_factor(mode, hm, cell, grp, atm, scf, strf, magonly=None, mdom=None, tdom=None, twin=None):
    return _pycrysfml.FortFuncs_calc_mag_structure_factor(mode, hm, cell, grp, atm, scf, strf, magonly, mdom, tdom, twin)

def FortFuncs_calc_strfactor(mode, rad, nn, sn, atm, grp, sf2):
    return _pycrysfml.FortFuncs_calc_strfactor(mode, rad, nn, sn, atm, grp, sf2)

def FortFuncs_calc_hkl_strfactor(mode, rad, hn, sn, atm, grp, sf2):
    return _pycrysfml.FortFuncs_calc_hkl_strfactor(mode, rad, hn, sn, atm, grp, sf2)

def FortFuncs_init_calc_hkl_strfactors(atm, mode=None, _lambda=None, lun=None):
    return _pycrysfml.FortFuncs_init_calc_hkl_strfactors(atm, mode, _lambda, lun)

def FortFuncs_init_calc_strfactors(reflex, atm, grp, mode=None, _lambda=None, lun=None):
    return _pycrysfml.FortFuncs_init_calc_strfactors(reflex, atm, grp, mode, _lambda, lun)

def FortFuncs_init_structure_factors(reflex, atm, grp, mode=None, _lambda=None, lun=None):
    return _pycrysfml.FortFuncs_init_structure_factors(reflex, atm, grp, mode, _lambda, lun)

def FortFuncs_magnetic_structure_factors(cell, atm, grp, maxs, reflex, stf, lun=None):
    return _pycrysfml.FortFuncs_magnetic_structure_factors(cell, atm, grp, maxs, reflex, stf, lun)

def FortFuncs_structure_factors(atm, grp, reflex, mode=None, _lambda=None):
    return _pycrysfml.FortFuncs_structure_factors(atm, grp, reflex, mode, _lambda)

def FortFuncs_cubic_harm_ang(l, m, theta, phi):
    return _pycrysfml.FortFuncs_cubic_harm_ang(l, m, theta, phi)

def FortFuncs_cubic_harm_ucvec(l, m, u):
    return _pycrysfml.FortFuncs_cubic_harm_ucvec(l, m, u)

def FortFuncs_int_slater_bessel(n, l, z, s):
    return _pycrysfml.FortFuncs_int_slater_bessel(n, l, z, s)

def FortFuncs_real_spher_harm_ang(l, m, p, theta, phi):
    return _pycrysfml.FortFuncs_real_spher_harm_ang(l, m, p, theta, phi)

def FortFuncs_real_spher_harm_ucvec(l, m, p, u):
    return _pycrysfml.FortFuncs_real_spher_harm_ucvec(l, m, p, u)

def FortFuncs_real_spher_harmcharge_ucvec(l, m, p, u):
    return _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec(l, m, p, u)

def FortFuncs_init_err_spher():
    return _pycrysfml.FortFuncs_init_err_spher()

def FortFuncs_pikout_lj_cubic(group, lj, ncoef, lun=None):
    return _pycrysfml.FortFuncs_pikout_lj_cubic(group, lj, ncoef, lun)

def FortFuncs_get_generators(spg, gener):
    return _pycrysfml.FortFuncs_get_generators(spg, gener)

def FortFuncs_remove_spgr_info():
    return _pycrysfml.FortFuncs_remove_spgr_info()

def FortFuncs_remove_system_equiv():
    return _pycrysfml.FortFuncs_remove_system_equiv()

def FortFuncs_remove_wyckoff_info():
    return _pycrysfml.FortFuncs_remove_wyckoff_info()

def FortFuncs_set_spgr_info():
    return _pycrysfml.FortFuncs_set_spgr_info()

def FortFuncs_set_system_equiv():
    return _pycrysfml.FortFuncs_set_system_equiv()

def FortFuncs_set_wyckoff_info():
    return _pycrysfml.FortFuncs_set_wyckoff_info()

def FortFuncs_axes_rotation(r):
    return _pycrysfml.FortFuncs_axes_rotation(r)

def FortFuncs_get_laue_num(laueclass):
    return _pycrysfml.FortFuncs_get_laue_num(laueclass)

def FortFuncs_get_occ_site(pto, spg):
    return _pycrysfml.FortFuncs_get_occ_site(pto, spg)

def FortFuncs_get_pointgroup_num(pgname):
    return _pycrysfml.FortFuncs_get_pointgroup_num(pgname)

def FortFuncs_lattice_trans(v, lat):
    return _pycrysfml.FortFuncs_lattice_trans(v, lat)

def FortFuncs_spgr_equal(spacegroup1, spacegroup2):
    return _pycrysfml.FortFuncs_spgr_equal(spacegroup1, spacegroup2)

def FortFuncs_allocate_lattice_centring(latt, n, tinv=None):
    return _pycrysfml.FortFuncs_allocate_lattice_centring(latt, n, tinv)

def FortFuncs_check_generator(gen, ok, symbol=None):
    return _pycrysfml.FortFuncs_check_generator(gen, ok, symbol)

def FortFuncs_decodmatmag(sim, xyzstring):
    return _pycrysfml.FortFuncs_decodmatmag(sim, xyzstring)

def FortFuncs_get_laue_str(ilaue, str):
    return _pycrysfml.FortFuncs_get_laue_str(ilaue, str)

def FortFuncs_get_pointgroup_str(ipg, str):
    return _pycrysfml.FortFuncs_get_pointgroup_str(ipg, str)

def FortFuncs_get_seitz_symbol(iop, itim, tr, seitz_symb):
    return _pycrysfml.FortFuncs_get_seitz_symbol(iop, itim, tr, seitz_symb)

def FortFuncs_get_setting_info(mat, orig, setting, matkind=None):
    return _pycrysfml.FortFuncs_get_setting_info(mat, orig, setting, matkind)

def FortFuncs_get_shubnikov_operator_symbol(mat, rot, tr, shop_symb, mcif=None, invt=None):
    return _pycrysfml.FortFuncs_get_shubnikov_operator_symbol(mat, rot, tr, shop_symb, mcif, invt)

def FortFuncs_get_string_resolv(t, x, ix, symb):
    return _pycrysfml.FortFuncs_get_string_resolv(t, x, ix, symb)

def FortFuncs_get_symel(sim, xyzstring):
    return _pycrysfml.FortFuncs_get_symel(sim, xyzstring)

def FortFuncs_get_symkov(sim, xyzstring):
    return _pycrysfml.FortFuncs_get_symkov(sim, xyzstring)

def FortFuncs_get_trasfm_symbol(mat, tr, abc_symb, oposite=None):
    return _pycrysfml.FortFuncs_get_trasfm_symbol(mat, tr, abc_symb, oposite)

def FortFuncs_get_transl_symbol(tr, transl_symb):
    return _pycrysfml.FortFuncs_get_transl_symbol(tr, transl_symb)

def FortFuncs_init_err_symm():
    return _pycrysfml.FortFuncs_init_err_symm()

def FortFuncs_init_magnetic_space_group_type(mgp):
    return _pycrysfml.FortFuncs_init_magnetic_space_group_type(mgp)

def FortFuncs_inverse_symm(r, t, s, u):
    return _pycrysfml.FortFuncs_inverse_symm(r, t, s, u)

def FortFuncs_latsym(symb, numl=None):
    return _pycrysfml.FortFuncs_latsym(symb, numl)

def FortFuncs_read_bin_spacegroup(spg, lun, ok):
    return _pycrysfml.FortFuncs_read_bin_spacegroup(spg, lun, ok)

def FortFuncs_read_msymm(info, sim, p_mag, ctrl=None):
    return _pycrysfml.FortFuncs_read_msymm(info, sim, p_mag, ctrl)

def FortFuncs_read_symtrans_code(code, n, tr):
    return _pycrysfml.FortFuncs_read_symtrans_code(code, n, tr)

def FortFuncs_read_xsym(info, istart, sim, tt=None, ctrl=None):
    return _pycrysfml.FortFuncs_read_xsym(info, istart, sim, tt, ctrl)

def FortFuncs_searchop(sim, i1, i2, isl):
    return _pycrysfml.FortFuncs_searchop(sim, i1, i2, isl)

def FortFuncs_set_spacegroup(spacegen, spacegroup, ngen=None, mode=None, force_hall=None):
    return _pycrysfml.FortFuncs_set_spacegroup(spacegen, spacegroup, ngen, mode, force_hall)

def FortFuncs_similar_transf_sg(mat, orig, spg, spgn, matkind=None, fix_lat=None):
    return _pycrysfml.FortFuncs_similar_transf_sg(mat, orig, spg, spgn, matkind, fix_lat)

def FortFuncs_sym_prod_st(syma, symb, symab, modlat=None):
    return _pycrysfml.FortFuncs_sym_prod_st(syma, symb, symab, modlat)

def FortFuncs_write_bin_spacegroup(spg, lun):
    return _pycrysfml.FortFuncs_write_bin_spacegroup(spg, lun)

def FortFuncs_write_magnetic_space_group(sg, iunit=None, full=None):
    return _pycrysfml.FortFuncs_write_magnetic_space_group(sg, iunit, full)

def FortFuncs_write_spacegroup(spacegroup, iunit=None, full=None):
    return _pycrysfml.FortFuncs_write_spacegroup(spacegroup, iunit, full)

def FortFuncs_write_sym(lun, indx, sim, tt, p_mag, mag):
    return _pycrysfml.FortFuncs_write_sym(lun, indx, sim, tt, p_mag, mag)

def FortFuncs_write_symtrans_code(n, tr, code):
    return _pycrysfml.FortFuncs_write_symtrans_code(n, tr, code)

def FortFuncs_write_wyckoff(wyckoff, spg, lun=None, sorting=None):
    return _pycrysfml.FortFuncs_write_wyckoff(wyckoff, spg, lun, sorting)

def FortFuncs_copy_ns_spg_to_spg(spgn, spg):
    return _pycrysfml.FortFuncs_copy_ns_spg_to_spg(spgn, spg)

def FortFuncs_alloc_mhlist_array(list):
    return _pycrysfml.FortFuncs_alloc_mhlist_array(list)

def FortFuncs_alloc_refllist_array(list):
    return _pycrysfml.FortFuncs_alloc_refllist_array(list)

def FortFuncs_reflct_array_ctor(array):
    return _pycrysfml.FortFuncs_reflct_array_ctor(array)

def FortFuncs_reflct_append(array, rflctn):
    return _pycrysfml.FortFuncs_reflct_append(array, rflctn)

def FortFuncs_readxtal_structure_file(filenam, cell, spg, a, mode=None, iphase=None, job_info=None, file_list=None, cframe=None):
    return _pycrysfml.FortFuncs_readxtal_structure_file(filenam, cell, spg, a, mode, iphase, job_info, file_list, cframe)

def FortFuncs_hkls_r(h, crystalcell):
    return _pycrysfml.FortFuncs_hkls_r(h, crystalcell)

def FortFuncs_hklgen_sxtal_reflection(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord=None, hlim=None):
    return _pycrysfml.FortFuncs_hklgen_sxtal_reflection(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord, hlim)

def FortFuncs_hklgen_sxtal_list(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord=None, hlim=None):
    return _pycrysfml.FortFuncs_hklgen_sxtal_list(crystalcell, spacegroup, stlmin, stlmax, num_ref, reflex, ord, hlim)

def FortFuncs_hkluni_reflection(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order=None):
    return _pycrysfml.FortFuncs_hkluni_reflection(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order)

def FortFuncs_hkluni_refllist(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order=None):
    return _pycrysfml.FortFuncs_hkluni_refllist(crystalcell, spacegroup, friedel, value1, value2, code, num_ref, reflex, no_order)

def FortFuncs_read_mag_cfl_file(file_cfl, n_ini, n_end, mgp, am, sgo=None, mag_dom=None, cell=None):
    return _pycrysfml.FortFuncs_read_mag_cfl_file(file_cfl, n_ini, n_end, mgp, am, sgo, mag_dom, cell)

def FortFuncs_read_mag_mcif_file(file_mcif, mcell, mgp, am):
    return _pycrysfml.FortFuncs_read_mag_mcif_file(file_mcif, mcell, mgp, am)

def FortFuncs_calcgaussian(x, h):
    return _pycrysfml.FortFuncs_calcgaussian(x, h)

def FortFuncs_calchat(x, h):
    return _pycrysfml.FortFuncs_calchat(x, h)

def FortFuncs_calclorentzian(x, h):
    return _pycrysfml.FortFuncs_calclorentzian(x, h)

def FortFuncs_calcpseudovoigt(x, h, eta):
    return _pycrysfml.FortFuncs_calcpseudovoigt(x, h, eta)

def FortFuncs_gausspeak(x, h, output):
    return _pycrysfml.FortFuncs_gausspeak(x, h, output)

def FortFuncs_read_ill_data(filename, dif_pat, mode=None):
    return _pycrysfml.FortFuncs_read_ill_data(filename, dif_pat, mode)

def FortFuncs_printbasis(matm):
    return _pycrysfml.FortFuncs_printbasis(matm)

def FortFuncs_atom_type_ctor(atom_type_param, locc_param, lvarf_param, utype_param, mbiso_param, occ_param, charge_param, sfacsymb_param, lab_param, mvarf_param, moment_param, lu_param, mocc_param, active_param, mult_param, x_std_param, u_std_param, nvar_param, wyck_param, biso_std_param, lbiso_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, mu_param, lx_param, chemsymb_param, ind_param, thtype_param, atminfo_param, ueq_param, mx_param):
    return _pycrysfml.FortFuncs_atom_type_ctor(atom_type_param, locc_param, lvarf_param, utype_param, mbiso_param, occ_param, charge_param, sfacsymb_param, lab_param, mvarf_param, moment_param, lu_param, mocc_param, active_param, mult_param, x_std_param, u_std_param, nvar_param, wyck_param, biso_std_param, lbiso_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, mu_param, lx_param, chemsymb_param, ind_param, thtype_param, atminfo_param, ueq_param, mx_param)

def FortFuncs_matom_type_ctor(matom_type_param, mmphas_param, locc_param, ski_std_param, lvarf_param, utype_param, mbiso_param, occ_param, lbas_param, charge_param, sfacsymb_param, imat_param, lmphas_param, mphas_param, spher_ski_param, skr_param, lskr_param, lab_param, moment_param, lu_param, mocc_param, active_param, ski_param, mult_param, spher_skr_std_param, x_std_param, u_std_param, lski_param, nvar_param, wyck_param, biso_std_param, lbiso_param, mphas_std_param, mvarf_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, nvk_param, mbas_param, spher_ski_std_param, spher_skr_param, mski_param, skr_std_param, mu_param, mskr_param, lx_param, chemsymb_param, cbas_param, ind_param, cbas_std_param, thtype_param, atminfo_param, ueq_param, mx_param):
    return _pycrysfml.FortFuncs_matom_type_ctor(matom_type_param, mmphas_param, locc_param, ski_std_param, lvarf_param, utype_param, mbiso_param, occ_param, lbas_param, charge_param, sfacsymb_param, imat_param, lmphas_param, mphas_param, spher_ski_param, skr_param, lskr_param, lab_param, moment_param, lu_param, mocc_param, active_param, ski_param, mult_param, spher_skr_std_param, x_std_param, u_std_param, lski_param, nvar_param, wyck_param, biso_std_param, lbiso_param, mphas_std_param, mvarf_param, biso_param, varf_param, u_param, occ_std_param, x_param, z_param, nvk_param, mbas_param, spher_ski_std_param, spher_skr_param, mski_param, skr_std_param, mu_param, mskr_param, lx_param, chemsymb_param, cbas_param, ind_param, cbas_std_param, thtype_param, atminfo_param, ueq_param, mx_param)

def FortFuncs_crystal_cell_type_ctor(crystal_cell_type_param, lang_param, rcellvol_param, cell_std_param, ang_param, bl_minv_param, gr_param, cr_orth_cel_param, bl_m_param, orth_cr_cel_param, carttype_param, rang_param, rcell_param, cell_param, gd_param, cellvol_param, ang_std_param, lcell_param):
    return _pycrysfml.FortFuncs_crystal_cell_type_ctor(crystal_cell_type_param, lang_param, rcellvol_param, cell_std_param, ang_param, bl_minv_param, gr_param, cr_orth_cel_param, bl_m_param, orth_cr_cel_param, carttype_param, rang_param, rcell_param, cell_param, gd_param, cellvol_param, ang_std_param, lcell_param)

def FortFuncs_get_twofold_axes_a(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_a(obj_var, output_value)

def FortFuncs_set_twofold_axes_a(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_a(obj_var, new_value)

def FortFuncs_get_twofold_axes_c(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_c(obj_var, output_value)

def FortFuncs_set_twofold_axes_c(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_c(obj_var, new_value)

def FortFuncs_get_twofold_axes_b(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_b(obj_var, output_value)

def FortFuncs_set_twofold_axes_b(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_b(obj_var, new_value)

def FortFuncs_get_twofold_axes_maxes(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_maxes(obj_var, output_value)

def FortFuncs_set_twofold_axes_maxes(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_maxes(obj_var, new_value)

def FortFuncs_get_twofold_axes_ntwo(obj_var):
    return _pycrysfml.FortFuncs_get_twofold_axes_ntwo(obj_var)

def FortFuncs_set_twofold_axes_ntwo(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_ntwo(obj_var, new_value)

def FortFuncs_get_twofold_axes_cross(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_cross(obj_var, output_value)

def FortFuncs_set_twofold_axes_cross(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_cross(obj_var, new_value)

def FortFuncs_get_twofold_axes_tol(obj_var):
    return _pycrysfml.FortFuncs_get_twofold_axes_tol(obj_var)

def FortFuncs_set_twofold_axes_tol(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_tol(obj_var, new_value)

def FortFuncs_get_twofold_axes_rtwofold(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_rtwofold(obj_var, output_value)

def FortFuncs_set_twofold_axes_rtwofold(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_rtwofold(obj_var, new_value)

def FortFuncs_get_twofold_axes_caxes(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_caxes(obj_var, output_value)

def FortFuncs_set_twofold_axes_caxes(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_caxes(obj_var, new_value)

def FortFuncs_get_twofold_axes_dot(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_dot(obj_var, output_value)

def FortFuncs_set_twofold_axes_dot(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_dot(obj_var, new_value)

def FortFuncs_get_twofold_axes_dtwofold(obj_var, output_value):
    return _pycrysfml.FortFuncs_get_twofold_axes_dtwofold(obj_var, output_value)

def FortFuncs_set_twofold_axes_dtwofold(obj_var, new_value):
    return _pycrysfml.FortFuncs_set_twofold_axes_dtwofold(obj_var, new_value)

def FortFuncs_twofold_axes_type_ctor(twofold_axes_type_param, a_param, c_param, b_param, maxes_param, ntwo_param, cross_param, tol_param, rtwofold_param, caxes_param, dot_param, dtwofold_param):
    return _pycrysfml.FortFuncs_twofold_axes_type_ctor(twofold_axes_type_param, a_param, c_param, b_param, maxes_param, ntwo_param, cross_param, tol_param, rtwofold_param, caxes_param, dot_param, dtwofold_param)

def FortFuncs_zone_axis_type_ctor(zone_axis_type_param, nlayer_param, rx_param, ry_param, uvw_param):
    return _pycrysfml.FortFuncs_zone_axis_type_ctor(zone_axis_type_param, nlayer_param, rx_param, ry_param, uvw_param)

def FortFuncs_interval_type_ctor(interval_type_param, maxb_param, mina_param):
    return _pycrysfml.FortFuncs_interval_type_ctor(interval_type_param, maxb_param, mina_param)

def FortFuncs_msym_oper_type_ctor(msym_oper_type_param, phas_param, rot_param):
    return _pycrysfml.FortFuncs_msym_oper_type_ctor(msym_oper_type_param, phas_param, rot_param)

def FortFuncs_magnetic_group_type_ctor(magnetic_group_type_param, tinv_param, shubnikov_param, spg_param):
    return _pycrysfml.FortFuncs_magnetic_group_type_ctor(magnetic_group_type_param, tinv_param, shubnikov_param, spg_param)

def FortFuncs_reflect_type_ctor(reflect_type_param, h_param, s_param, mult_param):
    return _pycrysfml.FortFuncs_reflect_type_ctor(reflect_type_param, h_param, s_param, mult_param)

def FortFuncs_reflection_type_ctor(reflection_type_param, a_param, aa_param, b_param, bb_param, h_param, sfo_param, s_param, fc_param, w_param, phase_param, mult_param, fo_param):
    return _pycrysfml.FortFuncs_reflection_type_ctor(reflection_type_param, a_param, aa_param, b_param, bb_param, h_param, sfo_param, s_param, fc_param, w_param, phase_param, mult_param, fo_param)

def FortFuncs_ns_sym_oper_type_ctor(ns_sym_oper_type_param, tr_param, rot_param):
    return _pycrysfml.FortFuncs_ns_sym_oper_type_ctor(ns_sym_oper_type_param, tr_param, rot_param)

def FortFuncs_sym_oper_type_ctor(sym_oper_type_param, tr_param, rot_param):
    return _pycrysfml.FortFuncs_sym_oper_type_ctor(sym_oper_type_param, tr_param, rot_param)

def FortFuncs_get_command(command=None, length=None, status=None):
    return _pycrysfml.FortFuncs_get_command(command, length, status)

def FortFuncs_get_command_argument(number, value=None, length=None, status=None):
    return _pycrysfml.FortFuncs_get_command_argument(number, value, length, status)

def FortFuncs_get_environment_variable(name, value=None, length=None, status=None, trim_name=None):
    return _pycrysfml.FortFuncs_get_environment_variable(name, value, length, status, trim_name)

class angle_restraint_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.angle_restraint_type_swiginit(self, _pycrysfml.new_angle_restraint_type())
    __swig_destroy__ = _pycrysfml.delete_angle_restraint_type
    data_ptr = property(_pycrysfml.angle_restraint_type_data_ptr_get, _pycrysfml.angle_restraint_type_data_ptr_set)

# Register angle_restraint_type in _pycrysfml:
_pycrysfml.angle_restraint_type_swigregister(angle_restraint_type)

class anomalous_sc_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.anomalous_sc_type_swiginit(self, _pycrysfml.new_anomalous_sc_type())
    __swig_destroy__ = _pycrysfml.delete_anomalous_sc_type
    data_ptr = property(_pycrysfml.anomalous_sc_type_data_ptr_get, _pycrysfml.anomalous_sc_type_data_ptr_set)

# Register anomalous_sc_type in _pycrysfml:
_pycrysfml.anomalous_sc_type_swigregister(anomalous_sc_type)

class atom_equiv_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.atom_equiv_list_type_swiginit(self, _pycrysfml.new_atom_equiv_list_type())
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_list_type

    def get_atom_equiv_list_element(self, elem, ind):
        return _pycrysfml.atom_equiv_list_type_get_atom_equiv_list_element(self, elem, ind)

    def set_atom_equiv_list_element(self, elem, ind):
        return _pycrysfml.atom_equiv_list_type_set_atom_equiv_list_element(self, elem, ind)

    def get_atom_equiv_list_nauas(self):
        return _pycrysfml.atom_equiv_list_type_get_atom_equiv_list_nauas(self)

    def set_atom_equiv_list_nauas(self, new_value):
        return _pycrysfml.atom_equiv_list_type_set_atom_equiv_list_nauas(self, new_value)
    data_ptr = property(_pycrysfml.atom_equiv_list_type_data_ptr_get, _pycrysfml.atom_equiv_list_type_data_ptr_set)

# Register atom_equiv_list_type in _pycrysfml:
_pycrysfml.atom_equiv_list_type_swigregister(atom_equiv_list_type)

class atom_equiv_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.atom_equiv_type_swiginit(self, _pycrysfml.new_atom_equiv_type())
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_type

    def get_atom_equiv_chemsymb(self, output_value):
        return _pycrysfml.atom_equiv_type_get_atom_equiv_chemsymb(self, output_value)

    def set_atom_equiv_chemsymb(self, new_value):
        return _pycrysfml.atom_equiv_type_set_atom_equiv_chemsymb(self, new_value)

    def get_atom_equiv_mult(self):
        return _pycrysfml.atom_equiv_type_get_atom_equiv_mult(self)

    def set_atom_equiv_mult(self, new_value):
        return _pycrysfml.atom_equiv_type_set_atom_equiv_mult(self, new_value)
    data_ptr = property(_pycrysfml.atom_equiv_type_data_ptr_get, _pycrysfml.atom_equiv_type_data_ptr_set)

# Register atom_equiv_type in _pycrysfml:
_pycrysfml.atom_equiv_type_swigregister(atom_equiv_type)

class atom_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.atom_list_type_swiginit(self, _pycrysfml.new_atom_list_type())
    __swig_destroy__ = _pycrysfml.delete_atom_list_type

    def set_form_factors(self, scf, ok, mess, _lambda=None, lun=None, add_scatt=None, mag=None):
        return _pycrysfml.atom_list_type_set_form_factors(self, scf, ok, mess, _lambda, lun, add_scatt, mag)

    def get_atom_list_element(self, elem, ind):
        return _pycrysfml.atom_list_type_get_atom_list_element(self, elem, ind)

    def set_atom_list_element(self, elem, ind):
        return _pycrysfml.atom_list_type_set_atom_list_element(self, elem, ind)

    def get_atom_list_natoms(self):
        return _pycrysfml.atom_list_type_get_atom_list_natoms(self)

    def set_atom_list_natoms(self, new_value):
        return _pycrysfml.atom_list_type_set_atom_list_natoms(self, new_value)
    data_ptr = property(_pycrysfml.atom_list_type_data_ptr_get, _pycrysfml.atom_list_type_data_ptr_set)

# Register atom_list_type in _pycrysfml:
_pycrysfml.atom_list_type_swigregister(atom_list_type)

class atom_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.atom_type_swiginit(self, _pycrysfml.new_atom_type())
    __swig_destroy__ = _pycrysfml.delete_atom_type

    def get_atom_locc(self):
        return _pycrysfml.atom_type_get_atom_locc(self)

    def set_atom_locc(self, new_value):
        return _pycrysfml.atom_type_set_atom_locc(self, new_value)

    def get_atom_lvarf(self, output_value):
        return _pycrysfml.atom_type_get_atom_lvarf(self, output_value)

    def set_atom_lvarf(self, new_value):
        return _pycrysfml.atom_type_set_atom_lvarf(self, new_value)

    def get_atom_utype(self, output_value):
        return _pycrysfml.atom_type_get_atom_utype(self, output_value)

    def set_atom_utype(self, new_value):
        return _pycrysfml.atom_type_set_atom_utype(self, new_value)

    def get_atom_mbiso(self):
        return _pycrysfml.atom_type_get_atom_mbiso(self)

    def set_atom_mbiso(self, new_value):
        return _pycrysfml.atom_type_set_atom_mbiso(self, new_value)

    def get_atom_occ(self):
        return _pycrysfml.atom_type_get_atom_occ(self)

    def set_atom_occ(self, new_value):
        return _pycrysfml.atom_type_set_atom_occ(self, new_value)

    def get_atom_charge(self):
        return _pycrysfml.atom_type_get_atom_charge(self)

    def set_atom_charge(self, new_value):
        return _pycrysfml.atom_type_set_atom_charge(self, new_value)

    def get_atom_sfacsymb(self, output_value):
        return _pycrysfml.atom_type_get_atom_sfacsymb(self, output_value)

    def set_atom_sfacsymb(self, new_value):
        return _pycrysfml.atom_type_set_atom_sfacsymb(self, new_value)

    def get_atom_lab(self, output_value):
        return _pycrysfml.atom_type_get_atom_lab(self, output_value)

    def set_atom_lab(self, new_value):
        return _pycrysfml.atom_type_set_atom_lab(self, new_value)

    def get_atom_mvarf(self, output_value):
        return _pycrysfml.atom_type_get_atom_mvarf(self, output_value)

    def set_atom_mvarf(self, new_value):
        return _pycrysfml.atom_type_set_atom_mvarf(self, new_value)

    def get_atom_moment(self):
        return _pycrysfml.atom_type_get_atom_moment(self)

    def set_atom_moment(self, new_value):
        return _pycrysfml.atom_type_set_atom_moment(self, new_value)

    def get_atom_lu(self, output_value):
        return _pycrysfml.atom_type_get_atom_lu(self, output_value)

    def set_atom_lu(self, new_value):
        return _pycrysfml.atom_type_set_atom_lu(self, new_value)

    def get_atom_mocc(self):
        return _pycrysfml.atom_type_get_atom_mocc(self)

    def set_atom_mocc(self, new_value):
        return _pycrysfml.atom_type_set_atom_mocc(self, new_value)

    def get_atom_active(self):
        return _pycrysfml.atom_type_get_atom_active(self)

    def set_atom_active(self, new_value):
        return _pycrysfml.atom_type_set_atom_active(self, new_value)

    def get_atom_mult(self):
        return _pycrysfml.atom_type_get_atom_mult(self)

    def set_atom_mult(self, new_value):
        return _pycrysfml.atom_type_set_atom_mult(self, new_value)

    def get_atom_x_std(self, output_value):
        return _pycrysfml.atom_type_get_atom_x_std(self, output_value)

    def set_atom_x_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_x_std(self, new_value)

    def get_atom_u_std(self, output_value):
        return _pycrysfml.atom_type_get_atom_u_std(self, output_value)

    def set_atom_u_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_u_std(self, new_value)

    def get_atom_nvar(self):
        return _pycrysfml.atom_type_get_atom_nvar(self)

    def set_atom_nvar(self, new_value):
        return _pycrysfml.atom_type_set_atom_nvar(self, new_value)

    def get_atom_wyck(self, output_value):
        return _pycrysfml.atom_type_get_atom_wyck(self, output_value)

    def set_atom_wyck(self, new_value):
        return _pycrysfml.atom_type_set_atom_wyck(self, new_value)

    def get_atom_biso_std(self):
        return _pycrysfml.atom_type_get_atom_biso_std(self)

    def set_atom_biso_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_biso_std(self, new_value)

    def get_atom_lbiso(self):
        return _pycrysfml.atom_type_get_atom_lbiso(self)

    def set_atom_lbiso(self, new_value):
        return _pycrysfml.atom_type_set_atom_lbiso(self, new_value)

    def get_atom_biso(self):
        return _pycrysfml.atom_type_get_atom_biso(self)

    def set_atom_biso(self, new_value):
        return _pycrysfml.atom_type_set_atom_biso(self, new_value)

    def get_atom_varf(self, output_value):
        return _pycrysfml.atom_type_get_atom_varf(self, output_value)

    def set_atom_varf(self, new_value):
        return _pycrysfml.atom_type_set_atom_varf(self, new_value)

    def get_atom_u(self, output_value):
        return _pycrysfml.atom_type_get_atom_u(self, output_value)

    def set_atom_u(self, new_value):
        return _pycrysfml.atom_type_set_atom_u(self, new_value)

    def get_atom_occ_std(self):
        return _pycrysfml.atom_type_get_atom_occ_std(self)

    def set_atom_occ_std(self, new_value):
        return _pycrysfml.atom_type_set_atom_occ_std(self, new_value)

    def get_atom_x(self, output_value):
        return _pycrysfml.atom_type_get_atom_x(self, output_value)

    def set_atom_x(self, new_value):
        return _pycrysfml.atom_type_set_atom_x(self, new_value)

    def get_atom_z(self):
        return _pycrysfml.atom_type_get_atom_z(self)

    def set_atom_z(self, new_value):
        return _pycrysfml.atom_type_set_atom_z(self, new_value)

    def get_atom_mu(self, output_value):
        return _pycrysfml.atom_type_get_atom_mu(self, output_value)

    def set_atom_mu(self, new_value):
        return _pycrysfml.atom_type_set_atom_mu(self, new_value)

    def get_atom_lx(self, output_value):
        return _pycrysfml.atom_type_get_atom_lx(self, output_value)

    def set_atom_lx(self, new_value):
        return _pycrysfml.atom_type_set_atom_lx(self, new_value)

    def get_atom_chemsymb(self, output_value):
        return _pycrysfml.atom_type_get_atom_chemsymb(self, output_value)

    def set_atom_chemsymb(self, new_value):
        return _pycrysfml.atom_type_set_atom_chemsymb(self, new_value)

    def get_atom_ind(self, output_value):
        return _pycrysfml.atom_type_get_atom_ind(self, output_value)

    def set_atom_ind(self, new_value):
        return _pycrysfml.atom_type_set_atom_ind(self, new_value)

    def get_atom_thtype(self, output_value):
        return _pycrysfml.atom_type_get_atom_thtype(self, output_value)

    def set_atom_thtype(self, new_value):
        return _pycrysfml.atom_type_set_atom_thtype(self, new_value)

    def get_atom_atminfo(self, output_value):
        return _pycrysfml.atom_type_get_atom_atminfo(self, output_value)

    def set_atom_atminfo(self, new_value):
        return _pycrysfml.atom_type_set_atom_atminfo(self, new_value)

    def get_atom_ueq(self):
        return _pycrysfml.atom_type_get_atom_ueq(self)

    def set_atom_ueq(self, new_value):
        return _pycrysfml.atom_type_set_atom_ueq(self, new_value)

    def get_atom_mx(self, output_value):
        return _pycrysfml.atom_type_get_atom_mx(self, output_value)

    def set_atom_mx(self, new_value):
        return _pycrysfml.atom_type_set_atom_mx(self, new_value)
    data_ptr = property(_pycrysfml.atom_type_data_ptr_get, _pycrysfml.atom_type_data_ptr_set)

# Register atom_type in _pycrysfml:
_pycrysfml.atom_type_swigregister(atom_type)

class atomic_properties_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.atomic_properties_type_swiginit(self, _pycrysfml.new_atomic_properties_type())
    __swig_destroy__ = _pycrysfml.delete_atomic_properties_type
    data_ptr = property(_pycrysfml.atomic_properties_type_data_ptr_get, _pycrysfml.atomic_properties_type_data_ptr_set)

# Register atomic_properties_type in _pycrysfml:
_pycrysfml.atomic_properties_type_swigregister(atomic_properties_type)

class atoms_cell_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.atoms_cell_type_swiginit(self, _pycrysfml.new_atoms_cell_type())
    __swig_destroy__ = _pycrysfml.delete_atoms_cell_type

    def get_atoms_cell_ndist(self):
        return _pycrysfml.atoms_cell_type_get_atoms_cell_ndist(self)

    def set_atoms_cell_ndist(self, new_value):
        return _pycrysfml.atoms_cell_type_set_atoms_cell_ndist(self, new_value)

    def get_atoms_cell_nat(self):
        return _pycrysfml.atoms_cell_type_get_atoms_cell_nat(self)

    def set_atoms_cell_nat(self, new_value):
        return _pycrysfml.atoms_cell_type_set_atoms_cell_nat(self, new_value)
    data_ptr = property(_pycrysfml.atoms_cell_type_data_ptr_get, _pycrysfml.atoms_cell_type_data_ptr_set)

# Register atoms_cell_type in _pycrysfml:
_pycrysfml.atoms_cell_type_swigregister(atoms_cell_type)

class atoms_conf_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.atoms_conf_list_type_swiginit(self, _pycrysfml.new_atoms_conf_list_type())
    __swig_destroy__ = _pycrysfml.delete_atoms_conf_list_type

    def set_table_bvel_params(self, n_bvel=None, soft=None, nread=None):
        return _pycrysfml.atoms_conf_list_type_set_table_bvel_params(self, n_bvel, soft, nread)

    def set_table_d0_b(self, n_bvsm=None, soft=None):
        return _pycrysfml.atoms_conf_list_type_set_table_d0_b(self, n_bvsm, soft)
    data_ptr = property(_pycrysfml.atoms_conf_list_type_data_ptr_get, _pycrysfml.atoms_conf_list_type_data_ptr_set)

# Register atoms_conf_list_type in _pycrysfml:
_pycrysfml.atoms_conf_list_type_swigregister(atoms_conf_list_type)

class basic_numc_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.basic_numc_type_swiginit(self, _pycrysfml.new_basic_numc_type())
    __swig_destroy__ = _pycrysfml.delete_basic_numc_type
    data_ptr = property(_pycrysfml.basic_numc_type_data_ptr_get, _pycrysfml.basic_numc_type_data_ptr_set)

# Register basic_numc_type in _pycrysfml:
_pycrysfml.basic_numc_type_swigregister(basic_numc_type)

class basic_numi_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.basic_numi_type_swiginit(self, _pycrysfml.new_basic_numi_type())
    __swig_destroy__ = _pycrysfml.delete_basic_numi_type
    data_ptr = property(_pycrysfml.basic_numi_type_data_ptr_get, _pycrysfml.basic_numi_type_data_ptr_set)

# Register basic_numi_type in _pycrysfml:
_pycrysfml.basic_numi_type_swigregister(basic_numi_type)

class basic_numr_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.basic_numr_type_swiginit(self, _pycrysfml.new_basic_numr_type())
    __swig_destroy__ = _pycrysfml.delete_basic_numr_type
    data_ptr = property(_pycrysfml.basic_numr_type_data_ptr_get, _pycrysfml.basic_numr_type_data_ptr_set)

# Register basic_numr_type in _pycrysfml:
_pycrysfml.basic_numr_type_swigregister(basic_numr_type)

class bvel_par_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.bvel_par_type_swiginit(self, _pycrysfml.new_bvel_par_type())
    __swig_destroy__ = _pycrysfml.delete_bvel_par_type
    data_ptr = property(_pycrysfml.bvel_par_type_data_ptr_get, _pycrysfml.bvel_par_type_data_ptr_set)

# Register bvel_par_type in _pycrysfml:
_pycrysfml.bvel_par_type_swigregister(bvel_par_type)

class bvs_par_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.bvs_par_type_swiginit(self, _pycrysfml.new_bvs_par_type())
    __swig_destroy__ = _pycrysfml.delete_bvs_par_type
    data_ptr = property(_pycrysfml.bvs_par_type_data_ptr_get, _pycrysfml.bvs_par_type_data_ptr_set)

# Register bvs_par_type in _pycrysfml:
_pycrysfml.bvs_par_type_swigregister(bvs_par_type)

class calibration_detector_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.calibration_detector_type_swiginit(self, _pycrysfml.new_calibration_detector_type())
    __swig_destroy__ = _pycrysfml.delete_calibration_detector_type
    data_ptr = property(_pycrysfml.calibration_detector_type_data_ptr_get, _pycrysfml.calibration_detector_type_data_ptr_set)

# Register calibration_detector_type in _pycrysfml:
_pycrysfml.calibration_detector_type_swigregister(calibration_detector_type)

class chem_info_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.chem_info_type_swiginit(self, _pycrysfml.new_chem_info_type())
    __swig_destroy__ = _pycrysfml.delete_chem_info_type
    data_ptr = property(_pycrysfml.chem_info_type_data_ptr_get, _pycrysfml.chem_info_type_data_ptr_set)

# Register chem_info_type in _pycrysfml:
_pycrysfml.chem_info_type_swigregister(chem_info_type)

class coordination_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.coordination_type_swiginit(self, _pycrysfml.new_coordination_type())
    __swig_destroy__ = _pycrysfml.delete_coordination_type
    data_ptr = property(_pycrysfml.coordination_type_data_ptr_get, _pycrysfml.coordination_type_data_ptr_set)

# Register coordination_type in _pycrysfml:
_pycrysfml.coordination_type_swigregister(coordination_type)

class crystal_cell_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.crystal_cell_type_swiginit(self, _pycrysfml.new_crystal_cell_type())
    __swig_destroy__ = _pycrysfml.delete_crystal_cell_type

    def change_setting_cell(self, mat, celln, matkind=None):
        return _pycrysfml.crystal_cell_type_change_setting_cell(self, mat, celln, matkind)

    def get_cryst_family(self, car_family, car_symbol, car_system):
        return _pycrysfml.crystal_cell_type_get_cryst_family(self, car_family, car_symbol, car_system)

    def get_deriv_orth_cell(self, de_orthcell, cartypein=None):
        return _pycrysfml.crystal_cell_type_get_deriv_orth_cell(self, de_orthcell, cartypein)

    def get_transfm_matrix(self, cellb, trm, ok, tol=None):
        return _pycrysfml.crystal_cell_type_get_transfm_matrix(self, cellb, trm, ok, tol)

    def get_twofold_axes(self, tol, twofold):
        return _pycrysfml.crystal_cell_type_get_twofold_axes(self, tol, twofold)

    def get_crystal_cell_lang(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_lang(self, output_value)

    def set_crystal_cell_lang(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_lang(self, new_value)

    def get_crystal_cell_rcellvol(self):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_rcellvol(self)

    def set_crystal_cell_rcellvol(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_rcellvol(self, new_value)

    def get_crystal_cell_cell_std(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cell_std(self, output_value)

    def set_crystal_cell_cell_std(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cell_std(self, new_value)

    def get_crystal_cell_ang(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_ang(self, output_value)

    def set_crystal_cell_ang(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_ang(self, new_value)

    def get_crystal_cell_bl_minv(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_bl_minv(self, output_value)

    def set_crystal_cell_bl_minv(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_bl_minv(self, new_value)

    def get_crystal_cell_gr(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_gr(self, output_value)

    def set_crystal_cell_gr(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_gr(self, new_value)

    def get_crystal_cell_cr_orth_cel(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cr_orth_cel(self, output_value)

    def set_crystal_cell_cr_orth_cel(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cr_orth_cel(self, new_value)

    def get_crystal_cell_bl_m(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_bl_m(self, output_value)

    def set_crystal_cell_bl_m(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_bl_m(self, new_value)

    def get_crystal_cell_orth_cr_cel(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_orth_cr_cel(self, output_value)

    def set_crystal_cell_orth_cr_cel(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_orth_cr_cel(self, new_value)

    def get_crystal_cell_carttype(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_carttype(self, output_value)

    def set_crystal_cell_carttype(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_carttype(self, new_value)

    def get_crystal_cell_rang(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_rang(self, output_value)

    def set_crystal_cell_rang(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_rang(self, new_value)

    def get_crystal_cell_rcell(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_rcell(self, output_value)

    def set_crystal_cell_rcell(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_rcell(self, new_value)

    def get_crystal_cell_cell(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cell(self, output_value)

    def set_crystal_cell_cell(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cell(self, new_value)

    def get_crystal_cell_gd(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_gd(self, output_value)

    def set_crystal_cell_gd(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_gd(self, new_value)

    def get_crystal_cell_cellvol(self):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_cellvol(self)

    def set_crystal_cell_cellvol(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_cellvol(self, new_value)

    def get_crystal_cell_ang_std(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_ang_std(self, output_value)

    def set_crystal_cell_ang_std(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_ang_std(self, new_value)

    def get_crystal_cell_lcell(self, output_value):
        return _pycrysfml.crystal_cell_type_get_crystal_cell_lcell(self, output_value)

    def set_crystal_cell_lcell(self, new_value):
        return _pycrysfml.crystal_cell_type_set_crystal_cell_lcell(self, new_value)
    data_ptr = property(_pycrysfml.crystal_cell_type_data_ptr_get, _pycrysfml.crystal_cell_type_data_ptr_set)

# Register crystal_cell_type in _pycrysfml:
_pycrysfml.crystal_cell_type_swigregister(crystal_cell_type)

class cube_info_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.cube_info_type_swiginit(self, _pycrysfml.new_cube_info_type())
    __swig_destroy__ = _pycrysfml.delete_cube_info_type
    data_ptr = property(_pycrysfml.cube_info_type_data_ptr_get, _pycrysfml.cube_info_type_data_ptr_set)

# Register cube_info_type in _pycrysfml:
_pycrysfml.cube_info_type_swigregister(cube_info_type)

class deriv_tof_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.deriv_tof_type_swiginit(self, _pycrysfml.new_deriv_tof_type())
    __swig_destroy__ = _pycrysfml.delete_deriv_tof_type
    data_ptr = property(_pycrysfml.deriv_tof_type_data_ptr_get, _pycrysfml.deriv_tof_type_data_ptr_set)

# Register deriv_tof_type in _pycrysfml:
_pycrysfml.deriv_tof_type_swigregister(deriv_tof_type)

class diffraction_pattern_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.diffraction_pattern_type_swiginit(self, _pycrysfml.new_diffraction_pattern_type())
    __swig_destroy__ = _pycrysfml.delete_diffraction_pattern_type

    def get_diffraction_pattern_scal(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_scal(self)

    def set_diffraction_pattern_scal(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_scal(self, new_value)

    def get_diffraction_pattern_conv(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_conv(self, output_value)

    def set_diffraction_pattern_conv(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_conv(self, new_value)

    def get_diffraction_pattern_instr(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_instr(self, output_value)

    def set_diffraction_pattern_instr(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_instr(self, new_value)

    def get_diffraction_pattern_yax_text(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_yax_text(self, output_value)

    def set_diffraction_pattern_yax_text(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_yax_text(self, new_value)

    def get_diffraction_pattern_diff_kind(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_diff_kind(self, output_value)

    def set_diffraction_pattern_diff_kind(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_diff_kind(self, new_value)

    def get_diffraction_pattern_xmin(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xmin(self)

    def set_diffraction_pattern_xmin(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xmin(self, new_value)

    def get_diffraction_pattern_norm_mon(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_norm_mon(self)

    def set_diffraction_pattern_norm_mon(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_norm_mon(self, new_value)

    def get_diffraction_pattern_ymin(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ymin(self)

    def set_diffraction_pattern_ymin(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ymin(self, new_value)

    def get_diffraction_pattern_monitor(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_monitor(self)

    def set_diffraction_pattern_monitor(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_monitor(self, new_value)

    def get_diffraction_pattern_filepath(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_filepath(self, output_value)

    def set_diffraction_pattern_filepath(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_filepath(self, new_value)

    def get_diffraction_pattern_title(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_title(self, output_value)

    def set_diffraction_pattern_title(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_title(self, new_value)

    def get_diffraction_pattern_filename(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_filename(self, output_value)

    def set_diffraction_pattern_filename(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_filename(self, new_value)

    def get_diffraction_pattern_scat_var(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_scat_var(self, output_value)

    def set_diffraction_pattern_scat_var(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_scat_var(self, new_value)

    def get_diffraction_pattern_step(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_step(self)

    def set_diffraction_pattern_step(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_step(self, new_value)

    def get_diffraction_pattern_x(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_x(self, output_value)

    def set_diffraction_pattern_x(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_x(self, new_value)

    def get_diffraction_pattern_ct_step(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ct_step(self)

    def set_diffraction_pattern_ct_step(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ct_step(self, new_value)

    def get_diffraction_pattern_xax_text(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xax_text(self, output_value)

    def set_diffraction_pattern_xax_text(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xax_text(self, new_value)

    def get_diffraction_pattern_ymax(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ymax(self)

    def set_diffraction_pattern_ymax(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ymax(self, new_value)

    def get_diffraction_pattern_col_time(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_col_time(self)

    def set_diffraction_pattern_col_time(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_col_time(self, new_value)

    def get_diffraction_pattern_tset(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_tset(self)

    def set_diffraction_pattern_tset(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_tset(self, new_value)

    def get_diffraction_pattern_tsamp(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_tsamp(self)

    def set_diffraction_pattern_tsamp(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_tsamp(self, new_value)

    def get_diffraction_pattern_bgr(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_bgr(self, output_value)

    def set_diffraction_pattern_bgr(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_bgr(self, new_value)

    def get_diffraction_pattern_xmax(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xmax(self)

    def set_diffraction_pattern_xmax(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xmax(self, new_value)

    def get_diffraction_pattern_y(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_y(self, output_value)

    def set_diffraction_pattern_y(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_y(self, new_value)

    def get_diffraction_pattern_npts(self):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_npts(self)

    def set_diffraction_pattern_npts(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_npts(self, new_value)

    def get_diffraction_pattern_sigma(self, output_value):
        return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_sigma(self, output_value)

    def set_diffraction_pattern_sigma(self, new_value):
        return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_sigma(self, new_value)
    data_ptr = property(_pycrysfml.diffraction_pattern_type_data_ptr_get, _pycrysfml.diffraction_pattern_type_data_ptr_set)

# Register diffraction_pattern_type in _pycrysfml:
_pycrysfml.diffraction_pattern_type_swigregister(diffraction_pattern_type)

class diffractometer_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.diffractometer_type_swiginit(self, _pycrysfml.new_diffractometer_type())
    __swig_destroy__ = _pycrysfml.delete_diffractometer_type
    data_ptr = property(_pycrysfml.diffractometer_type_data_ptr_get, _pycrysfml.diffractometer_type_data_ptr_set)

# Register diffractometer_type in _pycrysfml:
_pycrysfml.diffractometer_type_swigregister(diffractometer_type)

class distance_restraint_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.distance_restraint_type_swiginit(self, _pycrysfml.new_distance_restraint_type())
    __swig_destroy__ = _pycrysfml.delete_distance_restraint_type
    data_ptr = property(_pycrysfml.distance_restraint_type_data_ptr_get, _pycrysfml.distance_restraint_type_data_ptr_set)

# Register distance_restraint_type in _pycrysfml:
_pycrysfml.distance_restraint_type_swigregister(distance_restraint_type)

class file_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.file_list_type_swiginit(self, _pycrysfml.new_file_list_type())
    __swig_destroy__ = _pycrysfml.delete_file_list_type

    def get_file_list_nlines(self):
        return _pycrysfml.file_list_type_get_file_list_nlines(self)

    def set_file_list_nlines(self, new_value):
        return _pycrysfml.file_list_type_set_file_list_nlines(self, new_value)
    data_ptr = property(_pycrysfml.file_list_type_data_ptr_get, _pycrysfml.file_list_type_data_ptr_set)

# Register file_list_type in _pycrysfml:
_pycrysfml.file_list_type_swigregister(file_list_type)

class generic_numor_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.generic_numor_type_swiginit(self, _pycrysfml.new_generic_numor_type())
    __swig_destroy__ = _pycrysfml.delete_generic_numor_type
    data_ptr = property(_pycrysfml.generic_numor_type_data_ptr_get, _pycrysfml.generic_numor_type_data_ptr_set)

# Register generic_numor_type in _pycrysfml:
_pycrysfml.generic_numor_type_swigregister(generic_numor_type)

class group_k_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.group_k_type_swiginit(self, _pycrysfml.new_group_k_type())
    __swig_destroy__ = _pycrysfml.delete_group_k_type

    def set_gk(self, spgk, ext=None):
        return _pycrysfml.group_k_type_set_gk(self, spgk, ext)
    data_ptr = property(_pycrysfml.group_k_type_data_ptr_get, _pycrysfml.group_k_type_data_ptr_set)

# Register group_k_type in _pycrysfml:
_pycrysfml.group_k_type_swigregister(group_k_type)

class ill_data_record_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.ill_data_record_type_swiginit(self, _pycrysfml.new_ill_data_record_type())
    __swig_destroy__ = _pycrysfml.delete_ill_data_record_type
    data_ptr = property(_pycrysfml.ill_data_record_type_data_ptr_get, _pycrysfml.ill_data_record_type_data_ptr_set)

# Register ill_data_record_type in _pycrysfml:
_pycrysfml.ill_data_record_type_swigregister(ill_data_record_type)

class interval_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.interval_type_swiginit(self, _pycrysfml.new_interval_type())
    __swig_destroy__ = _pycrysfml.delete_interval_type

    def get_interval_maxb(self):
        return _pycrysfml.interval_type_get_interval_maxb(self)

    def set_interval_maxb(self, new_value):
        return _pycrysfml.interval_type_set_interval_maxb(self, new_value)

    def get_interval_mina(self):
        return _pycrysfml.interval_type_get_interval_mina(self)

    def set_interval_mina(self, new_value):
        return _pycrysfml.interval_type_set_interval_mina(self, new_value)
    data_ptr = property(_pycrysfml.interval_type_data_ptr_get, _pycrysfml.interval_type_data_ptr_set)

# Register interval_type in _pycrysfml:
_pycrysfml.interval_type_swigregister(interval_type)

class job_info_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.job_info_type_swiginit(self, _pycrysfml.new_job_info_type())
    __swig_destroy__ = _pycrysfml.delete_job_info_type

    def get_job_info_title(self, output_value):
        return _pycrysfml.job_info_type_get_job_info_title(self, output_value)

    def set_job_info_title(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_title(self, new_value)

    def get_job_info_num_phases(self):
        return _pycrysfml.job_info_type_get_job_info_num_phases(self)

    def set_job_info_num_phases(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_num_phases(self, new_value)

    def get_job_info_num_patterns(self):
        return _pycrysfml.job_info_type_get_job_info_num_patterns(self)

    def set_job_info_num_patterns(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_num_patterns(self, new_value)

    def get_job_info_num_cmd(self):
        return _pycrysfml.job_info_type_get_job_info_num_cmd(self)

    def set_job_info_num_cmd(self, new_value):
        return _pycrysfml.job_info_type_set_job_info_num_cmd(self, new_value)
    data_ptr = property(_pycrysfml.job_info_type_data_ptr_get, _pycrysfml.job_info_type_data_ptr_set)

# Register job_info_type in _pycrysfml:
_pycrysfml.job_info_type_swigregister(job_info_type)

class lattice_centring_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.lattice_centring_type_swiginit(self, _pycrysfml.new_lattice_centring_type())
    __swig_destroy__ = _pycrysfml.delete_lattice_centring_type
    data_ptr = property(_pycrysfml.lattice_centring_type_data_ptr_get, _pycrysfml.lattice_centring_type_data_ptr_set)

# Register lattice_centring_type in _pycrysfml:
_pycrysfml.lattice_centring_type_swigregister(lattice_centring_type)

class magh_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.magh_list_type_swiginit(self, _pycrysfml.new_magh_list_type())
    __swig_destroy__ = _pycrysfml.delete_magh_list_type

    def get_magh_list_element(self, elem, ind):
        return _pycrysfml.magh_list_type_get_magh_list_element(self, elem, ind)

    def set_magh_list_element(self, elem, ind):
        return _pycrysfml.magh_list_type_set_magh_list_element(self, elem, ind)

    def get_magh_list_nref(self):
        return _pycrysfml.magh_list_type_get_magh_list_nref(self)

    def set_magh_list_nref(self, new_value):
        return _pycrysfml.magh_list_type_set_magh_list_nref(self, new_value)
    data_ptr = property(_pycrysfml.magh_list_type_data_ptr_get, _pycrysfml.magh_list_type_data_ptr_set)

# Register magh_list_type in _pycrysfml:
_pycrysfml.magh_list_type_swigregister(magh_list_type)

class magh_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.magh_type_swiginit(self, _pycrysfml.new_magh_type())
    __swig_destroy__ = _pycrysfml.delete_magh_type

    def get_msf(self, output):
        return _pycrysfml.magh_type_get_msf(self, output)

    def set_msf(self, value):
        return _pycrysfml.magh_type_set_msf(self, value)

    def get_miv(self, output):
        return _pycrysfml.magh_type_get_miv(self, output)

    def set_miv(self, value):
        return _pycrysfml.magh_type_set_miv(self, value)

    def get_magh_num_k(self):
        return _pycrysfml.magh_type_get_magh_num_k(self)

    def set_magh_num_k(self, new_value):
        return _pycrysfml.magh_type_set_magh_num_k(self, new_value)

    def get_magh_h(self, output_value):
        return _pycrysfml.magh_type_get_magh_h(self, output_value)

    def set_magh_h(self, new_value):
        return _pycrysfml.magh_type_set_magh_h(self, new_value)

    def get_magh_sqmiv(self):
        return _pycrysfml.magh_type_get_magh_sqmiv(self)

    def set_magh_sqmiv(self, new_value):
        return _pycrysfml.magh_type_set_magh_sqmiv(self, new_value)

    def get_magh_s(self):
        return _pycrysfml.magh_type_get_magh_s(self)

    def set_magh_s(self, new_value):
        return _pycrysfml.magh_type_set_magh_s(self, new_value)

    def get_magh_signp(self):
        return _pycrysfml.magh_type_get_magh_signp(self)

    def set_magh_signp(self, new_value):
        return _pycrysfml.magh_type_set_magh_signp(self, new_value)

    def get_magh_keqv_minus(self):
        return _pycrysfml.magh_type_get_magh_keqv_minus(self)

    def set_magh_keqv_minus(self, new_value):
        return _pycrysfml.magh_type_set_magh_keqv_minus(self, new_value)

    def get_magh_mult(self):
        return _pycrysfml.magh_type_get_magh_mult(self)

    def set_magh_mult(self, new_value):
        return _pycrysfml.magh_type_set_magh_mult(self, new_value)
    data_ptr = property(_pycrysfml.magh_type_data_ptr_get, _pycrysfml.magh_type_data_ptr_set)

# Register magh_type in _pycrysfml:
_pycrysfml.magh_type_swigregister(magh_type)

class maghd_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.maghd_list_type_swiginit(self, _pycrysfml.new_maghd_list_type())
    __swig_destroy__ = _pycrysfml.delete_maghd_list_type

    def get_maghd_list_element(self, elem, ind):
        return _pycrysfml.maghd_list_type_get_maghd_list_element(self, elem, ind)

    def set_maghd_list_element(self, elem, ind):
        return _pycrysfml.maghd_list_type_set_maghd_list_element(self, elem, ind)

    def get_maghd_list_nref(self):
        return _pycrysfml.maghd_list_type_get_maghd_list_nref(self)

    def set_maghd_list_nref(self, new_value):
        return _pycrysfml.maghd_list_type_set_maghd_list_nref(self, new_value)
    data_ptr = property(_pycrysfml.maghd_list_type_data_ptr_get, _pycrysfml.maghd_list_type_data_ptr_set)

# Register maghd_list_type in _pycrysfml:
_pycrysfml.maghd_list_type_swigregister(maghd_list_type)

class maghd_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.maghd_type_swiginit(self, _pycrysfml.new_maghd_type())
    __swig_destroy__ = _pycrysfml.delete_maghd_type

    def get_maghd_sqamiv(self):
        return _pycrysfml.maghd_type_get_maghd_sqamiv(self)

    def set_maghd_sqamiv(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_sqamiv(self, new_value)

    def get_maghd_num_k(self):
        return _pycrysfml.maghd_type_get_maghd_num_k(self)

    def set_maghd_num_k(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_num_k(self, new_value)

    def get_maghd_h(self, output_value):
        return _pycrysfml.maghd_type_get_maghd_h(self, output_value)

    def set_maghd_h(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_h(self, new_value)

    def get_maghd_sqmiv(self):
        return _pycrysfml.maghd_type_get_maghd_sqmiv(self)

    def set_maghd_sqmiv(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_sqmiv(self, new_value)

    def get_maghd_s(self):
        return _pycrysfml.maghd_type_get_maghd_s(self)

    def set_maghd_s(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_s(self, new_value)

    def get_maghd_signp(self):
        return _pycrysfml.maghd_type_get_maghd_signp(self)

    def set_maghd_signp(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_signp(self, new_value)

    def get_maghd_keqv_minus(self):
        return _pycrysfml.maghd_type_get_maghd_keqv_minus(self)

    def set_maghd_keqv_minus(self, new_value):
        return _pycrysfml.maghd_type_set_maghd_keqv_minus(self, new_value)
    data_ptr = property(_pycrysfml.maghd_type_data_ptr_get, _pycrysfml.maghd_type_data_ptr_set)

# Register maghd_type in _pycrysfml:
_pycrysfml.maghd_type_swigregister(maghd_type)

class magnetic_domain_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.magnetic_domain_type_swiginit(self, _pycrysfml.new_magnetic_domain_type())
    __swig_destroy__ = _pycrysfml.delete_magnetic_domain_type

    def get_magnetic_domain_chir(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_chir(self)

    def set_magnetic_domain_chir(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_chir(self, new_value)

    def get_magnetic_domain_pop_std(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_pop_std(self, output_value)

    def set_magnetic_domain_pop_std(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_pop_std(self, new_value)

    def get_magnetic_domain_mpop(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_mpop(self, output_value)

    def set_magnetic_domain_mpop(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_mpop(self, new_value)

    def get_magnetic_domain_nd(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_nd(self)

    def set_magnetic_domain_nd(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_nd(self, new_value)

    def get_magnetic_domain_lpop(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_lpop(self, output_value)

    def set_magnetic_domain_lpop(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_lpop(self, new_value)

    def get_magnetic_domain_pop(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_pop(self, output_value)

    def set_magnetic_domain_pop(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_pop(self, new_value)

    def get_magnetic_domain_twin(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_twin(self)

    def set_magnetic_domain_twin(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_twin(self, new_value)

    def get_magnetic_domain_dmat(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_dmat(self, output_value)

    def set_magnetic_domain_dmat(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_dmat(self, new_value)

    def get_magnetic_domain_dt(self, output_value):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_dt(self, output_value)

    def set_magnetic_domain_dt(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_dt(self, new_value)

    def get_magnetic_domain_trans(self):
        return _pycrysfml.magnetic_domain_type_get_magnetic_domain_trans(self)

    def set_magnetic_domain_trans(self, new_value):
        return _pycrysfml.magnetic_domain_type_set_magnetic_domain_trans(self, new_value)
    data_ptr = property(_pycrysfml.magnetic_domain_type_data_ptr_get, _pycrysfml.magnetic_domain_type_data_ptr_set)

# Register magnetic_domain_type in _pycrysfml:
_pycrysfml.magnetic_domain_type_swigregister(magnetic_domain_type)

class magnetic_form_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.magnetic_form_type_swiginit(self, _pycrysfml.new_magnetic_form_type())
    __swig_destroy__ = _pycrysfml.delete_magnetic_form_type
    data_ptr = property(_pycrysfml.magnetic_form_type_data_ptr_get, _pycrysfml.magnetic_form_type_data_ptr_set)

# Register magnetic_form_type in _pycrysfml:
_pycrysfml.magnetic_form_type_swigregister(magnetic_form_type)

class magnetic_group_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.magnetic_group_type_swiginit(self, _pycrysfml.new_magnetic_group_type())
    __swig_destroy__ = _pycrysfml.delete_magnetic_group_type

    def get_magnetic_group_tinv(self, output_value):
        return _pycrysfml.magnetic_group_type_get_magnetic_group_tinv(self, output_value)

    def set_magnetic_group_tinv(self, new_value):
        return _pycrysfml.magnetic_group_type_set_magnetic_group_tinv(self, new_value)

    def get_magnetic_group_shubnikov(self, output_value):
        return _pycrysfml.magnetic_group_type_get_magnetic_group_shubnikov(self, output_value)

    def set_magnetic_group_shubnikov(self, new_value):
        return _pycrysfml.magnetic_group_type_set_magnetic_group_shubnikov(self, new_value)

    def get_magnetic_group_spg(self, output_value):
        return _pycrysfml.magnetic_group_type_get_magnetic_group_spg(self, output_value)

    def set_magnetic_group_spg(self, new_value):
        return _pycrysfml.magnetic_group_type_set_magnetic_group_spg(self, new_value)
    data_ptr = property(_pycrysfml.magnetic_group_type_data_ptr_get, _pycrysfml.magnetic_group_type_data_ptr_set)

# Register magnetic_group_type in _pycrysfml:
_pycrysfml.magnetic_group_type_swigregister(magnetic_group_type)

class magnetic_space_group_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.magnetic_space_group_type_swiginit(self, _pycrysfml.new_magnetic_space_group_type())
    __swig_destroy__ = _pycrysfml.delete_magnetic_space_group_type

    def get_magnetic_space_group_m_constr(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_m_constr(self)

    def set_magnetic_space_group_m_constr(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_m_constr(self, new_value)

    def get_magnetic_space_group_centre_coord(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centre_coord(self, output_value)

    def set_magnetic_space_group_centre_coord(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centre_coord(self, new_value)

    def get_magnetic_space_group_n_wyck(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_wyck(self)

    def set_magnetic_space_group_n_wyck(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_wyck(self, new_value)

    def get_magnetic_space_group_bns_symbol(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_bns_symbol(self, output_value)

    def set_magnetic_space_group_bns_symbol(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_bns_symbol(self, new_value)

    def get_magnetic_space_group_bns_number(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_bns_number(self, output_value)

    def set_magnetic_space_group_bns_number(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_bns_number(self, new_value)

    def get_magnetic_space_group_sh_number(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_sh_number(self)

    def set_magnetic_space_group_sh_number(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_sh_number(self, new_value)

    def get_magnetic_space_group_crystalsys(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_crystalsys(self, output_value)

    def set_magnetic_space_group_crystalsys(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_crystalsys(self, new_value)

    def get_magnetic_space_group_m_cell(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_m_cell(self)

    def set_magnetic_space_group_m_cell(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_m_cell(self, new_value)

    def get_magnetic_space_group_num_lat(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_lat(self)

    def set_magnetic_space_group_num_lat(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_lat(self, new_value)

    def get_magnetic_space_group_num_alat(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_alat(self)

    def set_magnetic_space_group_num_alat(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_alat(self, new_value)

    def get_magnetic_space_group_centred(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centred(self)

    def set_magnetic_space_group_centred(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centred(self, new_value)

    def get_magnetic_space_group_spg_lat(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_spg_lat(self, output_value)

    def set_magnetic_space_group_spg_lat(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_spg_lat(self, new_value)

    def get_magnetic_space_group_parent_num(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_parent_num(self)

    def set_magnetic_space_group_parent_num(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_parent_num(self, new_value)

    def get_magnetic_space_group_magtype(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_magtype(self)

    def set_magnetic_space_group_magtype(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_magtype(self, new_value)

    def get_magnetic_space_group_n_kv(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_kv(self)

    def set_magnetic_space_group_n_kv(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_kv(self, new_value)

    def get_magnetic_space_group_og_number(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_og_number(self, output_value)

    def set_magnetic_space_group_og_number(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_og_number(self, new_value)

    def get_magnetic_space_group_n_irreps(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_irreps(self)

    def set_magnetic_space_group_n_irreps(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_irreps(self, new_value)

    def get_magnetic_space_group_spg_latsy(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_spg_latsy(self, output_value)

    def set_magnetic_space_group_spg_latsy(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_spg_latsy(self, new_value)

    def get_magnetic_space_group_num_gen(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_gen(self)

    def set_magnetic_space_group_num_gen(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_gen(self, new_value)

    def get_magnetic_space_group_standard_setting(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_standard_setting(self)

    def set_magnetic_space_group_standard_setting(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_standard_setting(self, new_value)

    def get_magnetic_space_group_parent_spg(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_parent_spg(self, output_value)

    def set_magnetic_space_group_parent_spg(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_parent_spg(self, new_value)

    def get_magnetic_space_group_og_symbol(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_og_symbol(self, output_value)

    def set_magnetic_space_group_og_symbol(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_og_symbol(self, new_value)

    def get_magnetic_space_group_centre(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centre(self, output_value)

    def set_magnetic_space_group_centre(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centre(self, new_value)

    def get_magnetic_space_group_mcif(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_mcif(self)

    def set_magnetic_space_group_mcif(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_mcif(self, new_value)

    def get_magnetic_space_group_numops(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_numops(self)

    def set_magnetic_space_group_numops(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_numops(self, new_value)

    def get_magnetic_space_group_trn_to_standard(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_trn_to_standard(self, output_value)

    def set_magnetic_space_group_trn_to_standard(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_trn_to_standard(self, new_value)

    def get_magnetic_space_group_trn_from_parent(self, output_value):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_trn_from_parent(self, output_value)

    def set_magnetic_space_group_trn_from_parent(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_trn_from_parent(self, new_value)

    def get_magnetic_space_group_multip(self):
        return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_multip(self)

    def set_magnetic_space_group_multip(self, new_value):
        return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_multip(self, new_value)
    data_ptr = property(_pycrysfml.magnetic_space_group_type_data_ptr_get, _pycrysfml.magnetic_space_group_type_data_ptr_set)

# Register magnetic_space_group_type in _pycrysfml:
_pycrysfml.magnetic_space_group_type_swigregister(magnetic_space_group_type)

class magsymm_k_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.magsymm_k_type_swiginit(self, _pycrysfml.new_magsymm_k_type())
    __swig_destroy__ = _pycrysfml.delete_magsymm_k_type

    def get_basis_element(self, irrrepnum, symopnum, vectornum, v):
        return _pycrysfml.magsymm_k_type_get_basis_element(self, irrrepnum, symopnum, vectornum, v)

    def get_kvector(self, elem, ind):
        return _pycrysfml.magsymm_k_type_get_kvector(self, elem, ind)

    def set_basis_element(self, irrrepnum, symopnum, vectornum, v):
        return _pycrysfml.magsymm_k_type_set_basis_element(self, irrrepnum, symopnum, vectornum, v)

    def get_magsymm_k_latt(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_latt(self, output_value)

    def set_magsymm_k_latt(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_latt(self, new_value)

    def get_magsymm_k_numops(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_numops(self)

    def set_magsymm_k_numops(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_numops(self, new_value)

    def get_magsymm_k_bns_symbol(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_bns_symbol(self, output_value)

    def set_magsymm_k_bns_symbol(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_bns_symbol(self, new_value)

    def get_magsymm_k_bns_number(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_bns_number(self, output_value)

    def set_magsymm_k_bns_number(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_bns_number(self, new_value)

    def get_magsymm_k_mcentred(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_mcentred(self)

    def set_magsymm_k_mcentred(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_mcentred(self, new_value)

    def get_magsymm_k_magmodel(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_magmodel(self, output_value)

    def set_magsymm_k_magmodel(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_magmodel(self, new_value)

    def get_magsymm_k_kvec(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_kvec(self, output_value)

    def set_magsymm_k_kvec(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_kvec(self, new_value)

    def get_magsymm_k_nmsym(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nmsym(self)

    def set_magsymm_k_nmsym(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nmsym(self, new_value)

    def get_magsymm_k_num_lat(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_num_lat(self)

    def set_magsymm_k_num_lat(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_num_lat(self, new_value)

    def get_magsymm_k_small_irrep_dim(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_small_irrep_dim(self, output_value)

    def set_magsymm_k_small_irrep_dim(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_small_irrep_dim(self, new_value)

    def get_magsymm_k_ltr(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_ltr(self, output_value)

    def set_magsymm_k_ltr(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_ltr(self, new_value)

    def get_magsymm_k_parent_num(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_parent_num(self)

    def set_magsymm_k_parent_num(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_parent_num(self, new_value)

    def get_magsymm_k_sk_type(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_sk_type(self, output_value)

    def set_magsymm_k_sk_type(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_sk_type(self, new_value)

    def get_magsymm_k_nirreps(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nirreps(self)

    def set_magsymm_k_nirreps(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nirreps(self, new_value)

    def get_magsymm_k_magtype(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_magtype(self)

    def set_magsymm_k_magtype(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_magtype(self, new_value)

    def get_magsymm_k_og_number(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_og_number(self, output_value)

    def set_magsymm_k_og_number(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_og_number(self, new_value)

    def get_magsymm_k_irrep_dim(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_irrep_dim(self, output_value)

    def set_magsymm_k_irrep_dim(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_irrep_dim(self, new_value)

    def get_magsymm_k_irrep_modes_number(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_irrep_modes_number(self, output_value)

    def set_magsymm_k_irrep_modes_number(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_irrep_modes_number(self, new_value)

    def get_magsymm_k_nkv(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nkv(self)

    def set_magsymm_k_nkv(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nkv(self, new_value)

    def get_magsymm_k_centred(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_centred(self)

    def set_magsymm_k_centred(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_centred(self, new_value)

    def get_magsymm_k_parent_spg(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_parent_spg(self, output_value)

    def set_magsymm_k_parent_spg(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_parent_spg(self, new_value)

    def get_magsymm_k_og_symbol(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_og_symbol(self, output_value)

    def set_magsymm_k_og_symbol(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_og_symbol(self, new_value)

    def get_magsymm_k_nbas(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_nbas(self, output_value)

    def set_magsymm_k_nbas(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_nbas(self, new_value)

    def get_magsymm_k_icomp(self, output_value):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_icomp(self, output_value)

    def set_magsymm_k_icomp(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_icomp(self, new_value)

    def get_magsymm_k_multip(self):
        return _pycrysfml.magsymm_k_type_get_magsymm_k_multip(self)

    def set_magsymm_k_multip(self, new_value):
        return _pycrysfml.magsymm_k_type_set_magsymm_k_multip(self, new_value)
    data_ptr = property(_pycrysfml.magsymm_k_type_data_ptr_get, _pycrysfml.magsymm_k_type_data_ptr_set)

# Register magsymm_k_type in _pycrysfml:
_pycrysfml.magsymm_k_type_swigregister(magsymm_k_type)

class matom_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.matom_list_type_swiginit(self, _pycrysfml.new_matom_list_type())
    __swig_destroy__ = _pycrysfml.delete_matom_list_type

    def get_matom_list_element(self, elem, ind):
        return _pycrysfml.matom_list_type_get_matom_list_element(self, elem, ind)

    def set_matom_list_element(self, elem, ind):
        return _pycrysfml.matom_list_type_set_matom_list_element(self, elem, ind)

    def get_matom_list_natoms(self):
        return _pycrysfml.matom_list_type_get_matom_list_natoms(self)

    def set_matom_list_natoms(self, new_value):
        return _pycrysfml.matom_list_type_set_matom_list_natoms(self, new_value)
    data_ptr = property(_pycrysfml.matom_list_type_data_ptr_get, _pycrysfml.matom_list_type_data_ptr_set)

# Register matom_list_type in _pycrysfml:
_pycrysfml.matom_list_type_swigregister(matom_list_type)

class matom_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.matom_type_swiginit(self, _pycrysfml.new_matom_type())
    __swig_destroy__ = _pycrysfml.delete_matom_type

    def get_matom_basis_element(self, i, j):
        return _pycrysfml.matom_type_get_matom_basis_element(self, i, j)

    def set_matom_basis_element(self, i, j, value):
        return _pycrysfml.matom_type_set_matom_basis_element(self, i, j, value)

    def get_matom_mmphas(self, output_value):
        return _pycrysfml.matom_type_get_matom_mmphas(self, output_value)

    def set_matom_mmphas(self, new_value):
        return _pycrysfml.matom_type_set_matom_mmphas(self, new_value)

    def get_matom_locc(self):
        return _pycrysfml.matom_type_get_matom_locc(self)

    def set_matom_locc(self, new_value):
        return _pycrysfml.matom_type_set_matom_locc(self, new_value)

    def get_matom_ski_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_ski_std(self, output_value)

    def set_matom_ski_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_ski_std(self, new_value)

    def get_matom_lvarf(self, output_value):
        return _pycrysfml.matom_type_get_matom_lvarf(self, output_value)

    def set_matom_lvarf(self, new_value):
        return _pycrysfml.matom_type_set_matom_lvarf(self, new_value)

    def get_matom_utype(self, output_value):
        return _pycrysfml.matom_type_get_matom_utype(self, output_value)

    def set_matom_utype(self, new_value):
        return _pycrysfml.matom_type_set_matom_utype(self, new_value)

    def get_matom_mbiso(self):
        return _pycrysfml.matom_type_get_matom_mbiso(self)

    def set_matom_mbiso(self, new_value):
        return _pycrysfml.matom_type_set_matom_mbiso(self, new_value)

    def get_matom_occ(self):
        return _pycrysfml.matom_type_get_matom_occ(self)

    def set_matom_occ(self, new_value):
        return _pycrysfml.matom_type_set_matom_occ(self, new_value)

    def get_matom_lbas(self, output_value):
        return _pycrysfml.matom_type_get_matom_lbas(self, output_value)

    def set_matom_lbas(self, new_value):
        return _pycrysfml.matom_type_set_matom_lbas(self, new_value)

    def get_matom_charge(self):
        return _pycrysfml.matom_type_get_matom_charge(self)

    def set_matom_charge(self, new_value):
        return _pycrysfml.matom_type_set_matom_charge(self, new_value)

    def get_matom_sfacsymb(self, output_value):
        return _pycrysfml.matom_type_get_matom_sfacsymb(self, output_value)

    def set_matom_sfacsymb(self, new_value):
        return _pycrysfml.matom_type_set_matom_sfacsymb(self, new_value)

    def get_matom_imat(self, output_value):
        return _pycrysfml.matom_type_get_matom_imat(self, output_value)

    def set_matom_imat(self, new_value):
        return _pycrysfml.matom_type_set_matom_imat(self, new_value)

    def get_matom_lmphas(self, output_value):
        return _pycrysfml.matom_type_get_matom_lmphas(self, output_value)

    def set_matom_lmphas(self, new_value):
        return _pycrysfml.matom_type_set_matom_lmphas(self, new_value)

    def get_matom_mphas(self, output_value):
        return _pycrysfml.matom_type_get_matom_mphas(self, output_value)

    def set_matom_mphas(self, new_value):
        return _pycrysfml.matom_type_set_matom_mphas(self, new_value)

    def get_matom_spher_ski(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_ski(self, output_value)

    def set_matom_spher_ski(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_ski(self, new_value)

    def get_matom_skr(self, output_value):
        return _pycrysfml.matom_type_get_matom_skr(self, output_value)

    def set_matom_skr(self, new_value):
        return _pycrysfml.matom_type_set_matom_skr(self, new_value)

    def get_matom_lskr(self, output_value):
        return _pycrysfml.matom_type_get_matom_lskr(self, output_value)

    def set_matom_lskr(self, new_value):
        return _pycrysfml.matom_type_set_matom_lskr(self, new_value)

    def get_matom_lab(self, output_value):
        return _pycrysfml.matom_type_get_matom_lab(self, output_value)

    def set_matom_lab(self, new_value):
        return _pycrysfml.matom_type_set_matom_lab(self, new_value)

    def get_matom_moment(self):
        return _pycrysfml.matom_type_get_matom_moment(self)

    def set_matom_moment(self, new_value):
        return _pycrysfml.matom_type_set_matom_moment(self, new_value)

    def get_matom_lu(self, output_value):
        return _pycrysfml.matom_type_get_matom_lu(self, output_value)

    def set_matom_lu(self, new_value):
        return _pycrysfml.matom_type_set_matom_lu(self, new_value)

    def get_matom_mocc(self):
        return _pycrysfml.matom_type_get_matom_mocc(self)

    def set_matom_mocc(self, new_value):
        return _pycrysfml.matom_type_set_matom_mocc(self, new_value)

    def get_matom_active(self):
        return _pycrysfml.matom_type_get_matom_active(self)

    def set_matom_active(self, new_value):
        return _pycrysfml.matom_type_set_matom_active(self, new_value)

    def get_matom_ski(self, output_value):
        return _pycrysfml.matom_type_get_matom_ski(self, output_value)

    def set_matom_ski(self, new_value):
        return _pycrysfml.matom_type_set_matom_ski(self, new_value)

    def get_matom_mult(self):
        return _pycrysfml.matom_type_get_matom_mult(self)

    def set_matom_mult(self, new_value):
        return _pycrysfml.matom_type_set_matom_mult(self, new_value)

    def get_matom_spher_skr_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_skr_std(self, output_value)

    def set_matom_spher_skr_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_skr_std(self, new_value)

    def get_matom_x_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_x_std(self, output_value)

    def set_matom_x_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_x_std(self, new_value)

    def get_matom_u_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_u_std(self, output_value)

    def set_matom_u_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_u_std(self, new_value)

    def get_matom_lski(self, output_value):
        return _pycrysfml.matom_type_get_matom_lski(self, output_value)

    def set_matom_lski(self, new_value):
        return _pycrysfml.matom_type_set_matom_lski(self, new_value)

    def get_matom_nvar(self):
        return _pycrysfml.matom_type_get_matom_nvar(self)

    def set_matom_nvar(self, new_value):
        return _pycrysfml.matom_type_set_matom_nvar(self, new_value)

    def get_matom_wyck(self, output_value):
        return _pycrysfml.matom_type_get_matom_wyck(self, output_value)

    def set_matom_wyck(self, new_value):
        return _pycrysfml.matom_type_set_matom_wyck(self, new_value)

    def get_matom_biso_std(self):
        return _pycrysfml.matom_type_get_matom_biso_std(self)

    def set_matom_biso_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_biso_std(self, new_value)

    def get_matom_lbiso(self):
        return _pycrysfml.matom_type_get_matom_lbiso(self)

    def set_matom_lbiso(self, new_value):
        return _pycrysfml.matom_type_set_matom_lbiso(self, new_value)

    def get_matom_mphas_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_mphas_std(self, output_value)

    def set_matom_mphas_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_mphas_std(self, new_value)

    def get_matom_mvarf(self, output_value):
        return _pycrysfml.matom_type_get_matom_mvarf(self, output_value)

    def set_matom_mvarf(self, new_value):
        return _pycrysfml.matom_type_set_matom_mvarf(self, new_value)

    def get_matom_biso(self):
        return _pycrysfml.matom_type_get_matom_biso(self)

    def set_matom_biso(self, new_value):
        return _pycrysfml.matom_type_set_matom_biso(self, new_value)

    def get_matom_varf(self, output_value):
        return _pycrysfml.matom_type_get_matom_varf(self, output_value)

    def set_matom_varf(self, new_value):
        return _pycrysfml.matom_type_set_matom_varf(self, new_value)

    def get_matom_u(self, output_value):
        return _pycrysfml.matom_type_get_matom_u(self, output_value)

    def set_matom_u(self, new_value):
        return _pycrysfml.matom_type_set_matom_u(self, new_value)

    def get_matom_occ_std(self):
        return _pycrysfml.matom_type_get_matom_occ_std(self)

    def set_matom_occ_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_occ_std(self, new_value)

    def get_matom_x(self, output_value):
        return _pycrysfml.matom_type_get_matom_x(self, output_value)

    def set_matom_x(self, new_value):
        return _pycrysfml.matom_type_set_matom_x(self, new_value)

    def get_matom_z(self):
        return _pycrysfml.matom_type_get_matom_z(self)

    def set_matom_z(self, new_value):
        return _pycrysfml.matom_type_set_matom_z(self, new_value)

    def get_matom_nvk(self):
        return _pycrysfml.matom_type_get_matom_nvk(self)

    def set_matom_nvk(self, new_value):
        return _pycrysfml.matom_type_set_matom_nvk(self, new_value)

    def get_matom_mbas(self, output_value):
        return _pycrysfml.matom_type_get_matom_mbas(self, output_value)

    def set_matom_mbas(self, new_value):
        return _pycrysfml.matom_type_set_matom_mbas(self, new_value)

    def get_matom_spher_ski_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_ski_std(self, output_value)

    def set_matom_spher_ski_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_ski_std(self, new_value)

    def get_matom_spher_skr(self, output_value):
        return _pycrysfml.matom_type_get_matom_spher_skr(self, output_value)

    def set_matom_spher_skr(self, new_value):
        return _pycrysfml.matom_type_set_matom_spher_skr(self, new_value)

    def get_matom_mski(self, output_value):
        return _pycrysfml.matom_type_get_matom_mski(self, output_value)

    def set_matom_mski(self, new_value):
        return _pycrysfml.matom_type_set_matom_mski(self, new_value)

    def get_matom_skr_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_skr_std(self, output_value)

    def set_matom_skr_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_skr_std(self, new_value)

    def get_matom_mu(self, output_value):
        return _pycrysfml.matom_type_get_matom_mu(self, output_value)

    def set_matom_mu(self, new_value):
        return _pycrysfml.matom_type_set_matom_mu(self, new_value)

    def get_matom_mskr(self, output_value):
        return _pycrysfml.matom_type_get_matom_mskr(self, output_value)

    def set_matom_mskr(self, new_value):
        return _pycrysfml.matom_type_set_matom_mskr(self, new_value)

    def get_matom_lx(self, output_value):
        return _pycrysfml.matom_type_get_matom_lx(self, output_value)

    def set_matom_lx(self, new_value):
        return _pycrysfml.matom_type_set_matom_lx(self, new_value)

    def get_matom_chemsymb(self, output_value):
        return _pycrysfml.matom_type_get_matom_chemsymb(self, output_value)

    def set_matom_chemsymb(self, new_value):
        return _pycrysfml.matom_type_set_matom_chemsymb(self, new_value)

    def get_matom_cbas(self, output_value):
        return _pycrysfml.matom_type_get_matom_cbas(self, output_value)

    def set_matom_cbas(self, new_value):
        return _pycrysfml.matom_type_set_matom_cbas(self, new_value)

    def get_matom_ind(self, output_value):
        return _pycrysfml.matom_type_get_matom_ind(self, output_value)

    def set_matom_ind(self, new_value):
        return _pycrysfml.matom_type_set_matom_ind(self, new_value)

    def get_matom_cbas_std(self, output_value):
        return _pycrysfml.matom_type_get_matom_cbas_std(self, output_value)

    def set_matom_cbas_std(self, new_value):
        return _pycrysfml.matom_type_set_matom_cbas_std(self, new_value)

    def get_matom_thtype(self, output_value):
        return _pycrysfml.matom_type_get_matom_thtype(self, output_value)

    def set_matom_thtype(self, new_value):
        return _pycrysfml.matom_type_set_matom_thtype(self, new_value)

    def get_matom_atminfo(self, output_value):
        return _pycrysfml.matom_type_get_matom_atminfo(self, output_value)

    def set_matom_atminfo(self, new_value):
        return _pycrysfml.matom_type_set_matom_atminfo(self, new_value)

    def get_matom_ueq(self):
        return _pycrysfml.matom_type_get_matom_ueq(self)

    def set_matom_ueq(self, new_value):
        return _pycrysfml.matom_type_set_matom_ueq(self, new_value)

    def get_matom_mx(self, output_value):
        return _pycrysfml.matom_type_get_matom_mx(self, output_value)

    def set_matom_mx(self, new_value):
        return _pycrysfml.matom_type_set_matom_mx(self, new_value)
    data_ptr = property(_pycrysfml.matom_type_data_ptr_get, _pycrysfml.matom_type_data_ptr_set)

# Register matom_type in _pycrysfml:
_pycrysfml.matom_type_swigregister(matom_type)

class molecular_crystal_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.molecular_crystal_type_swiginit(self, _pycrysfml.new_molecular_crystal_type())
    __swig_destroy__ = _pycrysfml.delete_molecular_crystal_type
    data_ptr = property(_pycrysfml.molecular_crystal_type_data_ptr_get, _pycrysfml.molecular_crystal_type_data_ptr_set)

# Register molecular_crystal_type in _pycrysfml:
_pycrysfml.molecular_crystal_type_swigregister(molecular_crystal_type)

class molecule_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.molecule_type_swiginit(self, _pycrysfml.new_molecule_type())
    __swig_destroy__ = _pycrysfml.delete_molecule_type
    data_ptr = property(_pycrysfml.molecule_type_data_ptr_get, _pycrysfml.molecule_type_data_ptr_set)

# Register molecule_type in _pycrysfml:
_pycrysfml.molecule_type_swigregister(molecule_type)

class msym_oper_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.msym_oper_type_swiginit(self, _pycrysfml.new_msym_oper_type())
    __swig_destroy__ = _pycrysfml.delete_msym_oper_type

    def get_msym_oper_phas(self):
        return _pycrysfml.msym_oper_type_get_msym_oper_phas(self)

    def set_msym_oper_phas(self, new_value):
        return _pycrysfml.msym_oper_type_set_msym_oper_phas(self, new_value)

    def get_msym_oper_rot(self, output_value):
        return _pycrysfml.msym_oper_type_get_msym_oper_rot(self, output_value)

    def set_msym_oper_rot(self, new_value):
        return _pycrysfml.msym_oper_type_set_msym_oper_rot(self, new_value)
    data_ptr = property(_pycrysfml.msym_oper_type_data_ptr_get, _pycrysfml.msym_oper_type_data_ptr_set)

# Register msym_oper_type in _pycrysfml:
_pycrysfml.msym_oper_type_swigregister(msym_oper_type)

class nonatomic_parameter_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.nonatomic_parameter_list_type_swiginit(self, _pycrysfml.new_nonatomic_parameter_list_type())
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_list_type
    data_ptr = property(_pycrysfml.nonatomic_parameter_list_type_data_ptr_get, _pycrysfml.nonatomic_parameter_list_type_data_ptr_set)

# Register nonatomic_parameter_list_type in _pycrysfml:
_pycrysfml.nonatomic_parameter_list_type_swigregister(nonatomic_parameter_list_type)

class nonatomic_parameter_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.nonatomic_parameter_type_swiginit(self, _pycrysfml.new_nonatomic_parameter_type())
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_type
    data_ptr = property(_pycrysfml.nonatomic_parameter_type_data_ptr_get, _pycrysfml.nonatomic_parameter_type_data_ptr_set)

# Register nonatomic_parameter_type in _pycrysfml:
_pycrysfml.nonatomic_parameter_type_swigregister(nonatomic_parameter_type)

class ns_space_group_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.ns_space_group_type_swiginit(self, _pycrysfml.new_ns_space_group_type())
    __swig_destroy__ = _pycrysfml.delete_ns_space_group_type

    def get_ns_space_group_centred(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_centred(self)

    def set_ns_space_group_centred(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_centred(self, new_value)

    def get_ns_space_group_numspg(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_numspg(self)

    def set_ns_space_group_numspg(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_numspg(self, new_value)

    def get_ns_space_group_crystalsys(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_crystalsys(self, output_value)

    def set_ns_space_group_crystalsys(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_crystalsys(self, new_value)

    def get_ns_space_group_numlat(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_numlat(self)

    def set_ns_space_group_numlat(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_numlat(self, new_value)

    def get_ns_space_group_pg(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_pg(self, output_value)

    def set_ns_space_group_pg(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_pg(self, new_value)

    def get_ns_space_group_hall(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_hall(self, output_value)

    def set_ns_space_group_hall(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_hall(self, new_value)

    def get_ns_space_group_info(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_info(self, output_value)

    def set_ns_space_group_info(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_info(self, new_value)

    def get_ns_space_group_spg_lat(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_lat(self, output_value)

    def set_ns_space_group_spg_lat(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_lat(self, new_value)

    def get_ns_space_group_laue(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_laue(self, output_value)

    def set_ns_space_group_laue(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_laue(self, new_value)

    def get_ns_space_group_spg_latsy(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_latsy(self, output_value)

    def set_ns_space_group_spg_latsy(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_latsy(self, new_value)

    def get_ns_space_group_num_gen(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_num_gen(self)

    def set_ns_space_group_num_gen(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_num_gen(self, new_value)

    def get_ns_space_group_bravais(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_bravais(self, output_value)

    def set_ns_space_group_bravais(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_bravais(self, new_value)

    def get_ns_space_group_sg_setting(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_sg_setting(self, output_value)

    def set_ns_space_group_sg_setting(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_sg_setting(self, new_value)

    def get_ns_space_group_ghall(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_ghall(self, output_value)

    def set_ns_space_group_ghall(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_ghall(self, new_value)

    def get_ns_space_group_spg_symb(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_symb(self, output_value)

    def set_ns_space_group_spg_symb(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_symb(self, new_value)

    def get_ns_space_group_centre_coord(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_centre_coord(self, output_value)

    def set_ns_space_group_centre_coord(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_centre_coord(self, new_value)

    def get_ns_space_group_centre(self, output_value):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_centre(self, output_value)

    def set_ns_space_group_centre(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_centre(self, new_value)

    def get_ns_space_group_numops(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_numops(self)

    def set_ns_space_group_numops(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_numops(self, new_value)

    def get_ns_space_group_multip(self):
        return _pycrysfml.ns_space_group_type_get_ns_space_group_multip(self)

    def set_ns_space_group_multip(self, new_value):
        return _pycrysfml.ns_space_group_type_set_ns_space_group_multip(self, new_value)
    data_ptr = property(_pycrysfml.ns_space_group_type_data_ptr_get, _pycrysfml.ns_space_group_type_data_ptr_set)

# Register ns_space_group_type in _pycrysfml:
_pycrysfml.ns_space_group_type_swigregister(ns_space_group_type)

class ns_sym_oper_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.ns_sym_oper_type_swiginit(self, _pycrysfml.new_ns_sym_oper_type())
    __swig_destroy__ = _pycrysfml.delete_ns_sym_oper_type

    def get_ns_sym_oper_tr(self, output_value):
        return _pycrysfml.ns_sym_oper_type_get_ns_sym_oper_tr(self, output_value)

    def set_ns_sym_oper_tr(self, new_value):
        return _pycrysfml.ns_sym_oper_type_set_ns_sym_oper_tr(self, new_value)

    def get_ns_sym_oper_rot(self, output_value):
        return _pycrysfml.ns_sym_oper_type_get_ns_sym_oper_rot(self, output_value)

    def set_ns_sym_oper_rot(self, new_value):
        return _pycrysfml.ns_sym_oper_type_set_ns_sym_oper_rot(self, new_value)
    data_ptr = property(_pycrysfml.ns_sym_oper_type_data_ptr_get, _pycrysfml.ns_sym_oper_type_data_ptr_set)

# Register ns_sym_oper_type in _pycrysfml:
_pycrysfml.ns_sym_oper_type_swigregister(ns_sym_oper_type)

class opt_conditions_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.opt_conditions_type_swiginit(self, _pycrysfml.new_opt_conditions_type())
    __swig_destroy__ = _pycrysfml.delete_opt_conditions_type
    data_ptr = property(_pycrysfml.opt_conditions_type_data_ptr_get, _pycrysfml.opt_conditions_type_data_ptr_set)

# Register opt_conditions_type in _pycrysfml:
_pycrysfml.opt_conditions_type_swigregister(opt_conditions_type)

class point_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.point_list_type_swiginit(self, _pycrysfml.new_point_list_type())
    __swig_destroy__ = _pycrysfml.delete_point_list_type
    data_ptr = property(_pycrysfml.point_list_type_data_ptr_get, _pycrysfml.point_list_type_data_ptr_set)

# Register point_list_type in _pycrysfml:
_pycrysfml.point_list_type_swigregister(point_list_type)

class points_interval_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.points_interval_type_swiginit(self, _pycrysfml.new_points_interval_type())
    __swig_destroy__ = _pycrysfml.delete_points_interval_type
    data_ptr = property(_pycrysfml.points_interval_type_data_ptr_get, _pycrysfml.points_interval_type_data_ptr_set)

# Register points_interval_type in _pycrysfml:
_pycrysfml.points_interval_type_swigregister(points_interval_type)

class polar_calc_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_calc_list_type_swiginit(self, _pycrysfml.new_polar_calc_list_type())
    __swig_destroy__ = _pycrysfml.delete_polar_calc_list_type
    data_ptr = property(_pycrysfml.polar_calc_list_type_data_ptr_get, _pycrysfml.polar_calc_list_type_data_ptr_set)

# Register polar_calc_list_type in _pycrysfml:
_pycrysfml.polar_calc_list_type_swigregister(polar_calc_list_type)

class polar_calc_svs_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_calc_svs_list_type_swiginit(self, _pycrysfml.new_polar_calc_svs_list_type())
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_list_type
    data_ptr = property(_pycrysfml.polar_calc_svs_list_type_data_ptr_get, _pycrysfml.polar_calc_svs_list_type_data_ptr_set)

# Register polar_calc_svs_list_type in _pycrysfml:
_pycrysfml.polar_calc_svs_list_type_swigregister(polar_calc_svs_list_type)

class polar_calc_svs_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_calc_svs_type_swiginit(self, _pycrysfml.new_polar_calc_svs_type())
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_type
    data_ptr = property(_pycrysfml.polar_calc_svs_type_data_ptr_get, _pycrysfml.polar_calc_svs_type_data_ptr_set)

# Register polar_calc_svs_type in _pycrysfml:
_pycrysfml.polar_calc_svs_type_swigregister(polar_calc_svs_type)

class polar_calc_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_calc_type_swiginit(self, _pycrysfml.new_polar_calc_type())
    __swig_destroy__ = _pycrysfml.delete_polar_calc_type
    data_ptr = property(_pycrysfml.polar_calc_type_data_ptr_get, _pycrysfml.polar_calc_type_data_ptr_set)

# Register polar_calc_type in _pycrysfml:
_pycrysfml.polar_calc_type_swigregister(polar_calc_type)

class polar_calcmulti_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_calcmulti_list_type_swiginit(self, _pycrysfml.new_polar_calcmulti_list_type())
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_list_type
    data_ptr = property(_pycrysfml.polar_calcmulti_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_list_type_data_ptr_set)

# Register polar_calcmulti_list_type in _pycrysfml:
_pycrysfml.polar_calcmulti_list_type_swigregister(polar_calcmulti_list_type)

class polar_calcmulti_svs_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_calcmulti_svs_list_type_swiginit(self, _pycrysfml.new_polar_calcmulti_svs_list_type())
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_svs_list_type
    data_ptr = property(_pycrysfml.polar_calcmulti_svs_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_set)

# Register polar_calcmulti_svs_list_type in _pycrysfml:
_pycrysfml.polar_calcmulti_svs_list_type_swigregister(polar_calcmulti_svs_list_type)

class polar_info_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_info_type_swiginit(self, _pycrysfml.new_polar_info_type())
    __swig_destroy__ = _pycrysfml.delete_polar_info_type
    data_ptr = property(_pycrysfml.polar_info_type_data_ptr_get, _pycrysfml.polar_info_type_data_ptr_set)

# Register polar_info_type in _pycrysfml:
_pycrysfml.polar_info_type_swigregister(polar_info_type)

class polar_obs_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_obs_list_type_swiginit(self, _pycrysfml.new_polar_obs_list_type())
    __swig_destroy__ = _pycrysfml.delete_polar_obs_list_type
    data_ptr = property(_pycrysfml.polar_obs_list_type_data_ptr_get, _pycrysfml.polar_obs_list_type_data_ptr_set)

# Register polar_obs_list_type in _pycrysfml:
_pycrysfml.polar_obs_list_type_swigregister(polar_obs_list_type)

class polar_obs_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_obs_type_swiginit(self, _pycrysfml.new_polar_obs_type())
    __swig_destroy__ = _pycrysfml.delete_polar_obs_type
    data_ptr = property(_pycrysfml.polar_obs_type_data_ptr_get, _pycrysfml.polar_obs_type_data_ptr_set)

# Register polar_obs_type in _pycrysfml:
_pycrysfml.polar_obs_type_swigregister(polar_obs_type)

class polar_obsmulti_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.polar_obsmulti_list_type_swiginit(self, _pycrysfml.new_polar_obsmulti_list_type())
    __swig_destroy__ = _pycrysfml.delete_polar_obsmulti_list_type
    data_ptr = property(_pycrysfml.polar_obsmulti_list_type_data_ptr_get, _pycrysfml.polar_obsmulti_list_type_data_ptr_set)

# Register polar_obsmulti_list_type in _pycrysfml:
_pycrysfml.polar_obsmulti_list_type_swigregister(polar_obsmulti_list_type)

class powder_numor_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.powder_numor_type_swiginit(self, _pycrysfml.new_powder_numor_type())
    __swig_destroy__ = _pycrysfml.delete_powder_numor_type

    def get_powder_numor_nbang(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_nbang(self)

    def set_powder_numor_nbang(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_nbang(self, new_value)

    def get_powder_numor_manip(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_manip(self)

    def set_powder_numor_manip(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_manip(self, new_value)

    def get_powder_numor_icalc(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_icalc(self)

    def set_powder_numor_icalc(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_icalc(self, new_value)

    def get_powder_numor_monitor(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_monitor(self)

    def set_powder_numor_monitor(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_monitor(self, new_value)

    def get_powder_numor_nbdata(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_nbdata(self)

    def set_powder_numor_nbdata(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_nbdata(self, new_value)

    def get_powder_numor_title(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_title(self, output_value)

    def set_powder_numor_title(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_title(self, new_value)

    def get_powder_numor_numor(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_numor(self)

    def set_powder_numor_numor(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_numor(self, new_value)

    def get_powder_numor_instrm(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_instrm(self, output_value)

    def set_powder_numor_instrm(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_instrm(self, new_value)

    def get_powder_numor_wave(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_wave(self)

    def set_powder_numor_wave(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_wave(self, new_value)

    def get_powder_numor_header(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_header(self, output_value)

    def set_powder_numor_header(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_header(self, new_value)

    def get_powder_numor_scantype(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_scantype(self, output_value)

    def set_powder_numor_scantype(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_scantype(self, new_value)

    def get_powder_numor_icdesc(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_icdesc(self, output_value)

    def set_powder_numor_icdesc(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_icdesc(self, new_value)

    def get_powder_numor_angles(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_angles(self, output_value)

    def set_powder_numor_angles(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_angles(self, new_value)

    def get_powder_numor_time(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_time(self)

    def set_powder_numor_time(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_time(self, new_value)

    def get_powder_numor_nframes(self):
        return _pycrysfml.powder_numor_type_get_powder_numor_nframes(self)

    def set_powder_numor_nframes(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_nframes(self, new_value)

    def get_powder_numor_conditions(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_conditions(self, output_value)

    def set_powder_numor_conditions(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_conditions(self, new_value)

    def get_powder_numor_scans(self, output_value):
        return _pycrysfml.powder_numor_type_get_powder_numor_scans(self, output_value)

    def set_powder_numor_scans(self, new_value):
        return _pycrysfml.powder_numor_type_set_powder_numor_scans(self, new_value)
    data_ptr = property(_pycrysfml.powder_numor_type_data_ptr_get, _pycrysfml.powder_numor_type_data_ptr_set)

# Register powder_numor_type in _pycrysfml:
_pycrysfml.powder_numor_type_swigregister(powder_numor_type)

class psd_val_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.psd_val_type_swiginit(self, _pycrysfml.new_psd_val_type())
    __swig_destroy__ = _pycrysfml.delete_psd_val_type
    data_ptr = property(_pycrysfml.psd_val_type_data_ptr_get, _pycrysfml.psd_val_type_data_ptr_set)

# Register psd_val_type in _pycrysfml:
_pycrysfml.psd_val_type_swigregister(psd_val_type)

class reflct_array_list(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.reflct_array_list_swiginit(self, _pycrysfml.new_reflct_array_list())
    __swig_destroy__ = _pycrysfml.delete_reflct_array_list
    data_ptr = property(_pycrysfml.reflct_array_list_data_ptr_get, _pycrysfml.reflct_array_list_data_ptr_set)

# Register reflct_array_list in _pycrysfml:
_pycrysfml.reflct_array_list_swigregister(reflct_array_list)

class reflect_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.reflect_list_type_swiginit(self, _pycrysfml.new_reflect_list_type())
    __swig_destroy__ = _pycrysfml.delete_reflect_list_type
    data_ptr = property(_pycrysfml.reflect_list_type_data_ptr_get, _pycrysfml.reflect_list_type_data_ptr_set)

# Register reflect_list_type in _pycrysfml:
_pycrysfml.reflect_list_type_swigregister(reflect_list_type)

class reflect_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.reflect_type_swiginit(self, _pycrysfml.new_reflect_type())
    __swig_destroy__ = _pycrysfml.delete_reflect_type

    def get_reflect_h(self, output_value):
        return _pycrysfml.reflect_type_get_reflect_h(self, output_value)

    def set_reflect_h(self, new_value):
        return _pycrysfml.reflect_type_set_reflect_h(self, new_value)

    def get_reflect_s(self):
        return _pycrysfml.reflect_type_get_reflect_s(self)

    def set_reflect_s(self, new_value):
        return _pycrysfml.reflect_type_set_reflect_s(self, new_value)

    def get_reflect_mult(self):
        return _pycrysfml.reflect_type_get_reflect_mult(self)

    def set_reflect_mult(self, new_value):
        return _pycrysfml.reflect_type_set_reflect_mult(self, new_value)
    data_ptr = property(_pycrysfml.reflect_type_data_ptr_get, _pycrysfml.reflect_type_data_ptr_set)

# Register reflect_type in _pycrysfml:
_pycrysfml.reflect_type_swigregister(reflect_type)

class reflection_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.reflection_list_type_swiginit(self, _pycrysfml.new_reflection_list_type())
    __swig_destroy__ = _pycrysfml.delete_reflection_list_type

    def get_reflection_list_element(self, elem, ind):
        return _pycrysfml.reflection_list_type_get_reflection_list_element(self, elem, ind)

    def set_reflection_list_element(self, elem, ind):
        return _pycrysfml.reflection_list_type_set_reflection_list_element(self, elem, ind)

    def get_reflection_list_nref(self):
        return _pycrysfml.reflection_list_type_get_reflection_list_nref(self)

    def set_reflection_list_nref(self, new_value):
        return _pycrysfml.reflection_list_type_set_reflection_list_nref(self, new_value)
    data_ptr = property(_pycrysfml.reflection_list_type_data_ptr_get, _pycrysfml.reflection_list_type_data_ptr_set)

# Register reflection_list_type in _pycrysfml:
_pycrysfml.reflection_list_type_swigregister(reflection_list_type)

class reflection_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.reflection_type_swiginit(self, _pycrysfml.new_reflection_type())
    __swig_destroy__ = _pycrysfml.delete_reflection_type

    def get_reflection_a(self):
        return _pycrysfml.reflection_type_get_reflection_a(self)

    def set_reflection_a(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_a(self, new_value)

    def get_reflection_aa(self):
        return _pycrysfml.reflection_type_get_reflection_aa(self)

    def set_reflection_aa(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_aa(self, new_value)

    def get_reflection_b(self):
        return _pycrysfml.reflection_type_get_reflection_b(self)

    def set_reflection_b(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_b(self, new_value)

    def get_reflection_bb(self):
        return _pycrysfml.reflection_type_get_reflection_bb(self)

    def set_reflection_bb(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_bb(self, new_value)

    def get_reflection_h(self, output_value):
        return _pycrysfml.reflection_type_get_reflection_h(self, output_value)

    def set_reflection_h(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_h(self, new_value)

    def get_reflection_sfo(self):
        return _pycrysfml.reflection_type_get_reflection_sfo(self)

    def set_reflection_sfo(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_sfo(self, new_value)

    def get_reflection_s(self):
        return _pycrysfml.reflection_type_get_reflection_s(self)

    def set_reflection_s(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_s(self, new_value)

    def get_reflection_fc(self):
        return _pycrysfml.reflection_type_get_reflection_fc(self)

    def set_reflection_fc(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_fc(self, new_value)

    def get_reflection_w(self):
        return _pycrysfml.reflection_type_get_reflection_w(self)

    def set_reflection_w(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_w(self, new_value)

    def get_reflection_phase(self):
        return _pycrysfml.reflection_type_get_reflection_phase(self)

    def set_reflection_phase(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_phase(self, new_value)

    def get_reflection_mult(self):
        return _pycrysfml.reflection_type_get_reflection_mult(self)

    def set_reflection_mult(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_mult(self, new_value)

    def get_reflection_fo(self):
        return _pycrysfml.reflection_type_get_reflection_fo(self)

    def set_reflection_fo(self, new_value):
        return _pycrysfml.reflection_type_set_reflection_fo(self, new_value)
    data_ptr = property(_pycrysfml.reflection_type_data_ptr_get, _pycrysfml.reflection_type_data_ptr_set)

# Register reflection_type in _pycrysfml:
_pycrysfml.reflection_type_swigregister(reflection_type)

class sbvs_par_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.sbvs_par_type_swiginit(self, _pycrysfml.new_sbvs_par_type())
    __swig_destroy__ = _pycrysfml.delete_sbvs_par_type
    data_ptr = property(_pycrysfml.sbvs_par_type_data_ptr_get, _pycrysfml.sbvs_par_type_data_ptr_set)

# Register sbvs_par_type in _pycrysfml:
_pycrysfml.sbvs_par_type_swigregister(sbvs_par_type)

class scattering_species_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.scattering_species_type_swiginit(self, _pycrysfml.new_scattering_species_type())
    __swig_destroy__ = _pycrysfml.delete_scattering_species_type
    data_ptr = property(_pycrysfml.scattering_species_type_data_ptr_get, _pycrysfml.scattering_species_type_data_ptr_set)

# Register scattering_species_type in _pycrysfml:
_pycrysfml.scattering_species_type_swigregister(scattering_species_type)

class space_group_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.space_group_type_swiginit(self, _pycrysfml.new_space_group_type())
    __swig_destroy__ = _pycrysfml.delete_space_group_type

    def set_atom_equiv_list(self, cell, a, ate, lun=None):
        return _pycrysfml.space_group_type_set_atom_equiv_list(self, cell, a, ate, lun)

    def set_formal_charges(self, cell, a, eps_val=None, iwrt=None):
        return _pycrysfml.space_group_type_set_formal_charges(self, cell, a, eps_val, iwrt)

    def set_new_asymunit(self, ate, mat, orig, a_n, matkind=None, debug=None):
        return _pycrysfml.space_group_type_set_new_asymunit(self, ate, mat, orig, a_n, matkind, debug)

    def set_orbits_inlist(self, pl):
        return _pycrysfml.space_group_type_set_orbits_inlist(self, pl)

    def get_hallsymb_from_gener(self, spaceh=None):
        return _pycrysfml.space_group_type_get_hallsymb_from_gener(self, spaceh)

    def get_laue_pg(self, laue_car, point_car):
        return _pycrysfml.space_group_type_get_laue_pg(self, laue_car, point_car)

    def get_space_group_centred(self):
        return _pycrysfml.space_group_type_get_space_group_centred(self)

    def set_space_group_centred(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_centred(self, new_value)

    def get_space_group_centre_coord(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_centre_coord(self, output_value)

    def set_space_group_centre_coord(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_centre_coord(self, new_value)

    def get_space_group_hexa(self):
        return _pycrysfml.space_group_type_get_space_group_hexa(self)

    def set_space_group_hexa(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_hexa(self, new_value)

    def get_space_group_numspg(self):
        return _pycrysfml.space_group_type_get_space_group_numspg(self)

    def set_space_group_numspg(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_numspg(self, new_value)

    def get_space_group_crystalsys(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_crystalsys(self, output_value)

    def set_space_group_crystalsys(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_crystalsys(self, new_value)

    def get_space_group_numlat(self):
        return _pycrysfml.space_group_type_get_space_group_numlat(self)

    def set_space_group_numlat(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_numlat(self, new_value)

    def get_space_group_pg(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_pg(self, output_value)

    def set_space_group_pg(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_pg(self, new_value)

    def get_space_group_wyckoff(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_wyckoff(self, output_value)

    def set_space_group_wyckoff(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_wyckoff(self, new_value)

    def get_space_group_hall(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_hall(self, output_value)

    def set_space_group_hall(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_hall(self, new_value)

    def get_space_group_info(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_info(self, output_value)

    def set_space_group_info(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_info(self, new_value)

    def get_space_group_spg_lat(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_spg_lat(self, output_value)

    def set_space_group_spg_lat(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_spg_lat(self, new_value)

    def get_space_group_laue(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_laue(self, output_value)

    def set_space_group_laue(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_laue(self, new_value)

    def get_space_group_spg_latsy(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_spg_latsy(self, output_value)

    def set_space_group_spg_latsy(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_spg_latsy(self, new_value)

    def get_space_group_num_gen(self):
        return _pycrysfml.space_group_type_get_space_group_num_gen(self)

    def set_space_group_num_gen(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_num_gen(self, new_value)

    def get_space_group_bravais(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_bravais(self, output_value)

    def set_space_group_bravais(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_bravais(self, new_value)

    def get_space_group_sg_setting(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_sg_setting(self, output_value)

    def set_space_group_sg_setting(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_sg_setting(self, new_value)

    def get_space_group_ghall(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_ghall(self, output_value)

    def set_space_group_ghall(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_ghall(self, new_value)

    def get_space_group_spg_symb(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_spg_symb(self, output_value)

    def set_space_group_spg_symb(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_spg_symb(self, new_value)

    def get_space_group_centre(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_centre(self, output_value)

    def set_space_group_centre(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_centre(self, new_value)

    def get_space_group_numops(self):
        return _pycrysfml.space_group_type_get_space_group_numops(self)

    def set_space_group_numops(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_numops(self, new_value)

    def get_space_group_r_asym_unit(self, output_value):
        return _pycrysfml.space_group_type_get_space_group_r_asym_unit(self, output_value)

    def set_space_group_r_asym_unit(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_r_asym_unit(self, new_value)

    def get_space_group_multip(self):
        return _pycrysfml.space_group_type_get_space_group_multip(self)

    def set_space_group_multip(self, new_value):
        return _pycrysfml.space_group_type_set_space_group_multip(self, new_value)
    data_ptr = property(_pycrysfml.space_group_type_data_ptr_get, _pycrysfml.space_group_type_data_ptr_set)

# Register space_group_type in _pycrysfml:
_pycrysfml.space_group_type_swigregister(space_group_type)

class spgr_info_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.spgr_info_type_swiginit(self, _pycrysfml.new_spgr_info_type())
    __swig_destroy__ = _pycrysfml.delete_spgr_info_type
    data_ptr = property(_pycrysfml.spgr_info_type_data_ptr_get, _pycrysfml.spgr_info_type_data_ptr_set)

# Register spgr_info_type in _pycrysfml:
_pycrysfml.spgr_info_type_swigregister(spgr_info_type)

class strf_list_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.strf_list_type_swiginit(self, _pycrysfml.new_strf_list_type())
    __swig_destroy__ = _pycrysfml.delete_strf_list_type
    data_ptr = property(_pycrysfml.strf_list_type_data_ptr_get, _pycrysfml.strf_list_type_data_ptr_set)

# Register strf_list_type in _pycrysfml:
_pycrysfml.strf_list_type_swigregister(strf_list_type)

class strf_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.strf_type_swiginit(self, _pycrysfml.new_strf_type())
    __swig_destroy__ = _pycrysfml.delete_strf_type
    data_ptr = property(_pycrysfml.strf_type_data_ptr_get, _pycrysfml.strf_type_data_ptr_set)

# Register strf_type in _pycrysfml:
_pycrysfml.strf_type_swigregister(strf_type)


def getPowderNumor_title(obj):
    return _pycrysfml.getPowderNumor_title(obj)

def getPowderNumor_instrm(obj):
    return _pycrysfml.getPowderNumor_instrm(obj)

def getPowderNumor_header(obj):
    return _pycrysfml.getPowderNumor_header(obj)

def getPowderNumor_scantype(obj):
    return _pycrysfml.getPowderNumor_scantype(obj)

def getCrystalCell_carttype(obj):
    return _pycrysfml.getCrystalCell_carttype(obj)

def getAtomEquiv_chemsymb(obj):
    return _pycrysfml.getAtomEquiv_chemsymb(obj)

def getMagneticSpaceGroup_bns_symbol(obj):
    return _pycrysfml.getMagneticSpaceGroup_bns_symbol(obj)

def getMagneticSpaceGroup_bns_number(obj):
    return _pycrysfml.getMagneticSpaceGroup_bns_number(obj)

def getMagneticSpaceGroup_crystalsys(obj):
    return _pycrysfml.getMagneticSpaceGroup_crystalsys(obj)

def getMagneticSpaceGroup_spg_lat(obj):
    return _pycrysfml.getMagneticSpaceGroup_spg_lat(obj)

def getMagneticSpaceGroup_og_number(obj):
    return _pycrysfml.getMagneticSpaceGroup_og_number(obj)

def getMagneticSpaceGroup_spg_latsy(obj):
    return _pycrysfml.getMagneticSpaceGroup_spg_latsy(obj)

def getMagneticSpaceGroup_parent_spg(obj):
    return _pycrysfml.getMagneticSpaceGroup_parent_spg(obj)

def getMagneticSpaceGroup_og_symbol(obj):
    return _pycrysfml.getMagneticSpaceGroup_og_symbol(obj)

def getMagneticSpaceGroup_centre(obj):
    return _pycrysfml.getMagneticSpaceGroup_centre(obj)

def getMagneticSpaceGroup_trn_to_standard(obj):
    return _pycrysfml.getMagneticSpaceGroup_trn_to_standard(obj)

def getMagneticSpaceGroup_trn_from_parent(obj):
    return _pycrysfml.getMagneticSpaceGroup_trn_from_parent(obj)

def getJobInfo_title(obj):
    return _pycrysfml.getJobInfo_title(obj)

def getMagsymmK_latt(obj):
    return _pycrysfml.getMagsymmK_latt(obj)

def getMagsymmK_bns_symbol(obj):
    return _pycrysfml.getMagsymmK_bns_symbol(obj)

def getMagsymmK_bns_number(obj):
    return _pycrysfml.getMagsymmK_bns_number(obj)

def getMagsymmK_magmodel(obj):
    return _pycrysfml.getMagsymmK_magmodel(obj)

def getMagsymmK_sk_type(obj):
    return _pycrysfml.getMagsymmK_sk_type(obj)

def getMagsymmK_og_number(obj):
    return _pycrysfml.getMagsymmK_og_number(obj)

def getMagsymmK_parent_spg(obj):
    return _pycrysfml.getMagsymmK_parent_spg(obj)

def getMagsymmK_og_symbol(obj):
    return _pycrysfml.getMagsymmK_og_symbol(obj)

def getMatom_utype(obj):
    return _pycrysfml.getMatom_utype(obj)

def getMatom_sfacsymb(obj):
    return _pycrysfml.getMatom_sfacsymb(obj)

def getMatom_lab(obj):
    return _pycrysfml.getMatom_lab(obj)

def getMatom_wyck(obj):
    return _pycrysfml.getMatom_wyck(obj)

def getMatom_chemsymb(obj):
    return _pycrysfml.getMatom_chemsymb(obj)

def getMatom_thtype(obj):
    return _pycrysfml.getMatom_thtype(obj)

def getMatom_atminfo(obj):
    return _pycrysfml.getMatom_atminfo(obj)

def getWyckPos_str_orig(obj):
    return _pycrysfml.getWyckPos_str_orig(obj)

def getWyckPos_site(obj):
    return _pycrysfml.getWyckPos_site(obj)

def getAtom_utype(obj):
    return _pycrysfml.getAtom_utype(obj)

def getAtom_sfacsymb(obj):
    return _pycrysfml.getAtom_sfacsymb(obj)

def getAtom_lab(obj):
    return _pycrysfml.getAtom_lab(obj)

def getAtom_wyck(obj):
    return _pycrysfml.getAtom_wyck(obj)

def getAtom_chemsymb(obj):
    return _pycrysfml.getAtom_chemsymb(obj)

def getAtom_thtype(obj):
    return _pycrysfml.getAtom_thtype(obj)

def getAtom_atminfo(obj):
    return _pycrysfml.getAtom_atminfo(obj)

def getMagneticGroup_shubnikov(obj):
    return _pycrysfml.getMagneticGroup_shubnikov(obj)

def getDiffractionPattern_instr(obj):
    return _pycrysfml.getDiffractionPattern_instr(obj)

def getDiffractionPattern_yax_text(obj):
    return _pycrysfml.getDiffractionPattern_yax_text(obj)

def getDiffractionPattern_diff_kind(obj):
    return _pycrysfml.getDiffractionPattern_diff_kind(obj)

def getDiffractionPattern_filepath(obj):
    return _pycrysfml.getDiffractionPattern_filepath(obj)

def getDiffractionPattern_title(obj):
    return _pycrysfml.getDiffractionPattern_title(obj)

def getDiffractionPattern_filename(obj):
    return _pycrysfml.getDiffractionPattern_filename(obj)

def getDiffractionPattern_scat_var(obj):
    return _pycrysfml.getDiffractionPattern_scat_var(obj)

def getDiffractionPattern_xax_text(obj):
    return _pycrysfml.getDiffractionPattern_xax_text(obj)

def getNsSpaceGroup_crystalsys(obj):
    return _pycrysfml.getNsSpaceGroup_crystalsys(obj)

def getNsSpaceGroup_pg(obj):
    return _pycrysfml.getNsSpaceGroup_pg(obj)

def getNsSpaceGroup_hall(obj):
    return _pycrysfml.getNsSpaceGroup_hall(obj)

def getNsSpaceGroup_info(obj):
    return _pycrysfml.getNsSpaceGroup_info(obj)

def getNsSpaceGroup_spg_lat(obj):
    return _pycrysfml.getNsSpaceGroup_spg_lat(obj)

def getNsSpaceGroup_laue(obj):
    return _pycrysfml.getNsSpaceGroup_laue(obj)

def getNsSpaceGroup_spg_latsy(obj):
    return _pycrysfml.getNsSpaceGroup_spg_latsy(obj)

def getNsSpaceGroup_bravais(obj):
    return _pycrysfml.getNsSpaceGroup_bravais(obj)

def getNsSpaceGroup_sg_setting(obj):
    return _pycrysfml.getNsSpaceGroup_sg_setting(obj)

def getNsSpaceGroup_ghall(obj):
    return _pycrysfml.getNsSpaceGroup_ghall(obj)

def getNsSpaceGroup_spg_symb(obj):
    return _pycrysfml.getNsSpaceGroup_spg_symb(obj)

def getNsSpaceGroup_centre(obj):
    return _pycrysfml.getNsSpaceGroup_centre(obj)

def getSpaceGroup_crystalsys(obj):
    return _pycrysfml.getSpaceGroup_crystalsys(obj)

def getSpaceGroup_pg(obj):
    return _pycrysfml.getSpaceGroup_pg(obj)

def getSpaceGroup_hall(obj):
    return _pycrysfml.getSpaceGroup_hall(obj)

def getSpaceGroup_info(obj):
    return _pycrysfml.getSpaceGroup_info(obj)

def getSpaceGroup_spg_lat(obj):
    return _pycrysfml.getSpaceGroup_spg_lat(obj)

def getSpaceGroup_laue(obj):
    return _pycrysfml.getSpaceGroup_laue(obj)

def getSpaceGroup_spg_latsy(obj):
    return _pycrysfml.getSpaceGroup_spg_latsy(obj)

def getSpaceGroup_bravais(obj):
    return _pycrysfml.getSpaceGroup_bravais(obj)

def getSpaceGroup_sg_setting(obj):
    return _pycrysfml.getSpaceGroup_sg_setting(obj)

def getSpaceGroup_ghall(obj):
    return _pycrysfml.getSpaceGroup_ghall(obj)

def getSpaceGroup_spg_symb(obj):
    return _pycrysfml.getSpaceGroup_spg_symb(obj)

def getSpaceGroup_centre(obj):
    return _pycrysfml.getSpaceGroup_centre(obj)
class sxd_val_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.sxd_val_type_swiginit(self, _pycrysfml.new_sxd_val_type())
    __swig_destroy__ = _pycrysfml.delete_sxd_val_type
    data_ptr = property(_pycrysfml.sxd_val_type_data_ptr_get, _pycrysfml.sxd_val_type_data_ptr_set)

# Register sxd_val_type in _pycrysfml:
_pycrysfml.sxd_val_type_swigregister(sxd_val_type)

class sxtal_numor_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.sxtal_numor_type_swiginit(self, _pycrysfml.new_sxtal_numor_type())
    __swig_destroy__ = _pycrysfml.delete_sxtal_numor_type
    data_ptr = property(_pycrysfml.sxtal_numor_type_data_ptr_get, _pycrysfml.sxtal_numor_type_data_ptr_set)

# Register sxtal_numor_type in _pycrysfml:
_pycrysfml.sxtal_numor_type_swigregister(sxtal_numor_type)

class sxtal_orient_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.sxtal_orient_type_swiginit(self, _pycrysfml.new_sxtal_orient_type())
    __swig_destroy__ = _pycrysfml.delete_sxtal_orient_type
    data_ptr = property(_pycrysfml.sxtal_orient_type_data_ptr_get, _pycrysfml.sxtal_orient_type_data_ptr_set)

# Register sxtal_orient_type in _pycrysfml:
_pycrysfml.sxtal_orient_type_swigregister(sxtal_orient_type)

class sym_oper_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.sym_oper_type_swiginit(self, _pycrysfml.new_sym_oper_type())
    __swig_destroy__ = _pycrysfml.delete_sym_oper_type

    def get_sym_oper_tr(self, output_value):
        return _pycrysfml.sym_oper_type_get_sym_oper_tr(self, output_value)

    def set_sym_oper_tr(self, new_value):
        return _pycrysfml.sym_oper_type_set_sym_oper_tr(self, new_value)

    def get_sym_oper_rot(self, output_value):
        return _pycrysfml.sym_oper_type_get_sym_oper_rot(self, output_value)

    def set_sym_oper_rot(self, new_value):
        return _pycrysfml.sym_oper_type_set_sym_oper_rot(self, new_value)
    data_ptr = property(_pycrysfml.sym_oper_type_data_ptr_get, _pycrysfml.sym_oper_type_data_ptr_set)

# Register sym_oper_type in _pycrysfml:
_pycrysfml.sym_oper_type_swigregister(sym_oper_type)

class table_equiv_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.table_equiv_type_swiginit(self, _pycrysfml.new_table_equiv_type())
    __swig_destroy__ = _pycrysfml.delete_table_equiv_type
    data_ptr = property(_pycrysfml.table_equiv_type_data_ptr_get, _pycrysfml.table_equiv_type_data_ptr_set)

# Register table_equiv_type in _pycrysfml:
_pycrysfml.table_equiv_type_swigregister(table_equiv_type)

class torsion_restraint_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.torsion_restraint_type_swiginit(self, _pycrysfml.new_torsion_restraint_type())
    __swig_destroy__ = _pycrysfml.delete_torsion_restraint_type
    data_ptr = property(_pycrysfml.torsion_restraint_type_data_ptr_get, _pycrysfml.torsion_restraint_type_data_ptr_set)

# Register torsion_restraint_type in _pycrysfml:
_pycrysfml.torsion_restraint_type_swigregister(torsion_restraint_type)

class twin_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.twin_type_swiginit(self, _pycrysfml.new_twin_type())
    __swig_destroy__ = _pycrysfml.delete_twin_type
    data_ptr = property(_pycrysfml.twin_type_data_ptr_get, _pycrysfml.twin_type_data_ptr_set)

# Register twin_type in _pycrysfml:
_pycrysfml.twin_type_swigregister(twin_type)

class twofold_axes_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.twofold_axes_type_swiginit(self, _pycrysfml.new_twofold_axes_type())
    __swig_destroy__ = _pycrysfml.delete_twofold_axes_type
    data_ptr = property(_pycrysfml.twofold_axes_type_data_ptr_get, _pycrysfml.twofold_axes_type_data_ptr_set)

# Register twofold_axes_type in _pycrysfml:
_pycrysfml.twofold_axes_type_swigregister(twofold_axes_type)

class wyck_info_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.wyck_info_type_swiginit(self, _pycrysfml.new_wyck_info_type())
    __swig_destroy__ = _pycrysfml.delete_wyck_info_type
    data_ptr = property(_pycrysfml.wyck_info_type_data_ptr_get, _pycrysfml.wyck_info_type_data_ptr_set)

# Register wyck_info_type in _pycrysfml:
_pycrysfml.wyck_info_type_swigregister(wyck_info_type)

class wyck_pos_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.wyck_pos_type_swiginit(self, _pycrysfml.new_wyck_pos_type())
    __swig_destroy__ = _pycrysfml.delete_wyck_pos_type

    def get_wyck_pos_norb(self):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_norb(self)

    def set_wyck_pos_norb(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_norb(self, new_value)

    def get_wyck_pos_str_orig(self, output_value):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_str_orig(self, output_value)

    def set_wyck_pos_str_orig(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_str_orig(self, new_value)

    def get_wyck_pos_multp(self):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_multp(self)

    def set_wyck_pos_multp(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_multp(self, new_value)

    def get_wyck_pos_site(self, output_value):
        return _pycrysfml.wyck_pos_type_get_wyck_pos_site(self, output_value)

    def set_wyck_pos_site(self, new_value):
        return _pycrysfml.wyck_pos_type_set_wyck_pos_site(self, new_value)
    data_ptr = property(_pycrysfml.wyck_pos_type_data_ptr_get, _pycrysfml.wyck_pos_type_data_ptr_set)

# Register wyck_pos_type in _pycrysfml:
_pycrysfml.wyck_pos_type_swigregister(wyck_pos_type)

class wyckoff_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.wyckoff_type_swiginit(self, _pycrysfml.new_wyckoff_type())
    __swig_destroy__ = _pycrysfml.delete_wyckoff_type

    def get_wyckoff_num_orbit(self):
        return _pycrysfml.wyckoff_type_get_wyckoff_num_orbit(self)

    def set_wyckoff_num_orbit(self, new_value):
        return _pycrysfml.wyckoff_type_set_wyckoff_num_orbit(self, new_value)
    data_ptr = property(_pycrysfml.wyckoff_type_data_ptr_get, _pycrysfml.wyckoff_type_data_ptr_set)

# Register wyckoff_type in _pycrysfml:
_pycrysfml.wyckoff_type_swigregister(wyckoff_type)

class xray_form_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.xray_form_type_swiginit(self, _pycrysfml.new_xray_form_type())
    __swig_destroy__ = _pycrysfml.delete_xray_form_type
    data_ptr = property(_pycrysfml.xray_form_type_data_ptr_get, _pycrysfml.xray_form_type_data_ptr_set)

# Register xray_form_type in _pycrysfml:
_pycrysfml.xray_form_type_swigregister(xray_form_type)

class xray_wavelength_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.xray_wavelength_type_swiginit(self, _pycrysfml.new_xray_wavelength_type())
    __swig_destroy__ = _pycrysfml.delete_xray_wavelength_type
    data_ptr = property(_pycrysfml.xray_wavelength_type_data_ptr_get, _pycrysfml.xray_wavelength_type_data_ptr_set)

# Register xray_wavelength_type in _pycrysfml:
_pycrysfml.xray_wavelength_type_swigregister(xray_wavelength_type)

class zone_axis_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycrysfml.zone_axis_type_swiginit(self, _pycrysfml.new_zone_axis_type())
    __swig_destroy__ = _pycrysfml.delete_zone_axis_type

    def get_zone_axis_nlayer(self):
        return _pycrysfml.zone_axis_type_get_zone_axis_nlayer(self)

    def set_zone_axis_nlayer(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_nlayer(self, new_value)

    def get_zone_axis_rx(self, output_value):
        return _pycrysfml.zone_axis_type_get_zone_axis_rx(self, output_value)

    def set_zone_axis_rx(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_rx(self, new_value)

    def get_zone_axis_ry(self, output_value):
        return _pycrysfml.zone_axis_type_get_zone_axis_ry(self, output_value)

    def set_zone_axis_ry(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_ry(self, new_value)

    def get_zone_axis_uvw(self, output_value):
        return _pycrysfml.zone_axis_type_get_zone_axis_uvw(self, output_value)

    def set_zone_axis_uvw(self, new_value):
        return _pycrysfml.zone_axis_type_set_zone_axis_uvw(self, new_value)
    data_ptr = property(_pycrysfml.zone_axis_type_data_ptr_get, _pycrysfml.zone_axis_type_data_ptr_set)

# Register zone_axis_type in _pycrysfml:
_pycrysfml.zone_axis_type_swigregister(zone_axis_type)



