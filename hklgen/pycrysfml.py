# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycrysfml', [dirname(__file__)])
        except ImportError:
            import _pycrysfml
            return _pycrysfml
        if fp is not None:
            try:
                _mod = imp.load_module('_pycrysfml', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pycrysfml = swig_import_helper()
    del swig_import_helper
else:
    import _pycrysfml
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _pycrysfml.intp_assign(self, *args)
    def value(self): return _pycrysfml.intp_value(self)
    def cast(self): return _pycrysfml.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pycrysfml.intp_frompointer
    if _newclass:frompointer = staticmethod(_pycrysfml.intp_frompointer)
intp_swigregister = _pycrysfml.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _pycrysfml.intp_frompointer(*args)
intp_frompointer = _pycrysfml.intp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_doublep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_doublep
    __del__ = lambda self : None;
    def assign(self, *args): return _pycrysfml.doublep_assign(self, *args)
    def value(self): return _pycrysfml.doublep_value(self)
    def cast(self): return _pycrysfml.doublep_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pycrysfml.doublep_frompointer
    if _newclass:frompointer = staticmethod(_pycrysfml.doublep_frompointer)
doublep_swigregister = _pycrysfml.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(*args):
  return _pycrysfml.doublep_frompointer(*args)
doublep_frompointer = _pycrysfml.doublep_frompointer

class floatp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_floatp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_floatp
    __del__ = lambda self : None;
    def assign(self, *args): return _pycrysfml.floatp_assign(self, *args)
    def value(self): return _pycrysfml.floatp_value(self)
    def cast(self): return _pycrysfml.floatp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pycrysfml.floatp_frompointer
    if _newclass:frompointer = staticmethod(_pycrysfml.floatp_frompointer)
floatp_swigregister = _pycrysfml.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(*args):
  return _pycrysfml.floatp_frompointer(*args)
floatp_frompointer = _pycrysfml.floatp_frompointer

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycrysfml.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pycrysfml.SwigPyIterator_value(self)
    def incr(self, n=1): return _pycrysfml.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pycrysfml.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pycrysfml.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pycrysfml.SwigPyIterator_equal(self, *args)
    def copy(self): return _pycrysfml.SwigPyIterator_copy(self)
    def next(self): return _pycrysfml.SwigPyIterator_next(self)
    def __next__(self): return _pycrysfml.SwigPyIterator___next__(self)
    def previous(self): return _pycrysfml.SwigPyIterator_previous(self)
    def advance(self, *args): return _pycrysfml.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pycrysfml.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pycrysfml.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pycrysfml.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pycrysfml.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pycrysfml.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pycrysfml.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pycrysfml.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pycrysfml.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pycrysfml.FloatVector___nonzero__(self)
    def __bool__(self): return _pycrysfml.FloatVector___bool__(self)
    def __len__(self): return _pycrysfml.FloatVector___len__(self)
    def pop(self): return _pycrysfml.FloatVector_pop(self)
    def __getslice__(self, *args): return _pycrysfml.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pycrysfml.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pycrysfml.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pycrysfml.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pycrysfml.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pycrysfml.FloatVector___setitem__(self, *args)
    def append(self, *args): return _pycrysfml.FloatVector_append(self, *args)
    def empty(self): return _pycrysfml.FloatVector_empty(self)
    def size(self): return _pycrysfml.FloatVector_size(self)
    def clear(self): return _pycrysfml.FloatVector_clear(self)
    def swap(self, *args): return _pycrysfml.FloatVector_swap(self, *args)
    def get_allocator(self): return _pycrysfml.FloatVector_get_allocator(self)
    def begin(self): return _pycrysfml.FloatVector_begin(self)
    def end(self): return _pycrysfml.FloatVector_end(self)
    def rbegin(self): return _pycrysfml.FloatVector_rbegin(self)
    def rend(self): return _pycrysfml.FloatVector_rend(self)
    def pop_back(self): return _pycrysfml.FloatVector_pop_back(self)
    def erase(self, *args): return _pycrysfml.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pycrysfml.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pycrysfml.FloatVector_push_back(self, *args)
    def front(self): return _pycrysfml.FloatVector_front(self)
    def back(self): return _pycrysfml.FloatVector_back(self)
    def assign(self, *args): return _pycrysfml.FloatVector_assign(self, *args)
    def resize(self, *args): return _pycrysfml.FloatVector_resize(self, *args)
    def insert(self, *args): return _pycrysfml.FloatVector_insert(self, *args)
    def reserve(self, *args): return _pycrysfml.FloatVector_reserve(self, *args)
    def capacity(self): return _pycrysfml.FloatVector_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _pycrysfml.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMatrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _pycrysfml.FloatMatrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pycrysfml.FloatMatrix___nonzero__(self)
    def __bool__(self): return _pycrysfml.FloatMatrix___bool__(self)
    def __len__(self): return _pycrysfml.FloatMatrix___len__(self)
    def pop(self): return _pycrysfml.FloatMatrix_pop(self)
    def __getslice__(self, *args): return _pycrysfml.FloatMatrix___getslice__(self, *args)
    def __setslice__(self, *args): return _pycrysfml.FloatMatrix___setslice__(self, *args)
    def __delslice__(self, *args): return _pycrysfml.FloatMatrix___delslice__(self, *args)
    def __delitem__(self, *args): return _pycrysfml.FloatMatrix___delitem__(self, *args)
    def __getitem__(self, *args): return _pycrysfml.FloatMatrix___getitem__(self, *args)
    def __setitem__(self, *args): return _pycrysfml.FloatMatrix___setitem__(self, *args)
    def append(self, *args): return _pycrysfml.FloatMatrix_append(self, *args)
    def empty(self): return _pycrysfml.FloatMatrix_empty(self)
    def size(self): return _pycrysfml.FloatMatrix_size(self)
    def clear(self): return _pycrysfml.FloatMatrix_clear(self)
    def swap(self, *args): return _pycrysfml.FloatMatrix_swap(self, *args)
    def get_allocator(self): return _pycrysfml.FloatMatrix_get_allocator(self)
    def begin(self): return _pycrysfml.FloatMatrix_begin(self)
    def end(self): return _pycrysfml.FloatMatrix_end(self)
    def rbegin(self): return _pycrysfml.FloatMatrix_rbegin(self)
    def rend(self): return _pycrysfml.FloatMatrix_rend(self)
    def pop_back(self): return _pycrysfml.FloatMatrix_pop_back(self)
    def erase(self, *args): return _pycrysfml.FloatMatrix_erase(self, *args)
    def __init__(self, *args): 
        this = _pycrysfml.new_FloatMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pycrysfml.FloatMatrix_push_back(self, *args)
    def front(self): return _pycrysfml.FloatMatrix_front(self)
    def back(self): return _pycrysfml.FloatMatrix_back(self)
    def assign(self, *args): return _pycrysfml.FloatMatrix_assign(self, *args)
    def resize(self, *args): return _pycrysfml.FloatMatrix_resize(self, *args)
    def insert(self, *args): return _pycrysfml.FloatMatrix_insert(self, *args)
    def reserve(self, *args): return _pycrysfml.FloatMatrix_reserve(self, *args)
    def capacity(self): return _pycrysfml.FloatMatrix_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_FloatMatrix
    __del__ = lambda self : None;
FloatMatrix_swigregister = _pycrysfml.FloatMatrix_swigregister
FloatMatrix_swigregister(FloatMatrix)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pycrysfml.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pycrysfml.IntVector___nonzero__(self)
    def __bool__(self): return _pycrysfml.IntVector___bool__(self)
    def __len__(self): return _pycrysfml.IntVector___len__(self)
    def pop(self): return _pycrysfml.IntVector_pop(self)
    def __getslice__(self, *args): return _pycrysfml.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pycrysfml.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pycrysfml.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pycrysfml.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pycrysfml.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pycrysfml.IntVector___setitem__(self, *args)
    def append(self, *args): return _pycrysfml.IntVector_append(self, *args)
    def empty(self): return _pycrysfml.IntVector_empty(self)
    def size(self): return _pycrysfml.IntVector_size(self)
    def clear(self): return _pycrysfml.IntVector_clear(self)
    def swap(self, *args): return _pycrysfml.IntVector_swap(self, *args)
    def get_allocator(self): return _pycrysfml.IntVector_get_allocator(self)
    def begin(self): return _pycrysfml.IntVector_begin(self)
    def end(self): return _pycrysfml.IntVector_end(self)
    def rbegin(self): return _pycrysfml.IntVector_rbegin(self)
    def rend(self): return _pycrysfml.IntVector_rend(self)
    def pop_back(self): return _pycrysfml.IntVector_pop_back(self)
    def erase(self, *args): return _pycrysfml.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pycrysfml.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pycrysfml.IntVector_push_back(self, *args)
    def front(self): return _pycrysfml.IntVector_front(self)
    def back(self): return _pycrysfml.IntVector_back(self)
    def assign(self, *args): return _pycrysfml.IntVector_assign(self, *args)
    def resize(self, *args): return _pycrysfml.IntVector_resize(self, *args)
    def insert(self, *args): return _pycrysfml.IntVector_insert(self, *args)
    def reserve(self, *args): return _pycrysfml.IntVector_reserve(self, *args)
    def capacity(self): return _pycrysfml.IntVector_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pycrysfml.IntVector_swigregister
IntVector_swigregister(IntVector)

class angle_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, angle_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, angle_restraint_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_angle_restraint_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_angle_restraint_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.angle_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.angle_restraint_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.angle_restraint_type_data_ptr_get, _pycrysfml.angle_restraint_type_data_ptr_set)
angle_restraint_type_swigregister = _pycrysfml.angle_restraint_type_swigregister
angle_restraint_type_swigregister(angle_restraint_type)

class anomalous_sc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anomalous_sc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anomalous_sc_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_anomalous_sc_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_anomalous_sc_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.anomalous_sc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.anomalous_sc_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.anomalous_sc_type_data_ptr_get, _pycrysfml.anomalous_sc_type_data_ptr_set)
anomalous_sc_type_swigregister = _pycrysfml.anomalous_sc_type_swigregister
anomalous_sc_type_swigregister(anomalous_sc_type)

class atom_equiv_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_equiv_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_equiv_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_equiv_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_list_type
    __del__ = lambda self : None;
    def get_atom_equiv_list_element(self, *args): return _pycrysfml.atom_equiv_list_type_get_atom_equiv_list_element(self, *args)
    def set_atom_equiv_list_element(self, *args): return _pycrysfml.atom_equiv_list_type_set_atom_equiv_list_element(self, *args)
    def get_atom_equiv_list_nauas(self): return _pycrysfml.atom_equiv_list_type_get_atom_equiv_list_nauas(self)
    def set_atom_equiv_list_nauas(self, *args): return _pycrysfml.atom_equiv_list_type_set_atom_equiv_list_nauas(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_equiv_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_equiv_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_equiv_list_type_data_ptr_get, _pycrysfml.atom_equiv_list_type_data_ptr_set)
atom_equiv_list_type_swigregister = _pycrysfml.atom_equiv_list_type_swigregister
atom_equiv_list_type_swigregister(atom_equiv_list_type)

class atom_equiv_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_equiv_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_equiv_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_equiv_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_type
    __del__ = lambda self : None;
    def get_atom_equiv_chemsymb(self, *args): return _pycrysfml.atom_equiv_type_get_atom_equiv_chemsymb(self, *args)
    def set_atom_equiv_chemsymb(self, *args): return _pycrysfml.atom_equiv_type_set_atom_equiv_chemsymb(self, *args)
    def get_atom_equiv_mult(self): return _pycrysfml.atom_equiv_type_get_atom_equiv_mult(self)
    def set_atom_equiv_mult(self, *args): return _pycrysfml.atom_equiv_type_set_atom_equiv_mult(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_equiv_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_equiv_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_equiv_type_data_ptr_get, _pycrysfml.atom_equiv_type_data_ptr_set)
atom_equiv_type_swigregister = _pycrysfml.atom_equiv_type_swigregister
atom_equiv_type_swigregister(atom_equiv_type)

class atomic_properties_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atomic_properties_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atomic_properties_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atomic_properties_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atomic_properties_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.atomic_properties_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atomic_properties_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atomic_properties_type_data_ptr_get, _pycrysfml.atomic_properties_type_data_ptr_set)
atomic_properties_type_swigregister = _pycrysfml.atomic_properties_type_swigregister
atomic_properties_type_swigregister(atomic_properties_type)

class atom_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_list_type
    __del__ = lambda self : None;
    def set_form_factors(self, *args): return _pycrysfml.atom_list_type_set_form_factors(self, *args)
    def get_atom_list_element(self, *args): return _pycrysfml.atom_list_type_get_atom_list_element(self, *args)
    def set_atom_list_element(self, *args): return _pycrysfml.atom_list_type_set_atom_list_element(self, *args)
    def get_atom_list_natoms(self): return _pycrysfml.atom_list_type_get_atom_list_natoms(self)
    def set_atom_list_natoms(self, *args): return _pycrysfml.atom_list_type_set_atom_list_natoms(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_list_type_data_ptr_get, _pycrysfml.atom_list_type_data_ptr_set)
atom_list_type_swigregister = _pycrysfml.atom_list_type_swigregister
atom_list_type_swigregister(atom_list_type)

class atoms_cell_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atoms_cell_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atoms_cell_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atoms_cell_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atoms_cell_type
    __del__ = lambda self : None;
    def get_atoms_cell_ndist(self): return _pycrysfml.atoms_cell_type_get_atoms_cell_ndist(self)
    def set_atoms_cell_ndist(self, *args): return _pycrysfml.atoms_cell_type_set_atoms_cell_ndist(self, *args)
    def get_atoms_cell_nat(self): return _pycrysfml.atoms_cell_type_get_atoms_cell_nat(self)
    def set_atoms_cell_nat(self, *args): return _pycrysfml.atoms_cell_type_set_atoms_cell_nat(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atoms_cell_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atoms_cell_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atoms_cell_type_data_ptr_get, _pycrysfml.atoms_cell_type_data_ptr_set)
atoms_cell_type_swigregister = _pycrysfml.atoms_cell_type_swigregister
atoms_cell_type_swigregister(atoms_cell_type)

class atoms_conf_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atoms_conf_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atoms_conf_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atoms_conf_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atoms_conf_list_type
    __del__ = lambda self : None;
    def set_table_bvel_params(self, n_bvel=None, soft=None, nread=None): return _pycrysfml.atoms_conf_list_type_set_table_bvel_params(self, n_bvel, soft, nread)
    def set_table_d0_b(self, n_bvsm=None, soft=None): return _pycrysfml.atoms_conf_list_type_set_table_d0_b(self, n_bvsm, soft)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atoms_conf_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atoms_conf_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atoms_conf_list_type_data_ptr_get, _pycrysfml.atoms_conf_list_type_data_ptr_set)
atoms_conf_list_type_swigregister = _pycrysfml.atoms_conf_list_type_swigregister
atoms_conf_list_type_swigregister(atoms_conf_list_type)

class atom_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_type
    __del__ = lambda self : None;
    def get_atom_locc(self): return _pycrysfml.atom_type_get_atom_locc(self)
    def set_atom_locc(self, *args): return _pycrysfml.atom_type_set_atom_locc(self, *args)
    def get_atom_lvarf(self, *args): return _pycrysfml.atom_type_get_atom_lvarf(self, *args)
    def set_atom_lvarf(self, *args): return _pycrysfml.atom_type_set_atom_lvarf(self, *args)
    def get_atom_utype(self, *args): return _pycrysfml.atom_type_get_atom_utype(self, *args)
    def set_atom_utype(self, *args): return _pycrysfml.atom_type_set_atom_utype(self, *args)
    def get_atom_mbiso(self): return _pycrysfml.atom_type_get_atom_mbiso(self)
    def set_atom_mbiso(self, *args): return _pycrysfml.atom_type_set_atom_mbiso(self, *args)
    def get_atom_occ(self): return _pycrysfml.atom_type_get_atom_occ(self)
    def set_atom_occ(self, *args): return _pycrysfml.atom_type_set_atom_occ(self, *args)
    def get_atom_charge(self): return _pycrysfml.atom_type_get_atom_charge(self)
    def set_atom_charge(self, *args): return _pycrysfml.atom_type_set_atom_charge(self, *args)
    def get_atom_sfacsymb(self, *args): return _pycrysfml.atom_type_get_atom_sfacsymb(self, *args)
    def set_atom_sfacsymb(self, *args): return _pycrysfml.atom_type_set_atom_sfacsymb(self, *args)
    def get_atom_lab(self, *args): return _pycrysfml.atom_type_get_atom_lab(self, *args)
    def set_atom_lab(self, *args): return _pycrysfml.atom_type_set_atom_lab(self, *args)
    def get_atom_mvarf(self, *args): return _pycrysfml.atom_type_get_atom_mvarf(self, *args)
    def set_atom_mvarf(self, *args): return _pycrysfml.atom_type_set_atom_mvarf(self, *args)
    def get_atom_moment(self): return _pycrysfml.atom_type_get_atom_moment(self)
    def set_atom_moment(self, *args): return _pycrysfml.atom_type_set_atom_moment(self, *args)
    def get_atom_lu(self, *args): return _pycrysfml.atom_type_get_atom_lu(self, *args)
    def set_atom_lu(self, *args): return _pycrysfml.atom_type_set_atom_lu(self, *args)
    def get_atom_mocc(self): return _pycrysfml.atom_type_get_atom_mocc(self)
    def set_atom_mocc(self, *args): return _pycrysfml.atom_type_set_atom_mocc(self, *args)
    def get_atom_active(self): return _pycrysfml.atom_type_get_atom_active(self)
    def set_atom_active(self, *args): return _pycrysfml.atom_type_set_atom_active(self, *args)
    def get_atom_mult(self): return _pycrysfml.atom_type_get_atom_mult(self)
    def set_atom_mult(self, *args): return _pycrysfml.atom_type_set_atom_mult(self, *args)
    def get_atom_x_std(self, *args): return _pycrysfml.atom_type_get_atom_x_std(self, *args)
    def set_atom_x_std(self, *args): return _pycrysfml.atom_type_set_atom_x_std(self, *args)
    def get_atom_u_std(self, *args): return _pycrysfml.atom_type_get_atom_u_std(self, *args)
    def set_atom_u_std(self, *args): return _pycrysfml.atom_type_set_atom_u_std(self, *args)
    def get_atom_nvar(self): return _pycrysfml.atom_type_get_atom_nvar(self)
    def set_atom_nvar(self, *args): return _pycrysfml.atom_type_set_atom_nvar(self, *args)
    def get_atom_wyck(self, *args): return _pycrysfml.atom_type_get_atom_wyck(self, *args)
    def set_atom_wyck(self, *args): return _pycrysfml.atom_type_set_atom_wyck(self, *args)
    def get_atom_biso_std(self): return _pycrysfml.atom_type_get_atom_biso_std(self)
    def set_atom_biso_std(self, *args): return _pycrysfml.atom_type_set_atom_biso_std(self, *args)
    def get_atom_lbiso(self): return _pycrysfml.atom_type_get_atom_lbiso(self)
    def set_atom_lbiso(self, *args): return _pycrysfml.atom_type_set_atom_lbiso(self, *args)
    def get_atom_biso(self): return _pycrysfml.atom_type_get_atom_biso(self)
    def set_atom_biso(self, *args): return _pycrysfml.atom_type_set_atom_biso(self, *args)
    def get_atom_varf(self, *args): return _pycrysfml.atom_type_get_atom_varf(self, *args)
    def set_atom_varf(self, *args): return _pycrysfml.atom_type_set_atom_varf(self, *args)
    def get_atom_u(self, *args): return _pycrysfml.atom_type_get_atom_u(self, *args)
    def set_atom_u(self, *args): return _pycrysfml.atom_type_set_atom_u(self, *args)
    def get_atom_occ_std(self): return _pycrysfml.atom_type_get_atom_occ_std(self)
    def set_atom_occ_std(self, *args): return _pycrysfml.atom_type_set_atom_occ_std(self, *args)
    def get_atom_x(self, *args): return _pycrysfml.atom_type_get_atom_x(self, *args)
    def set_atom_x(self, *args): return _pycrysfml.atom_type_set_atom_x(self, *args)
    def get_atom_z(self): return _pycrysfml.atom_type_get_atom_z(self)
    def set_atom_z(self, *args): return _pycrysfml.atom_type_set_atom_z(self, *args)
    def get_atom_mu(self, *args): return _pycrysfml.atom_type_get_atom_mu(self, *args)
    def set_atom_mu(self, *args): return _pycrysfml.atom_type_set_atom_mu(self, *args)
    def get_atom_lx(self, *args): return _pycrysfml.atom_type_get_atom_lx(self, *args)
    def set_atom_lx(self, *args): return _pycrysfml.atom_type_set_atom_lx(self, *args)
    def get_atom_chemsymb(self, *args): return _pycrysfml.atom_type_get_atom_chemsymb(self, *args)
    def set_atom_chemsymb(self, *args): return _pycrysfml.atom_type_set_atom_chemsymb(self, *args)
    def get_atom_ind(self, *args): return _pycrysfml.atom_type_get_atom_ind(self, *args)
    def set_atom_ind(self, *args): return _pycrysfml.atom_type_set_atom_ind(self, *args)
    def get_atom_thtype(self, *args): return _pycrysfml.atom_type_get_atom_thtype(self, *args)
    def set_atom_thtype(self, *args): return _pycrysfml.atom_type_set_atom_thtype(self, *args)
    def get_atom_atminfo(self, *args): return _pycrysfml.atom_type_get_atom_atminfo(self, *args)
    def set_atom_atminfo(self, *args): return _pycrysfml.atom_type_set_atom_atminfo(self, *args)
    def get_atom_ueq(self): return _pycrysfml.atom_type_get_atom_ueq(self)
    def set_atom_ueq(self, *args): return _pycrysfml.atom_type_set_atom_ueq(self, *args)
    def get_atom_mx(self, *args): return _pycrysfml.atom_type_get_atom_mx(self, *args)
    def set_atom_mx(self, *args): return _pycrysfml.atom_type_set_atom_mx(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_type_data_ptr_get, _pycrysfml.atom_type_data_ptr_set)
atom_type_swigregister = _pycrysfml.atom_type_swigregister
atom_type_swigregister(atom_type)

class basic_numc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numc_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_basic_numc_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numc_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numc_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.basic_numc_type_data_ptr_get, _pycrysfml.basic_numc_type_data_ptr_set)
basic_numc_type_swigregister = _pycrysfml.basic_numc_type_swigregister
basic_numc_type_swigregister(basic_numc_type)

class basic_numi_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numi_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numi_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_basic_numi_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numi_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numi_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numi_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.basic_numi_type_data_ptr_get, _pycrysfml.basic_numi_type_data_ptr_set)
basic_numi_type_swigregister = _pycrysfml.basic_numi_type_swigregister
basic_numi_type_swigregister(basic_numi_type)

class basic_numr_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numr_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numr_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_basic_numr_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numr_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numr_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numr_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.basic_numr_type_data_ptr_get, _pycrysfml.basic_numr_type_data_ptr_set)
basic_numr_type_swigregister = _pycrysfml.basic_numr_type_swigregister
basic_numr_type_swigregister(basic_numr_type)

class bvel_par_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvel_par_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvel_par_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_bvel_par_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_bvel_par_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.bvel_par_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.bvel_par_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.bvel_par_type_data_ptr_get, _pycrysfml.bvel_par_type_data_ptr_set)
bvel_par_type_swigregister = _pycrysfml.bvel_par_type_swigregister
bvel_par_type_swigregister(bvel_par_type)

class bvs_par_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvs_par_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvs_par_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_bvs_par_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_bvs_par_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.bvs_par_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.bvs_par_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.bvs_par_type_data_ptr_get, _pycrysfml.bvs_par_type_data_ptr_set)
bvs_par_type_swigregister = _pycrysfml.bvs_par_type_swigregister
bvs_par_type_swigregister(bvs_par_type)

class calibration_detector_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_detector_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_detector_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_calibration_detector_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_calibration_detector_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.calibration_detector_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.calibration_detector_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.calibration_detector_type_data_ptr_get, _pycrysfml.calibration_detector_type_data_ptr_set)
calibration_detector_type_swigregister = _pycrysfml.calibration_detector_type_swigregister
calibration_detector_type_swigregister(calibration_detector_type)

class chem_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chem_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chem_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_chem_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_chem_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.chem_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.chem_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.chem_info_type_data_ptr_get, _pycrysfml.chem_info_type_data_ptr_set)
chem_info_type_swigregister = _pycrysfml.chem_info_type_swigregister
chem_info_type_swigregister(chem_info_type)

class coordination_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coordination_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coordination_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_coordination_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_coordination_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.coordination_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.coordination_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.coordination_type_data_ptr_get, _pycrysfml.coordination_type_data_ptr_set)
coordination_type_swigregister = _pycrysfml.coordination_type_swigregister
coordination_type_swigregister(coordination_type)

class crystal_cell_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, crystal_cell_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, crystal_cell_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_crystal_cell_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_crystal_cell_type
    __del__ = lambda self : None;
    def change_setting_cell(self, *args): return _pycrysfml.crystal_cell_type_change_setting_cell(self, *args)
    def get_cryst_family(self, *args): return _pycrysfml.crystal_cell_type_get_cryst_family(self, *args)
    def get_deriv_orth_cell(self, *args): return _pycrysfml.crystal_cell_type_get_deriv_orth_cell(self, *args)
    def get_transfm_matrix(self, *args): return _pycrysfml.crystal_cell_type_get_transfm_matrix(self, *args)
    def get_twofold_axes(self, *args): return _pycrysfml.crystal_cell_type_get_twofold_axes(self, *args)
    def get_crystal_cell_lang(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_lang(self, *args)
    def set_crystal_cell_lang(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_lang(self, *args)
    def get_crystal_cell_rcellvol(self): return _pycrysfml.crystal_cell_type_get_crystal_cell_rcellvol(self)
    def set_crystal_cell_rcellvol(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_rcellvol(self, *args)
    def get_crystal_cell_cell_std(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_cell_std(self, *args)
    def set_crystal_cell_cell_std(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_cell_std(self, *args)
    def get_crystal_cell_ang(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_ang(self, *args)
    def set_crystal_cell_ang(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_ang(self, *args)
    def get_crystal_cell_bl_minv(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_bl_minv(self, *args)
    def set_crystal_cell_bl_minv(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_bl_minv(self, *args)
    def get_crystal_cell_gr(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_gr(self, *args)
    def set_crystal_cell_gr(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_gr(self, *args)
    def get_crystal_cell_cr_orth_cel(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_cr_orth_cel(self, *args)
    def set_crystal_cell_cr_orth_cel(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_cr_orth_cel(self, *args)
    def get_crystal_cell_bl_m(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_bl_m(self, *args)
    def set_crystal_cell_bl_m(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_bl_m(self, *args)
    def get_crystal_cell_orth_cr_cel(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_orth_cr_cel(self, *args)
    def set_crystal_cell_orth_cr_cel(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_orth_cr_cel(self, *args)
    def get_crystal_cell_carttype(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_carttype(self, *args)
    def set_crystal_cell_carttype(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_carttype(self, *args)
    def get_crystal_cell_rang(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_rang(self, *args)
    def set_crystal_cell_rang(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_rang(self, *args)
    def get_crystal_cell_rcell(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_rcell(self, *args)
    def set_crystal_cell_rcell(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_rcell(self, *args)
    def get_crystal_cell_cell(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_cell(self, *args)
    def set_crystal_cell_cell(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_cell(self, *args)
    def get_crystal_cell_gd(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_gd(self, *args)
    def set_crystal_cell_gd(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_gd(self, *args)
    def get_crystal_cell_cellvol(self): return _pycrysfml.crystal_cell_type_get_crystal_cell_cellvol(self)
    def set_crystal_cell_cellvol(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_cellvol(self, *args)
    def get_crystal_cell_ang_std(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_ang_std(self, *args)
    def set_crystal_cell_ang_std(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_ang_std(self, *args)
    def get_crystal_cell_lcell(self, *args): return _pycrysfml.crystal_cell_type_get_crystal_cell_lcell(self, *args)
    def set_crystal_cell_lcell(self, *args): return _pycrysfml.crystal_cell_type_set_crystal_cell_lcell(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.crystal_cell_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.crystal_cell_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.crystal_cell_type_data_ptr_get, _pycrysfml.crystal_cell_type_data_ptr_set)
crystal_cell_type_swigregister = _pycrysfml.crystal_cell_type_swigregister
crystal_cell_type_swigregister(crystal_cell_type)

class cube_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cube_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cube_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_cube_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_cube_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.cube_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.cube_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.cube_info_type_data_ptr_get, _pycrysfml.cube_info_type_data_ptr_set)
cube_info_type_swigregister = _pycrysfml.cube_info_type_swigregister
cube_info_type_swigregister(cube_info_type)

class deriv_tof_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deriv_tof_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deriv_tof_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_deriv_tof_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_deriv_tof_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.deriv_tof_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.deriv_tof_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.deriv_tof_type_data_ptr_get, _pycrysfml.deriv_tof_type_data_ptr_set)
deriv_tof_type_swigregister = _pycrysfml.deriv_tof_type_swigregister
deriv_tof_type_swigregister(deriv_tof_type)

class diffraction_pattern_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diffraction_pattern_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diffraction_pattern_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_diffraction_pattern_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_diffraction_pattern_type
    __del__ = lambda self : None;
    def get_diffraction_pattern_scal(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_scal(self)
    def set_diffraction_pattern_scal(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_scal(self, *args)
    def get_diffraction_pattern_conv(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_conv(self, *args)
    def set_diffraction_pattern_conv(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_conv(self, *args)
    def get_diffraction_pattern_instr(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_instr(self, *args)
    def set_diffraction_pattern_instr(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_instr(self, *args)
    def get_diffraction_pattern_yax_text(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_yax_text(self, *args)
    def set_diffraction_pattern_yax_text(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_yax_text(self, *args)
    def get_diffraction_pattern_diff_kind(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_diff_kind(self, *args)
    def set_diffraction_pattern_diff_kind(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_diff_kind(self, *args)
    def get_diffraction_pattern_xmin(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xmin(self)
    def set_diffraction_pattern_xmin(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xmin(self, *args)
    def get_diffraction_pattern_norm_mon(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_norm_mon(self)
    def set_diffraction_pattern_norm_mon(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_norm_mon(self, *args)
    def get_diffraction_pattern_ymin(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ymin(self)
    def set_diffraction_pattern_ymin(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ymin(self, *args)
    def get_diffraction_pattern_monitor(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_monitor(self)
    def set_diffraction_pattern_monitor(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_monitor(self, *args)
    def get_diffraction_pattern_filepath(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_filepath(self, *args)
    def set_diffraction_pattern_filepath(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_filepath(self, *args)
    def get_diffraction_pattern_title(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_title(self, *args)
    def set_diffraction_pattern_title(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_title(self, *args)
    def get_diffraction_pattern_filename(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_filename(self, *args)
    def set_diffraction_pattern_filename(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_filename(self, *args)
    def get_diffraction_pattern_scat_var(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_scat_var(self, *args)
    def set_diffraction_pattern_scat_var(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_scat_var(self, *args)
    def get_diffraction_pattern_step(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_step(self)
    def set_diffraction_pattern_step(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_step(self, *args)
    def get_diffraction_pattern_x(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_x(self, *args)
    def set_diffraction_pattern_x(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_x(self, *args)
    def get_diffraction_pattern_ct_step(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ct_step(self)
    def set_diffraction_pattern_ct_step(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ct_step(self, *args)
    def get_diffraction_pattern_xax_text(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xax_text(self, *args)
    def set_diffraction_pattern_xax_text(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xax_text(self, *args)
    def get_diffraction_pattern_ymax(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_ymax(self)
    def set_diffraction_pattern_ymax(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_ymax(self, *args)
    def get_diffraction_pattern_col_time(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_col_time(self)
    def set_diffraction_pattern_col_time(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_col_time(self, *args)
    def get_diffraction_pattern_tset(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_tset(self)
    def set_diffraction_pattern_tset(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_tset(self, *args)
    def get_diffraction_pattern_tsamp(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_tsamp(self)
    def set_diffraction_pattern_tsamp(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_tsamp(self, *args)
    def get_diffraction_pattern_bgr(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_bgr(self, *args)
    def set_diffraction_pattern_bgr(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_bgr(self, *args)
    def get_diffraction_pattern_xmax(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_xmax(self)
    def set_diffraction_pattern_xmax(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_xmax(self, *args)
    def get_diffraction_pattern_y(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_y(self, *args)
    def set_diffraction_pattern_y(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_y(self, *args)
    def get_diffraction_pattern_npts(self): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_npts(self)
    def set_diffraction_pattern_npts(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_npts(self, *args)
    def get_diffraction_pattern_sigma(self, *args): return _pycrysfml.diffraction_pattern_type_get_diffraction_pattern_sigma(self, *args)
    def set_diffraction_pattern_sigma(self, *args): return _pycrysfml.diffraction_pattern_type_set_diffraction_pattern_sigma(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.diffraction_pattern_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.diffraction_pattern_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.diffraction_pattern_type_data_ptr_get, _pycrysfml.diffraction_pattern_type_data_ptr_set)
diffraction_pattern_type_swigregister = _pycrysfml.diffraction_pattern_type_swigregister
diffraction_pattern_type_swigregister(diffraction_pattern_type)

class diffractometer_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diffractometer_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diffractometer_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_diffractometer_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_diffractometer_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.diffractometer_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.diffractometer_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.diffractometer_type_data_ptr_get, _pycrysfml.diffractometer_type_data_ptr_set)
diffractometer_type_swigregister = _pycrysfml.diffractometer_type_swigregister
diffractometer_type_swigregister(diffractometer_type)

class distance_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, distance_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, distance_restraint_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_distance_restraint_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_distance_restraint_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.distance_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.distance_restraint_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.distance_restraint_type_data_ptr_get, _pycrysfml.distance_restraint_type_data_ptr_set)
distance_restraint_type_swigregister = _pycrysfml.distance_restraint_type_swigregister
distance_restraint_type_swigregister(distance_restraint_type)

class file_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, file_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, file_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_file_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_file_list_type
    __del__ = lambda self : None;
    def get_file_list_nlines(self): return _pycrysfml.file_list_type_get_file_list_nlines(self)
    def set_file_list_nlines(self, *args): return _pycrysfml.file_list_type_set_file_list_nlines(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.file_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.file_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.file_list_type_data_ptr_get, _pycrysfml.file_list_type_data_ptr_set)
file_list_type_swigregister = _pycrysfml.file_list_type_swigregister
file_list_type_swigregister(file_list_type)

class FortFuncs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FortFuncs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FortFuncs, name)
    __repr__ = _swig_repr
    __swig_getmethods__["equiv_atm"] = lambda x: _pycrysfml.FortFuncs_equiv_atm
    if _newclass:equiv_atm = staticmethod(_pycrysfml.FortFuncs_equiv_atm)
    __swig_getmethods__["allocate_atoms_cell"] = lambda x: _pycrysfml.FortFuncs_allocate_atoms_cell
    if _newclass:allocate_atoms_cell = staticmethod(_pycrysfml.FortFuncs_allocate_atoms_cell)
    __swig_getmethods__["allocate_atom_list"] = lambda x: _pycrysfml.FortFuncs_allocate_atom_list
    if _newclass:allocate_atom_list = staticmethod(_pycrysfml.FortFuncs_allocate_atom_list)
    __swig_getmethods__["allocate_matom_list"] = lambda x: _pycrysfml.FortFuncs_allocate_matom_list
    if _newclass:allocate_matom_list = staticmethod(_pycrysfml.FortFuncs_allocate_matom_list)
    __swig_getmethods__["atlist1_extencell_atlist2"] = lambda x: _pycrysfml.FortFuncs_atlist1_extencell_atlist2
    if _newclass:atlist1_extencell_atlist2 = staticmethod(_pycrysfml.FortFuncs_atlist1_extencell_atlist2)
    __swig_getmethods__["atoms_cell_to_list"] = lambda x: _pycrysfml.FortFuncs_atoms_cell_to_list
    if _newclass:atoms_cell_to_list = staticmethod(_pycrysfml.FortFuncs_atoms_cell_to_list)
    __swig_getmethods__["atom_list_to_cell"] = lambda x: _pycrysfml.FortFuncs_atom_list_to_cell
    if _newclass:atom_list_to_cell = staticmethod(_pycrysfml.FortFuncs_atom_list_to_cell)
    __swig_getmethods__["atom_uequi_list"] = lambda x: _pycrysfml.FortFuncs_atom_uequi_list
    if _newclass:atom_uequi_list = staticmethod(_pycrysfml.FortFuncs_atom_uequi_list)
    __swig_getmethods__["copy_atom_list"] = lambda x: _pycrysfml.FortFuncs_copy_atom_list
    if _newclass:copy_atom_list = staticmethod(_pycrysfml.FortFuncs_copy_atom_list)
    __swig_getmethods__["deallocate_atoms_cell"] = lambda x: _pycrysfml.FortFuncs_deallocate_atoms_cell
    if _newclass:deallocate_atoms_cell = staticmethod(_pycrysfml.FortFuncs_deallocate_atoms_cell)
    __swig_getmethods__["deallocate_atom_list"] = lambda x: _pycrysfml.FortFuncs_deallocate_atom_list
    if _newclass:deallocate_atom_list = staticmethod(_pycrysfml.FortFuncs_deallocate_atom_list)
    __swig_getmethods__["deallocate_matom_list"] = lambda x: _pycrysfml.FortFuncs_deallocate_matom_list
    if _newclass:deallocate_matom_list = staticmethod(_pycrysfml.FortFuncs_deallocate_matom_list)
    __swig_getmethods__["get_atom_2nd_tensor_ctr"] = lambda x: _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr
    if _newclass:get_atom_2nd_tensor_ctr = staticmethod(_pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr)
    __swig_getmethods__["init_atom_type"] = lambda x: _pycrysfml.FortFuncs_init_atom_type
    if _newclass:init_atom_type = staticmethod(_pycrysfml.FortFuncs_init_atom_type)
    __swig_getmethods__["init_matom_type"] = lambda x: _pycrysfml.FortFuncs_init_matom_type
    if _newclass:init_matom_type = staticmethod(_pycrysfml.FortFuncs_init_matom_type)
    __swig_getmethods__["init_err_atmd"] = lambda x: _pycrysfml.FortFuncs_init_err_atmd
    if _newclass:init_err_atmd = staticmethod(_pycrysfml.FortFuncs_init_err_atmd)
    __swig_getmethods__["multi"] = lambda x: _pycrysfml.FortFuncs_multi
    if _newclass:multi = staticmethod(_pycrysfml.FortFuncs_multi)
    __swig_getmethods__["read_bin_atom_list"] = lambda x: _pycrysfml.FortFuncs_read_bin_atom_list
    if _newclass:read_bin_atom_list = staticmethod(_pycrysfml.FortFuncs_read_bin_atom_list)
    __swig_getmethods__["write_atom_list"] = lambda x: _pycrysfml.FortFuncs_write_atom_list
    if _newclass:write_atom_list = staticmethod(_pycrysfml.FortFuncs_write_atom_list)
    __swig_getmethods__["write_bin_atom_list"] = lambda x: _pycrysfml.FortFuncs_write_bin_atom_list
    if _newclass:write_bin_atom_list = staticmethod(_pycrysfml.FortFuncs_write_bin_atom_list)
    __swig_getmethods__["deallocate_ap_table"] = lambda x: _pycrysfml.FortFuncs_deallocate_ap_table
    if _newclass:deallocate_ap_table = staticmethod(_pycrysfml.FortFuncs_deallocate_ap_table)
    __swig_getmethods__["deallocate_bvel_table"] = lambda x: _pycrysfml.FortFuncs_deallocate_bvel_table
    if _newclass:deallocate_bvel_table = staticmethod(_pycrysfml.FortFuncs_deallocate_bvel_table)
    __swig_getmethods__["deallocate_bvs_table"] = lambda x: _pycrysfml.FortFuncs_deallocate_bvs_table
    if _newclass:deallocate_bvs_table = staticmethod(_pycrysfml.FortFuncs_deallocate_bvs_table)
    __swig_getmethods__["deallocate_sbvs_table"] = lambda x: _pycrysfml.FortFuncs_deallocate_sbvs_table
    if _newclass:deallocate_sbvs_table = staticmethod(_pycrysfml.FortFuncs_deallocate_sbvs_table)
    __swig_getmethods__["set_atomic_properties"] = lambda x: _pycrysfml.FortFuncs_set_atomic_properties
    if _newclass:set_atomic_properties = staticmethod(_pycrysfml.FortFuncs_set_atomic_properties)
    __swig_getmethods__["set_bvel_table"] = lambda x: _pycrysfml.FortFuncs_set_bvel_table
    if _newclass:set_bvel_table = staticmethod(_pycrysfml.FortFuncs_set_bvel_table)
    __swig_getmethods__["set_bvs_table"] = lambda x: _pycrysfml.FortFuncs_set_bvs_table
    if _newclass:set_bvs_table = staticmethod(_pycrysfml.FortFuncs_set_bvs_table)
    __swig_getmethods__["set_sbvs_table"] = lambda x: _pycrysfml.FortFuncs_set_sbvs_table
    if _newclass:set_sbvs_table = staticmethod(_pycrysfml.FortFuncs_set_sbvs_table)
    __swig_getmethods__["set_common_oxidation_states_table"] = lambda x: _pycrysfml.FortFuncs_set_common_oxidation_states_table
    if _newclass:set_common_oxidation_states_table = staticmethod(_pycrysfml.FortFuncs_set_common_oxidation_states_table)
    __swig_getmethods__["set_oxidation_states_table"] = lambda x: _pycrysfml.FortFuncs_set_oxidation_states_table
    if _newclass:set_oxidation_states_table = staticmethod(_pycrysfml.FortFuncs_set_oxidation_states_table)
    __swig_getmethods__["set_pauling_electronegativity"] = lambda x: _pycrysfml.FortFuncs_set_pauling_electronegativity
    if _newclass:set_pauling_electronegativity = staticmethod(_pycrysfml.FortFuncs_set_pauling_electronegativity)
    __swig_getmethods__["init_err_bond"] = lambda x: _pycrysfml.FortFuncs_init_err_bond
    if _newclass:init_err_bond = staticmethod(_pycrysfml.FortFuncs_init_err_bond)
    __swig_getmethods__["remove_bonds_table"] = lambda x: _pycrysfml.FortFuncs_remove_bonds_table
    if _newclass:remove_bonds_table = staticmethod(_pycrysfml.FortFuncs_remove_bonds_table)
    __swig_getmethods__["set_bonds_table"] = lambda x: _pycrysfml.FortFuncs_set_bonds_table
    if _newclass:set_bonds_table = staticmethod(_pycrysfml.FortFuncs_set_bonds_table)
    __swig_getmethods__["get_atomic_mass"] = lambda x: _pycrysfml.FortFuncs_get_atomic_mass
    if _newclass:get_atomic_mass = staticmethod(_pycrysfml.FortFuncs_get_atomic_mass)
    __swig_getmethods__["get_atomic_vol"] = lambda x: _pycrysfml.FortFuncs_get_atomic_vol
    if _newclass:get_atomic_vol = staticmethod(_pycrysfml.FortFuncs_get_atomic_vol)
    __swig_getmethods__["get_chemsymb"] = lambda x: _pycrysfml.FortFuncs_get_chemsymb
    if _newclass:get_chemsymb = staticmethod(_pycrysfml.FortFuncs_get_chemsymb)
    __swig_getmethods__["get_covalent_radius"] = lambda x: _pycrysfml.FortFuncs_get_covalent_radius
    if _newclass:get_covalent_radius = staticmethod(_pycrysfml.FortFuncs_get_covalent_radius)
    __swig_getmethods__["get_fermi_length"] = lambda x: _pycrysfml.FortFuncs_get_fermi_length
    if _newclass:get_fermi_length = staticmethod(_pycrysfml.FortFuncs_get_fermi_length)
    __swig_getmethods__["get_inc_xs"] = lambda x: _pycrysfml.FortFuncs_get_inc_xs
    if _newclass:get_inc_xs = staticmethod(_pycrysfml.FortFuncs_get_inc_xs)
    __swig_getmethods__["get_abs_xs"] = lambda x: _pycrysfml.FortFuncs_get_abs_xs
    if _newclass:get_abs_xs = staticmethod(_pycrysfml.FortFuncs_get_abs_xs)
    __swig_getmethods__["get_ionic_radius"] = lambda x: _pycrysfml.FortFuncs_get_ionic_radius
    if _newclass:get_ionic_radius = staticmethod(_pycrysfml.FortFuncs_get_ionic_radius)
    __swig_getmethods__["remove_chem_info"] = lambda x: _pycrysfml.FortFuncs_remove_chem_info
    if _newclass:remove_chem_info = staticmethod(_pycrysfml.FortFuncs_remove_chem_info)
    __swig_getmethods__["remove_delta_fp_fpp"] = lambda x: _pycrysfml.FortFuncs_remove_delta_fp_fpp
    if _newclass:remove_delta_fp_fpp = staticmethod(_pycrysfml.FortFuncs_remove_delta_fp_fpp)
    __swig_getmethods__["remove_magnetic_form"] = lambda x: _pycrysfml.FortFuncs_remove_magnetic_form
    if _newclass:remove_magnetic_form = staticmethod(_pycrysfml.FortFuncs_remove_magnetic_form)
    __swig_getmethods__["remove_xray_form"] = lambda x: _pycrysfml.FortFuncs_remove_xray_form
    if _newclass:remove_xray_form = staticmethod(_pycrysfml.FortFuncs_remove_xray_form)
    __swig_getmethods__["set_chem_info"] = lambda x: _pycrysfml.FortFuncs_set_chem_info
    if _newclass:set_chem_info = staticmethod(_pycrysfml.FortFuncs_set_chem_info)
    __swig_getmethods__["set_delta_fp_fpp"] = lambda x: _pycrysfml.FortFuncs_set_delta_fp_fpp
    if _newclass:set_delta_fp_fpp = staticmethod(_pycrysfml.FortFuncs_set_delta_fp_fpp)
    __swig_getmethods__["set_magnetic_form"] = lambda x: _pycrysfml.FortFuncs_set_magnetic_form
    if _newclass:set_magnetic_form = staticmethod(_pycrysfml.FortFuncs_set_magnetic_form)
    __swig_getmethods__["set_xray_form"] = lambda x: _pycrysfml.FortFuncs_set_xray_form
    if _newclass:set_xray_form = staticmethod(_pycrysfml.FortFuncs_set_xray_form)
    __swig_getmethods__["allocate_atoms_conf_list"] = lambda x: _pycrysfml.FortFuncs_allocate_atoms_conf_list
    if _newclass:allocate_atoms_conf_list = staticmethod(_pycrysfml.FortFuncs_allocate_atoms_conf_list)
    __swig_getmethods__["calc_bvs"] = lambda x: _pycrysfml.FortFuncs_calc_bvs
    if _newclass:calc_bvs = staticmethod(_pycrysfml.FortFuncs_calc_bvs)
    __swig_getmethods__["calc_map_bvel"] = lambda x: _pycrysfml.FortFuncs_calc_map_bvel
    if _newclass:calc_map_bvel = staticmethod(_pycrysfml.FortFuncs_calc_map_bvel)
    __swig_getmethods__["calc_map_bvs"] = lambda x: _pycrysfml.FortFuncs_calc_map_bvs
    if _newclass:calc_map_bvs = staticmethod(_pycrysfml.FortFuncs_calc_map_bvs)
    __swig_getmethods__["cost_bvs"] = lambda x: _pycrysfml.FortFuncs_cost_bvs
    if _newclass:cost_bvs = staticmethod(_pycrysfml.FortFuncs_cost_bvs)
    __swig_getmethods__["cost_bvs_coulombrep"] = lambda x: _pycrysfml.FortFuncs_cost_bvs_coulombrep
    if _newclass:cost_bvs_coulombrep = staticmethod(_pycrysfml.FortFuncs_cost_bvs_coulombrep)
    __swig_getmethods__["deallocate_atoms_conf_list"] = lambda x: _pycrysfml.FortFuncs_deallocate_atoms_conf_list
    if _newclass:deallocate_atoms_conf_list = staticmethod(_pycrysfml.FortFuncs_deallocate_atoms_conf_list)
    __swig_getmethods__["ewald"] = lambda x: _pycrysfml.FortFuncs_ewald
    if _newclass:ewald = staticmethod(_pycrysfml.FortFuncs_ewald)
    __swig_getmethods__["init_err_conf"] = lambda x: _pycrysfml.FortFuncs_init_err_conf
    if _newclass:init_err_conf = staticmethod(_pycrysfml.FortFuncs_init_err_conf)
    __swig_getmethods__["species_on_list"] = lambda x: _pycrysfml.FortFuncs_species_on_list
    if _newclass:species_on_list = staticmethod(_pycrysfml.FortFuncs_species_on_list)
    __swig_getmethods__["cell_volume_sigma"] = lambda x: _pycrysfml.FortFuncs_cell_volume_sigma
    if _newclass:cell_volume_sigma = staticmethod(_pycrysfml.FortFuncs_cell_volume_sigma)
    __swig_getmethods__["u_equiv"] = lambda x: _pycrysfml.FortFuncs_u_equiv
    if _newclass:u_equiv = staticmethod(_pycrysfml.FortFuncs_u_equiv)
    __swig_getmethods__["volume_from_cell"] = lambda x: _pycrysfml.FortFuncs_volume_from_cell
    if _newclass:volume_from_cell = staticmethod(_pycrysfml.FortFuncs_volume_from_cell)
    __swig_getmethods__["calc_cell_strain"] = lambda x: _pycrysfml.FortFuncs_calc_cell_strain
    if _newclass:calc_cell_strain = staticmethod(_pycrysfml.FortFuncs_calc_cell_strain)
    __swig_getmethods__["get_basis_from_uvw"] = lambda x: _pycrysfml.FortFuncs_get_basis_from_uvw
    if _newclass:get_basis_from_uvw = staticmethod(_pycrysfml.FortFuncs_get_basis_from_uvw)
    __swig_getmethods__["get_conventional_cell"] = lambda x: _pycrysfml.FortFuncs_get_conventional_cell
    if _newclass:get_conventional_cell = staticmethod(_pycrysfml.FortFuncs_get_conventional_cell)
    __swig_getmethods__["get_cryst_orthog_matrix"] = lambda x: _pycrysfml.FortFuncs_get_cryst_orthog_matrix
    if _newclass:get_cryst_orthog_matrix = staticmethod(_pycrysfml.FortFuncs_get_cryst_orthog_matrix)
    __swig_getmethods__["get_primitive_cell"] = lambda x: _pycrysfml.FortFuncs_get_primitive_cell
    if _newclass:get_primitive_cell = staticmethod(_pycrysfml.FortFuncs_get_primitive_cell)
    __swig_getmethods__["init_err_crys"] = lambda x: _pycrysfml.FortFuncs_init_err_crys
    if _newclass:init_err_crys = staticmethod(_pycrysfml.FortFuncs_init_err_crys)
    __swig_getmethods__["orient_eigenvectors"] = lambda x: _pycrysfml.FortFuncs_orient_eigenvectors
    if _newclass:orient_eigenvectors = staticmethod(_pycrysfml.FortFuncs_orient_eigenvectors)
    __swig_getmethods__["read_bin_crystal_cell"] = lambda x: _pycrysfml.FortFuncs_read_bin_crystal_cell
    if _newclass:read_bin_crystal_cell = staticmethod(_pycrysfml.FortFuncs_read_bin_crystal_cell)
    __swig_getmethods__["set_crystal_cell"] = lambda x: _pycrysfml.FortFuncs_set_crystal_cell
    if _newclass:set_crystal_cell = staticmethod(_pycrysfml.FortFuncs_set_crystal_cell)
    __swig_getmethods__["volume_sigma_from_cell"] = lambda x: _pycrysfml.FortFuncs_volume_sigma_from_cell
    if _newclass:volume_sigma_from_cell = staticmethod(_pycrysfml.FortFuncs_volume_sigma_from_cell)
    __swig_getmethods__["write_bin_crystal_cell"] = lambda x: _pycrysfml.FortFuncs_write_bin_crystal_cell
    if _newclass:write_bin_crystal_cell = staticmethod(_pycrysfml.FortFuncs_write_bin_crystal_cell)
    __swig_getmethods__["write_crystal_cell"] = lambda x: _pycrysfml.FortFuncs_write_crystal_cell
    if _newclass:write_crystal_cell = staticmethod(_pycrysfml.FortFuncs_write_crystal_cell)
    __swig_getmethods__["calc_fwhm_peak"] = lambda x: _pycrysfml.FortFuncs_calc_fwhm_peak
    if _newclass:calc_fwhm_peak = staticmethod(_pycrysfml.FortFuncs_calc_fwhm_peak)
    __swig_getmethods__["allocate_diffraction_pattern"] = lambda x: _pycrysfml.FortFuncs_allocate_diffraction_pattern
    if _newclass:allocate_diffraction_pattern = staticmethod(_pycrysfml.FortFuncs_allocate_diffraction_pattern)
    __swig_getmethods__["calc_background"] = lambda x: _pycrysfml.FortFuncs_calc_background
    if _newclass:calc_background = staticmethod(_pycrysfml.FortFuncs_calc_background)
    __swig_getmethods__["delete_noisy_points"] = lambda x: _pycrysfml.FortFuncs_delete_noisy_points
    if _newclass:delete_noisy_points = staticmethod(_pycrysfml.FortFuncs_delete_noisy_points)
    __swig_getmethods__["init_err_diffpatt"] = lambda x: _pycrysfml.FortFuncs_init_err_diffpatt
    if _newclass:init_err_diffpatt = staticmethod(_pycrysfml.FortFuncs_init_err_diffpatt)
    __swig_getmethods__["purge_diffraction_pattern"] = lambda x: _pycrysfml.FortFuncs_purge_diffraction_pattern
    if _newclass:purge_diffraction_pattern = staticmethod(_pycrysfml.FortFuncs_purge_diffraction_pattern)
    __swig_getmethods__["read_background_file"] = lambda x: _pycrysfml.FortFuncs_read_background_file
    if _newclass:read_background_file = staticmethod(_pycrysfml.FortFuncs_read_background_file)
    __swig_getmethods__["write_pattern_freeformat"] = lambda x: _pycrysfml.FortFuncs_write_pattern_freeformat
    if _newclass:write_pattern_freeformat = staticmethod(_pycrysfml.FortFuncs_write_pattern_freeformat)
    __swig_getmethods__["write_pattern_instrm5"] = lambda x: _pycrysfml.FortFuncs_write_pattern_instrm5
    if _newclass:write_pattern_instrm5 = staticmethod(_pycrysfml.FortFuncs_write_pattern_instrm5)
    __swig_getmethods__["write_pattern_xysig"] = lambda x: _pycrysfml.FortFuncs_write_pattern_xysig
    if _newclass:write_pattern_xysig = staticmethod(_pycrysfml.FortFuncs_write_pattern_xysig)
    __swig_getmethods__["unitcell_to_pdbfile"] = lambda x: _pycrysfml.FortFuncs_unitcell_to_pdbfile
    if _newclass:unitcell_to_pdbfile = staticmethod(_pycrysfml.FortFuncs_unitcell_to_pdbfile)
    __swig_getmethods__["ag_theta"] = lambda x: _pycrysfml.FortFuncs_ag_theta
    if _newclass:ag_theta = staticmethod(_pycrysfml.FortFuncs_ag_theta)
    __swig_getmethods__["al_theta"] = lambda x: _pycrysfml.FortFuncs_al_theta
    if _newclass:al_theta = staticmethod(_pycrysfml.FortFuncs_al_theta)
    __swig_getmethods__["bg_theta"] = lambda x: _pycrysfml.FortFuncs_bg_theta
    if _newclass:bg_theta = staticmethod(_pycrysfml.FortFuncs_bg_theta)
    __swig_getmethods__["bl_theta"] = lambda x: _pycrysfml.FortFuncs_bl_theta
    if _newclass:bl_theta = staticmethod(_pycrysfml.FortFuncs_bl_theta)
    __swig_getmethods__["becker_coppens"] = lambda x: _pycrysfml.FortFuncs_becker_coppens
    if _newclass:becker_coppens = staticmethod(_pycrysfml.FortFuncs_becker_coppens)
    __swig_getmethods__["shelx_extinction"] = lambda x: _pycrysfml.FortFuncs_shelx_extinction
    if _newclass:shelx_extinction = staticmethod(_pycrysfml.FortFuncs_shelx_extinction)
    __swig_getmethods__["correct_flippingratios"] = lambda x: _pycrysfml.FortFuncs_correct_flippingratios
    if _newclass:correct_flippingratios = staticmethod(_pycrysfml.FortFuncs_correct_flippingratios)
    __swig_getmethods__["file_to_filelist"] = lambda x: _pycrysfml.FortFuncs_file_to_filelist
    if _newclass:file_to_filelist = staticmethod(_pycrysfml.FortFuncs_file_to_filelist)
    __swig_getmethods__["init_err_form"] = lambda x: _pycrysfml.FortFuncs_init_err_form
    if _newclass:init_err_form = staticmethod(_pycrysfml.FortFuncs_init_err_form)
    __swig_getmethods__["read_uvals"] = lambda x: _pycrysfml.FortFuncs_read_uvals
    if _newclass:read_uvals = staticmethod(_pycrysfml.FortFuncs_read_uvals)
    __swig_getmethods__["write_cif_powder_profile"] = lambda x: _pycrysfml.FortFuncs_write_cif_powder_profile
    if _newclass:write_cif_powder_profile = staticmethod(_pycrysfml.FortFuncs_write_cif_powder_profile)
    __swig_getmethods__["write_cif_template"] = lambda x: _pycrysfml.FortFuncs_write_cif_template
    if _newclass:write_cif_template = staticmethod(_pycrysfml.FortFuncs_write_cif_template)
    __swig_getmethods__["write_shx_template"] = lambda x: _pycrysfml.FortFuncs_write_shx_template
    if _newclass:write_shx_template = staticmethod(_pycrysfml.FortFuncs_write_shx_template)
    __swig_getmethods__["allocate_coordination_type"] = lambda x: _pycrysfml.FortFuncs_allocate_coordination_type
    if _newclass:allocate_coordination_type = staticmethod(_pycrysfml.FortFuncs_allocate_coordination_type)
    __swig_getmethods__["allocate_point_list"] = lambda x: _pycrysfml.FortFuncs_allocate_point_list
    if _newclass:allocate_point_list = staticmethod(_pycrysfml.FortFuncs_allocate_point_list)
    __swig_getmethods__["angle_and_sigma"] = lambda x: _pycrysfml.FortFuncs_angle_and_sigma
    if _newclass:angle_and_sigma = staticmethod(_pycrysfml.FortFuncs_angle_and_sigma)
    __swig_getmethods__["calc_dist_angle"] = lambda x: _pycrysfml.FortFuncs_calc_dist_angle
    if _newclass:calc_dist_angle = staticmethod(_pycrysfml.FortFuncs_calc_dist_angle)
    __swig_getmethods__["calc_dist_angle_sigma"] = lambda x: _pycrysfml.FortFuncs_calc_dist_angle_sigma
    if _newclass:calc_dist_angle_sigma = staticmethod(_pycrysfml.FortFuncs_calc_dist_angle_sigma)
    __swig_getmethods__["deallocate_coordination_type"] = lambda x: _pycrysfml.FortFuncs_deallocate_coordination_type
    if _newclass:deallocate_coordination_type = staticmethod(_pycrysfml.FortFuncs_deallocate_coordination_type)
    __swig_getmethods__["deallocate_point_list"] = lambda x: _pycrysfml.FortFuncs_deallocate_point_list
    if _newclass:deallocate_point_list = staticmethod(_pycrysfml.FortFuncs_deallocate_point_list)
    __swig_getmethods__["distance_and_sigma"] = lambda x: _pycrysfml.FortFuncs_distance_and_sigma
    if _newclass:distance_and_sigma = staticmethod(_pycrysfml.FortFuncs_distance_and_sigma)
    __swig_getmethods__["get_anglen_axis_from_rotmat"] = lambda x: _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat
    if _newclass:get_anglen_axis_from_rotmat = staticmethod(_pycrysfml.FortFuncs_get_anglen_axis_from_rotmat)
    __swig_getmethods__["get_euler_from_fract"] = lambda x: _pycrysfml.FortFuncs_get_euler_from_fract
    if _newclass:get_euler_from_fract = staticmethod(_pycrysfml.FortFuncs_get_euler_from_fract)
    __swig_getmethods__["get_matrix_moving_v_to_u"] = lambda x: _pycrysfml.FortFuncs_get_matrix_moving_v_to_u
    if _newclass:get_matrix_moving_v_to_u = staticmethod(_pycrysfml.FortFuncs_get_matrix_moving_v_to_u)
    __swig_getmethods__["get_omegachiphi"] = lambda x: _pycrysfml.FortFuncs_get_omegachiphi
    if _newclass:get_omegachiphi = staticmethod(_pycrysfml.FortFuncs_get_omegachiphi)
    __swig_getmethods__["get_phithechi"] = lambda x: _pycrysfml.FortFuncs_get_phithechi
    if _newclass:get_phithechi = staticmethod(_pycrysfml.FortFuncs_get_phithechi)
    __swig_getmethods__["get_transf_list"] = lambda x: _pycrysfml.FortFuncs_get_transf_list
    if _newclass:get_transf_list = staticmethod(_pycrysfml.FortFuncs_get_transf_list)
    __swig_getmethods__["init_err_geom"] = lambda x: _pycrysfml.FortFuncs_init_err_geom
    if _newclass:init_err_geom = staticmethod(_pycrysfml.FortFuncs_init_err_geom)
    __swig_getmethods__["p1_dist"] = lambda x: _pycrysfml.FortFuncs_p1_dist
    if _newclass:p1_dist = staticmethod(_pycrysfml.FortFuncs_p1_dist)
    __swig_getmethods__["print_distances"] = lambda x: _pycrysfml.FortFuncs_print_distances
    if _newclass:print_distances = staticmethod(_pycrysfml.FortFuncs_print_distances)
    __swig_getmethods__["set_rotation_matrix"] = lambda x: _pycrysfml.FortFuncs_set_rotation_matrix
    if _newclass:set_rotation_matrix = staticmethod(_pycrysfml.FortFuncs_set_rotation_matrix)
    __swig_getmethods__["set_tdist_coordination"] = lambda x: _pycrysfml.FortFuncs_set_tdist_coordination
    if _newclass:set_tdist_coordination = staticmethod(_pycrysfml.FortFuncs_set_tdist_coordination)
    __swig_getmethods__["set_tdist_partial_coordination"] = lambda x: _pycrysfml.FortFuncs_set_tdist_partial_coordination
    if _newclass:set_tdist_partial_coordination = staticmethod(_pycrysfml.FortFuncs_set_tdist_partial_coordination)
    __swig_getmethods__["torsion_and_sigma"] = lambda x: _pycrysfml.FortFuncs_torsion_and_sigma
    if _newclass:torsion_and_sigma = staticmethod(_pycrysfml.FortFuncs_torsion_and_sigma)
    __swig_getmethods__["directory_exists"] = lambda x: _pycrysfml.FortFuncs_directory_exists
    if _newclass:directory_exists = staticmethod(_pycrysfml.FortFuncs_directory_exists)
    __swig_getmethods__["write_date_time"] = lambda x: _pycrysfml.FortFuncs_write_date_time
    if _newclass:write_date_time = staticmethod(_pycrysfml.FortFuncs_write_date_time)
    __swig_getmethods__["define_uncompress_program"] = lambda x: _pycrysfml.FortFuncs_define_uncompress_program
    if _newclass:define_uncompress_program = staticmethod(_pycrysfml.FortFuncs_define_uncompress_program)
    __swig_getmethods__["get_absolute_data_path"] = lambda x: _pycrysfml.FortFuncs_get_absolute_data_path
    if _newclass:get_absolute_data_path = staticmethod(_pycrysfml.FortFuncs_get_absolute_data_path)
    __swig_getmethods__["get_next_yearcycle"] = lambda x: _pycrysfml.FortFuncs_get_next_yearcycle
    if _newclass:get_next_yearcycle = staticmethod(_pycrysfml.FortFuncs_get_next_yearcycle)
    __swig_getmethods__["init_err_illdata"] = lambda x: _pycrysfml.FortFuncs_init_err_illdata
    if _newclass:init_err_illdata = staticmethod(_pycrysfml.FortFuncs_init_err_illdata)
    __swig_getmethods__["init_sxtal_numor"] = lambda x: _pycrysfml.FortFuncs_init_sxtal_numor
    if _newclass:init_sxtal_numor = staticmethod(_pycrysfml.FortFuncs_init_sxtal_numor)
    __swig_getmethods__["initialize_data_directory"] = lambda x: _pycrysfml.FortFuncs_initialize_data_directory
    if _newclass:initialize_data_directory = staticmethod(_pycrysfml.FortFuncs_initialize_data_directory)
    __swig_getmethods__["read_current_instrm"] = lambda x: _pycrysfml.FortFuncs_read_current_instrm
    if _newclass:read_current_instrm = staticmethod(_pycrysfml.FortFuncs_read_current_instrm)
    __swig_getmethods__["set_current_orient"] = lambda x: _pycrysfml.FortFuncs_set_current_orient
    if _newclass:set_current_orient = staticmethod(_pycrysfml.FortFuncs_set_current_orient)
    __swig_getmethods__["set_default_instrument"] = lambda x: _pycrysfml.FortFuncs_set_default_instrument
    if _newclass:set_default_instrument = staticmethod(_pycrysfml.FortFuncs_set_default_instrument)
    __swig_getmethods__["set_ill_data_directory"] = lambda x: _pycrysfml.FortFuncs_set_ill_data_directory
    if _newclass:set_ill_data_directory = staticmethod(_pycrysfml.FortFuncs_set_ill_data_directory)
    __swig_getmethods__["set_instrm_directory"] = lambda x: _pycrysfml.FortFuncs_set_instrm_directory
    if _newclass:set_instrm_directory = staticmethod(_pycrysfml.FortFuncs_set_instrm_directory)
    __swig_getmethods__["set_instrm_geometry_directory"] = lambda x: _pycrysfml.FortFuncs_set_instrm_geometry_directory
    if _newclass:set_instrm_geometry_directory = staticmethod(_pycrysfml.FortFuncs_set_instrm_geometry_directory)
    __swig_getmethods__["update_current_instrm_ub"] = lambda x: _pycrysfml.FortFuncs_update_current_instrm_ub
    if _newclass:update_current_instrm_ub = staticmethod(_pycrysfml.FortFuncs_update_current_instrm_ub)
    __swig_getmethods__["write_current_instrm_data"] = lambda x: _pycrysfml.FortFuncs_write_current_instrm_data
    if _newclass:write_current_instrm_data = staticmethod(_pycrysfml.FortFuncs_write_current_instrm_data)
    __swig_getmethods__["write_generic_numor"] = lambda x: _pycrysfml.FortFuncs_write_generic_numor
    if _newclass:write_generic_numor = staticmethod(_pycrysfml.FortFuncs_write_generic_numor)
    __swig_getmethods__["write_headerinfo_sxtal_numor"] = lambda x: _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor
    if _newclass:write_headerinfo_sxtal_numor = staticmethod(_pycrysfml.FortFuncs_write_headerinfo_sxtal_numor)
    __swig_getmethods__["write_sxtal_numor"] = lambda x: _pycrysfml.FortFuncs_write_sxtal_numor
    if _newclass:write_sxtal_numor = staticmethod(_pycrysfml.FortFuncs_write_sxtal_numor)
    __swig_getmethods__["read_calibration_file"] = lambda x: _pycrysfml.FortFuncs_read_calibration_file
    if _newclass:read_calibration_file = staticmethod(_pycrysfml.FortFuncs_read_calibration_file)
    __swig_getmethods__["error_message"] = lambda x: _pycrysfml.FortFuncs_error_message
    if _newclass:error_message = staticmethod(_pycrysfml.FortFuncs_error_message)
    __swig_getmethods__["info_message"] = lambda x: _pycrysfml.FortFuncs_info_message
    if _newclass:info_message = staticmethod(_pycrysfml.FortFuncs_info_message)
    __swig_getmethods__["print_message"] = lambda x: _pycrysfml.FortFuncs_print_message
    if _newclass:print_message = staticmethod(_pycrysfml.FortFuncs_print_message)
    __swig_getmethods__["wait_message"] = lambda x: _pycrysfml.FortFuncs_wait_message
    if _newclass:wait_message = staticmethod(_pycrysfml.FortFuncs_wait_message)
    __swig_getmethods__["write_scroll_text"] = lambda x: _pycrysfml.FortFuncs_write_scroll_text
    if _newclass:write_scroll_text = staticmethod(_pycrysfml.FortFuncs_write_scroll_text)
    __swig_getmethods__["calc_induced_sk"] = lambda x: _pycrysfml.FortFuncs_calc_induced_sk
    if _newclass:calc_induced_sk = staticmethod(_pycrysfml.FortFuncs_calc_induced_sk)
    __swig_getmethods__["cleanup_symmetry_operators"] = lambda x: _pycrysfml.FortFuncs_cleanup_symmetry_operators
    if _newclass:cleanup_symmetry_operators = staticmethod(_pycrysfml.FortFuncs_cleanup_symmetry_operators)
    __swig_getmethods__["init_magsymm_k_type"] = lambda x: _pycrysfml.FortFuncs_init_magsymm_k_type
    if _newclass:init_magsymm_k_type = staticmethod(_pycrysfml.FortFuncs_init_magsymm_k_type)
    __swig_getmethods__["get_moment_ctr"] = lambda x: _pycrysfml.FortFuncs_get_moment_ctr
    if _newclass:get_moment_ctr = staticmethod(_pycrysfml.FortFuncs_get_moment_ctr)
    __swig_getmethods__["set_magnetic_space_group"] = lambda x: _pycrysfml.FortFuncs_set_magnetic_space_group
    if _newclass:set_magnetic_space_group = staticmethod(_pycrysfml.FortFuncs_set_magnetic_space_group)
    __swig_getmethods__["set_shubnikov_group"] = lambda x: _pycrysfml.FortFuncs_set_shubnikov_group
    if _newclass:set_shubnikov_group = staticmethod(_pycrysfml.FortFuncs_set_shubnikov_group)
    __swig_getmethods__["setting_change_maggroup"] = lambda x: _pycrysfml.FortFuncs_setting_change_maggroup
    if _newclass:setting_change_maggroup = staticmethod(_pycrysfml.FortFuncs_setting_change_maggroup)
    __swig_getmethods__["write_magnetic_structure"] = lambda x: _pycrysfml.FortFuncs_write_magnetic_structure
    if _newclass:write_magnetic_structure = staticmethod(_pycrysfml.FortFuncs_write_magnetic_structure)
    __swig_getmethods__["write_mcif"] = lambda x: _pycrysfml.FortFuncs_write_mcif
    if _newclass:write_mcif = staticmethod(_pycrysfml.FortFuncs_write_mcif)
    __swig_getmethods__["write_shubnikov_group"] = lambda x: _pycrysfml.FortFuncs_write_shubnikov_group
    if _newclass:write_shubnikov_group = staticmethod(_pycrysfml.FortFuncs_write_shubnikov_group)
    __swig_getmethods__["index_cube"] = lambda x: _pycrysfml.FortFuncs_index_cube
    if _newclass:index_cube = staticmethod(_pycrysfml.FortFuncs_index_cube)
    __swig_getmethods__["vpoint_in_cube"] = lambda x: _pycrysfml.FortFuncs_vpoint_in_cube
    if _newclass:vpoint_in_cube = staticmethod(_pycrysfml.FortFuncs_vpoint_in_cube)
    __swig_getmethods__["vpoint_in_line"] = lambda x: _pycrysfml.FortFuncs_vpoint_in_line
    if _newclass:vpoint_in_line = staticmethod(_pycrysfml.FortFuncs_vpoint_in_line)
    __swig_getmethods__["vpoint_in_square"] = lambda x: _pycrysfml.FortFuncs_vpoint_in_square
    if _newclass:vpoint_in_square = staticmethod(_pycrysfml.FortFuncs_vpoint_in_square)
    __swig_getmethods__["init_err_maps"] = lambda x: _pycrysfml.FortFuncs_init_err_maps
    if _newclass:init_err_maps = staticmethod(_pycrysfml.FortFuncs_init_err_maps)
    __swig_getmethods__["set_cube_info"] = lambda x: _pycrysfml.FortFuncs_set_cube_info
    if _newclass:set_cube_info = staticmethod(_pycrysfml.FortFuncs_set_cube_info)
    __swig_getmethods__["veclength"] = lambda x: _pycrysfml.FortFuncs_veclength
    if _newclass:veclength = staticmethod(_pycrysfml.FortFuncs_veclength)
    __swig_getmethods__["init_err_math3d"] = lambda x: _pycrysfml.FortFuncs_init_err_math3d
    if _newclass:init_err_math3d = staticmethod(_pycrysfml.FortFuncs_init_err_math3d)
    __swig_getmethods__["set_eps"] = lambda x: _pycrysfml.FortFuncs_set_eps
    if _newclass:set_eps = staticmethod(_pycrysfml.FortFuncs_set_eps)
    __swig_getmethods__["set_eps_default"] = lambda x: _pycrysfml.FortFuncs_set_eps_default
    if _newclass:set_eps_default = staticmethod(_pycrysfml.FortFuncs_set_eps_default)
    __swig_getmethods__["get_plane_from_3points"] = lambda x: _pycrysfml.FortFuncs_get_plane_from_3points
    if _newclass:get_plane_from_3points = staticmethod(_pycrysfml.FortFuncs_get_plane_from_3points)
    __swig_getmethods__["matrix_diageigen"] = lambda x: _pycrysfml.FortFuncs_matrix_diageigen
    if _newclass:matrix_diageigen = staticmethod(_pycrysfml.FortFuncs_matrix_diageigen)
    __swig_getmethods__["matrix_inverse"] = lambda x: _pycrysfml.FortFuncs_matrix_inverse
    if _newclass:matrix_inverse = staticmethod(_pycrysfml.FortFuncs_matrix_inverse)
    __swig_getmethods__["resolv_sist_1x2"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_1x2
    if _newclass:resolv_sist_1x2 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_1x2)
    __swig_getmethods__["resolv_sist_1x3"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_1x3
    if _newclass:resolv_sist_1x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_1x3)
    __swig_getmethods__["resolv_sist_2x2"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_2x2
    if _newclass:resolv_sist_2x2 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_2x2)
    __swig_getmethods__["resolv_sist_2x3"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_2x3
    if _newclass:resolv_sist_2x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_2x3)
    __swig_getmethods__["resolv_sist_3x3"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_3x3
    if _newclass:resolv_sist_3x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_3x3)
    __swig_getmethods__["bessj0"] = lambda x: _pycrysfml.FortFuncs_bessj0
    if _newclass:bessj0 = staticmethod(_pycrysfml.FortFuncs_bessj0)
    __swig_getmethods__["bessj1"] = lambda x: _pycrysfml.FortFuncs_bessj1
    if _newclass:bessj1 = staticmethod(_pycrysfml.FortFuncs_bessj1)
    __swig_getmethods__["bessj"] = lambda x: _pycrysfml.FortFuncs_bessj
    if _newclass:bessj = staticmethod(_pycrysfml.FortFuncs_bessj)
    __swig_getmethods__["pgcd"] = lambda x: _pycrysfml.FortFuncs_pgcd
    if _newclass:pgcd = staticmethod(_pycrysfml.FortFuncs_pgcd)
    __swig_getmethods__["ppcm"] = lambda x: _pycrysfml.FortFuncs_ppcm
    if _newclass:ppcm = staticmethod(_pycrysfml.FortFuncs_ppcm)
    __swig_getmethods__["epss_val"] = lambda x: _pycrysfml.FortFuncs_epss_val
    if _newclass:epss_val = staticmethod(_pycrysfml.FortFuncs_epss_val)
    __swig_getmethods__["ep_ss_val"] = lambda x: _pycrysfml.FortFuncs_ep_ss_val
    if _newclass:ep_ss_val = staticmethod(_pycrysfml.FortFuncs_ep_ss_val)
    __swig_getmethods__["init_err_mathgen"] = lambda x: _pycrysfml.FortFuncs_init_err_mathgen
    if _newclass:init_err_mathgen = staticmethod(_pycrysfml.FortFuncs_init_err_mathgen)
    __swig_getmethods__["set_epsg_default"] = lambda x: _pycrysfml.FortFuncs_set_epsg_default
    if _newclass:set_epsg_default = staticmethod(_pycrysfml.FortFuncs_set_epsg_default)
    __swig_getmethods__["cartesian_to_fractional"] = lambda x: _pycrysfml.FortFuncs_cartesian_to_fractional
    if _newclass:cartesian_to_fractional = staticmethod(_pycrysfml.FortFuncs_cartesian_to_fractional)
    __swig_getmethods__["cartesian_to_spherical"] = lambda x: _pycrysfml.FortFuncs_cartesian_to_spherical
    if _newclass:cartesian_to_spherical = staticmethod(_pycrysfml.FortFuncs_cartesian_to_spherical)
    __swig_getmethods__["cartesian_to_zmatrix"] = lambda x: _pycrysfml.FortFuncs_cartesian_to_zmatrix
    if _newclass:cartesian_to_zmatrix = staticmethod(_pycrysfml.FortFuncs_cartesian_to_zmatrix)
    __swig_getmethods__["fix_reference"] = lambda x: _pycrysfml.FortFuncs_fix_reference
    if _newclass:fix_reference = staticmethod(_pycrysfml.FortFuncs_fix_reference)
    __swig_getmethods__["fix_orient_cartesian"] = lambda x: _pycrysfml.FortFuncs_fix_orient_cartesian
    if _newclass:fix_orient_cartesian = staticmethod(_pycrysfml.FortFuncs_fix_orient_cartesian)
    __swig_getmethods__["fractional_to_cartesian"] = lambda x: _pycrysfml.FortFuncs_fractional_to_cartesian
    if _newclass:fractional_to_cartesian = staticmethod(_pycrysfml.FortFuncs_fractional_to_cartesian)
    __swig_getmethods__["fractional_to_spherical"] = lambda x: _pycrysfml.FortFuncs_fractional_to_spherical
    if _newclass:fractional_to_spherical = staticmethod(_pycrysfml.FortFuncs_fractional_to_spherical)
    __swig_getmethods__["fractional_to_zmatrix"] = lambda x: _pycrysfml.FortFuncs_fractional_to_zmatrix
    if _newclass:fractional_to_zmatrix = staticmethod(_pycrysfml.FortFuncs_fractional_to_zmatrix)
    __swig_getmethods__["init_err_molec"] = lambda x: _pycrysfml.FortFuncs_init_err_molec
    if _newclass:init_err_molec = staticmethod(_pycrysfml.FortFuncs_init_err_molec)
    __swig_getmethods__["init_molecule"] = lambda x: _pycrysfml.FortFuncs_init_molecule
    if _newclass:init_molecule = staticmethod(_pycrysfml.FortFuncs_init_molecule)
    __swig_getmethods__["init_mol_crys"] = lambda x: _pycrysfml.FortFuncs_init_mol_crys
    if _newclass:init_mol_crys = staticmethod(_pycrysfml.FortFuncs_init_mol_crys)
    __swig_getmethods__["molcrys_to_atomlist"] = lambda x: _pycrysfml.FortFuncs_molcrys_to_atomlist
    if _newclass:molcrys_to_atomlist = staticmethod(_pycrysfml.FortFuncs_molcrys_to_atomlist)
    __swig_getmethods__["molec_to_atomlist"] = lambda x: _pycrysfml.FortFuncs_molec_to_atomlist
    if _newclass:molec_to_atomlist = staticmethod(_pycrysfml.FortFuncs_molec_to_atomlist)
    __swig_getmethods__["set_euler_matrix"] = lambda x: _pycrysfml.FortFuncs_set_euler_matrix
    if _newclass:set_euler_matrix = staticmethod(_pycrysfml.FortFuncs_set_euler_matrix)
    __swig_getmethods__["spherical_to_cartesian"] = lambda x: _pycrysfml.FortFuncs_spherical_to_cartesian
    if _newclass:spherical_to_cartesian = staticmethod(_pycrysfml.FortFuncs_spherical_to_cartesian)
    __swig_getmethods__["spherical_to_fractional"] = lambda x: _pycrysfml.FortFuncs_spherical_to_fractional
    if _newclass:spherical_to_fractional = staticmethod(_pycrysfml.FortFuncs_spherical_to_fractional)
    __swig_getmethods__["spherical_to_zmatrix"] = lambda x: _pycrysfml.FortFuncs_spherical_to_zmatrix
    if _newclass:spherical_to_zmatrix = staticmethod(_pycrysfml.FortFuncs_spherical_to_zmatrix)
    __swig_getmethods__["write_molecular_crystal"] = lambda x: _pycrysfml.FortFuncs_write_molecular_crystal
    if _newclass:write_molecular_crystal = staticmethod(_pycrysfml.FortFuncs_write_molecular_crystal)
    __swig_getmethods__["write_molecule"] = lambda x: _pycrysfml.FortFuncs_write_molecule
    if _newclass:write_molecule = staticmethod(_pycrysfml.FortFuncs_write_molecule)
    __swig_getmethods__["zmatrix_to_cartesian"] = lambda x: _pycrysfml.FortFuncs_zmatrix_to_cartesian
    if _newclass:zmatrix_to_cartesian = staticmethod(_pycrysfml.FortFuncs_zmatrix_to_cartesian)
    __swig_getmethods__["zmatrix_to_fractional"] = lambda x: _pycrysfml.FortFuncs_zmatrix_to_fractional
    if _newclass:zmatrix_to_fractional = staticmethod(_pycrysfml.FortFuncs_zmatrix_to_fractional)
    __swig_getmethods__["zmatrix_to_spherical"] = lambda x: _pycrysfml.FortFuncs_zmatrix_to_spherical
    if _newclass:zmatrix_to_spherical = staticmethod(_pycrysfml.FortFuncs_zmatrix_to_spherical)
    __swig_getmethods__["calc_mag_interaction_vector"] = lambda x: _pycrysfml.FortFuncs_calc_mag_interaction_vector
    if _newclass:calc_mag_interaction_vector = staticmethod(_pycrysfml.FortFuncs_calc_mag_interaction_vector)
    __swig_getmethods__["calc_magnetic_strf_miv"] = lambda x: _pycrysfml.FortFuncs_calc_magnetic_strf_miv
    if _newclass:calc_magnetic_strf_miv = staticmethod(_pycrysfml.FortFuncs_calc_magnetic_strf_miv)
    __swig_getmethods__["calc_magnetic_strf_miv_dom"] = lambda x: _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom
    if _newclass:calc_magnetic_strf_miv_dom = staticmethod(_pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom)
    __swig_getmethods__["calc_magnetic_strf_tensor"] = lambda x: _pycrysfml.FortFuncs_calc_magnetic_strf_tensor
    if _newclass:calc_magnetic_strf_tensor = staticmethod(_pycrysfml.FortFuncs_calc_magnetic_strf_tensor)
    __swig_getmethods__["gen_satellites"] = lambda x: _pycrysfml.FortFuncs_gen_satellites
    if _newclass:gen_satellites = staticmethod(_pycrysfml.FortFuncs_gen_satellites)
    __swig_getmethods__["init_err_msfac"] = lambda x: _pycrysfml.FortFuncs_init_err_msfac
    if _newclass:init_err_msfac = staticmethod(_pycrysfml.FortFuncs_init_err_msfac)
    __swig_getmethods__["init_mag_structure_factors"] = lambda x: _pycrysfml.FortFuncs_init_mag_structure_factors
    if _newclass:init_mag_structure_factors = staticmethod(_pycrysfml.FortFuncs_init_mag_structure_factors)
    __swig_getmethods__["mag_structure_factors"] = lambda x: _pycrysfml.FortFuncs_mag_structure_factors
    if _newclass:mag_structure_factors = staticmethod(_pycrysfml.FortFuncs_mag_structure_factors)
    __swig_getmethods__["write_mag_structure_factors"] = lambda x: _pycrysfml.FortFuncs_write_mag_structure_factors
    if _newclass:write_mag_structure_factors = staticmethod(_pycrysfml.FortFuncs_write_mag_structure_factors)
    __swig_getmethods__["init_err_optim"] = lambda x: _pycrysfml.FortFuncs_init_err_optim
    if _newclass:init_err_optim = staticmethod(_pycrysfml.FortFuncs_init_err_optim)
    __swig_getmethods__["init_opt_conditions"] = lambda x: _pycrysfml.FortFuncs_init_opt_conditions
    if _newclass:init_opt_conditions = staticmethod(_pycrysfml.FortFuncs_init_opt_conditions)
    __swig_getmethods__["write_optimization_conditions"] = lambda x: _pycrysfml.FortFuncs_write_optimization_conditions
    if _newclass:write_optimization_conditions = staticmethod(_pycrysfml.FortFuncs_write_optimization_conditions)
    __swig_getmethods__["write_polar_info"] = lambda x: _pycrysfml.FortFuncs_write_polar_info
    if _newclass:write_polar_info = staticmethod(_pycrysfml.FortFuncs_write_polar_info)
    __swig_getmethods__["write_polar_line"] = lambda x: _pycrysfml.FortFuncs_write_polar_line
    if _newclass:write_polar_line = staticmethod(_pycrysfml.FortFuncs_write_polar_line)
    __swig_getmethods__["init_prof_val"] = lambda x: _pycrysfml.FortFuncs_init_prof_val
    if _newclass:init_prof_val = staticmethod(_pycrysfml.FortFuncs_init_prof_val)
    __swig_getmethods__["prof_val"] = lambda x: _pycrysfml.FortFuncs_prof_val
    if _newclass:prof_val = staticmethod(_pycrysfml.FortFuncs_prof_val)
    __swig_getmethods__["tof_carpenter"] = lambda x: _pycrysfml.FortFuncs_tof_carpenter
    if _newclass:tof_carpenter = staticmethod(_pycrysfml.FortFuncs_tof_carpenter)
    __swig_getmethods__["tof_jorgensen"] = lambda x: _pycrysfml.FortFuncs_tof_jorgensen
    if _newclass:tof_jorgensen = staticmethod(_pycrysfml.FortFuncs_tof_jorgensen)
    __swig_getmethods__["tof_jorgensen_vondreele"] = lambda x: _pycrysfml.FortFuncs_tof_jorgensen_vondreele
    if _newclass:tof_jorgensen_vondreele = staticmethod(_pycrysfml.FortFuncs_tof_jorgensen_vondreele)
    __swig_getmethods__["hk_equiv"] = lambda x: _pycrysfml.FortFuncs_hk_equiv
    if _newclass:hk_equiv = staticmethod(_pycrysfml.FortFuncs_hk_equiv)
    __swig_getmethods__["k_equiv"] = lambda x: _pycrysfml.FortFuncs_k_equiv
    if _newclass:k_equiv = staticmethod(_pycrysfml.FortFuncs_k_equiv)
    __swig_getmethods__["k_equiv_minus_k"] = lambda x: _pycrysfml.FortFuncs_k_equiv_minus_k
    if _newclass:k_equiv_minus_k = staticmethod(_pycrysfml.FortFuncs_k_equiv_minus_k)
    __swig_getmethods__["k_star"] = lambda x: _pycrysfml.FortFuncs_k_star
    if _newclass:k_star = staticmethod(_pycrysfml.FortFuncs_k_star)
    __swig_getmethods__["write_group_k"] = lambda x: _pycrysfml.FortFuncs_write_group_k
    if _newclass:write_group_k = staticmethod(_pycrysfml.FortFuncs_write_group_k)
    __swig_getmethods__["init_err_random"] = lambda x: _pycrysfml.FortFuncs_init_err_random
    if _newclass:init_err_random = staticmethod(_pycrysfml.FortFuncs_init_err_random)
    __swig_getmethods__["random_beta"] = lambda x: _pycrysfml.FortFuncs_random_beta
    if _newclass:random_beta = staticmethod(_pycrysfml.FortFuncs_random_beta)
    __swig_getmethods__["random_binomial1"] = lambda x: _pycrysfml.FortFuncs_random_binomial1
    if _newclass:random_binomial1 = staticmethod(_pycrysfml.FortFuncs_random_binomial1)
    __swig_getmethods__["random_binomial2"] = lambda x: _pycrysfml.FortFuncs_random_binomial2
    if _newclass:random_binomial2 = staticmethod(_pycrysfml.FortFuncs_random_binomial2)
    __swig_getmethods__["random_cauchy"] = lambda x: _pycrysfml.FortFuncs_random_cauchy
    if _newclass:random_cauchy = staticmethod(_pycrysfml.FortFuncs_random_cauchy)
    __swig_getmethods__["random_chisq"] = lambda x: _pycrysfml.FortFuncs_random_chisq
    if _newclass:random_chisq = staticmethod(_pycrysfml.FortFuncs_random_chisq)
    __swig_getmethods__["random_exponential"] = lambda x: _pycrysfml.FortFuncs_random_exponential
    if _newclass:random_exponential = staticmethod(_pycrysfml.FortFuncs_random_exponential)
    __swig_getmethods__["random_gamma"] = lambda x: _pycrysfml.FortFuncs_random_gamma
    if _newclass:random_gamma = staticmethod(_pycrysfml.FortFuncs_random_gamma)
    __swig_getmethods__["random_gamma1"] = lambda x: _pycrysfml.FortFuncs_random_gamma1
    if _newclass:random_gamma1 = staticmethod(_pycrysfml.FortFuncs_random_gamma1)
    __swig_getmethods__["random_gamma2"] = lambda x: _pycrysfml.FortFuncs_random_gamma2
    if _newclass:random_gamma2 = staticmethod(_pycrysfml.FortFuncs_random_gamma2)
    __swig_getmethods__["random_inv_gauss"] = lambda x: _pycrysfml.FortFuncs_random_inv_gauss
    if _newclass:random_inv_gauss = staticmethod(_pycrysfml.FortFuncs_random_inv_gauss)
    __swig_getmethods__["random_mvnorm"] = lambda x: _pycrysfml.FortFuncs_random_mvnorm
    if _newclass:random_mvnorm = staticmethod(_pycrysfml.FortFuncs_random_mvnorm)
    __swig_getmethods__["random_neg_binomial"] = lambda x: _pycrysfml.FortFuncs_random_neg_binomial
    if _newclass:random_neg_binomial = staticmethod(_pycrysfml.FortFuncs_random_neg_binomial)
    __swig_getmethods__["random_normal"] = lambda x: _pycrysfml.FortFuncs_random_normal
    if _newclass:random_normal = staticmethod(_pycrysfml.FortFuncs_random_normal)
    __swig_getmethods__["random_order"] = lambda x: _pycrysfml.FortFuncs_random_order
    if _newclass:random_order = staticmethod(_pycrysfml.FortFuncs_random_order)
    __swig_getmethods__["random_poisson"] = lambda x: _pycrysfml.FortFuncs_random_poisson
    if _newclass:random_poisson = staticmethod(_pycrysfml.FortFuncs_random_poisson)
    __swig_getmethods__["random_t"] = lambda x: _pycrysfml.FortFuncs_random_t
    if _newclass:random_t = staticmethod(_pycrysfml.FortFuncs_random_t)
    __swig_getmethods__["random_von_mises"] = lambda x: _pycrysfml.FortFuncs_random_von_mises
    if _newclass:random_von_mises = staticmethod(_pycrysfml.FortFuncs_random_von_mises)
    __swig_getmethods__["random_weibull"] = lambda x: _pycrysfml.FortFuncs_random_weibull
    if _newclass:random_weibull = staticmethod(_pycrysfml.FortFuncs_random_weibull)
    __swig_getmethods__["seed_random_number"] = lambda x: _pycrysfml.FortFuncs_seed_random_number
    if _newclass:seed_random_number = staticmethod(_pycrysfml.FortFuncs_seed_random_number)
    __swig_getmethods__["allocate_vparam"] = lambda x: _pycrysfml.FortFuncs_allocate_vparam
    if _newclass:allocate_vparam = staticmethod(_pycrysfml.FortFuncs_allocate_vparam)
    __swig_getmethods__["get_restang_line"] = lambda x: _pycrysfml.FortFuncs_get_restang_line
    if _newclass:get_restang_line = staticmethod(_pycrysfml.FortFuncs_get_restang_line)
    __swig_getmethods__["get_restdis_line"] = lambda x: _pycrysfml.FortFuncs_get_restdis_line
    if _newclass:get_restdis_line = staticmethod(_pycrysfml.FortFuncs_get_restdis_line)
    __swig_getmethods__["get_resttor_line"] = lambda x: _pycrysfml.FortFuncs_get_resttor_line
    if _newclass:get_resttor_line = staticmethod(_pycrysfml.FortFuncs_get_resttor_line)
    __swig_getmethods__["init_err_refcodes"] = lambda x: _pycrysfml.FortFuncs_init_err_refcodes
    if _newclass:init_err_refcodes = staticmethod(_pycrysfml.FortFuncs_init_err_refcodes)
    __swig_getmethods__["init_refcodes"] = lambda x: _pycrysfml.FortFuncs_init_refcodes
    if _newclass:init_refcodes = staticmethod(_pycrysfml.FortFuncs_init_refcodes)
    __swig_getmethods__["read_refgcodes_file"] = lambda x: _pycrysfml.FortFuncs_read_refgcodes_file
    if _newclass:read_refgcodes_file = staticmethod(_pycrysfml.FortFuncs_read_refgcodes_file)
    __swig_getmethods__["vstate_to_modelpar"] = lambda x: _pycrysfml.FortFuncs_vstate_to_modelpar
    if _newclass:vstate_to_modelpar = staticmethod(_pycrysfml.FortFuncs_vstate_to_modelpar)
    __swig_getmethods__["write_info_refgcodes"] = lambda x: _pycrysfml.FortFuncs_write_info_refgcodes
    if _newclass:write_info_refgcodes = staticmethod(_pycrysfml.FortFuncs_write_info_refgcodes)
    __swig_getmethods__["write_info_refparams"] = lambda x: _pycrysfml.FortFuncs_write_info_refparams
    if _newclass:write_info_refparams = staticmethod(_pycrysfml.FortFuncs_write_info_refparams)
    __swig_getmethods__["write_restraints_obscalc"] = lambda x: _pycrysfml.FortFuncs_write_restraints_obscalc
    if _newclass:write_restraints_obscalc = staticmethod(_pycrysfml.FortFuncs_write_restraints_obscalc)
    __swig_getmethods__["get_maxnumref"] = lambda x: _pycrysfml.FortFuncs_get_maxnumref
    if _newclass:get_maxnumref = staticmethod(_pycrysfml.FortFuncs_get_maxnumref)
    __swig_getmethods__["mhkl_absent"] = lambda x: _pycrysfml.FortFuncs_mhkl_absent
    if _newclass:mhkl_absent = staticmethod(_pycrysfml.FortFuncs_mhkl_absent)
    __swig_getmethods__["init_err_refl"] = lambda x: _pycrysfml.FortFuncs_init_err_refl
    if _newclass:init_err_refl = staticmethod(_pycrysfml.FortFuncs_init_err_refl)
    __swig_getmethods__["init_reflist"] = lambda x: _pycrysfml.FortFuncs_init_reflist
    if _newclass:init_reflist = staticmethod(_pycrysfml.FortFuncs_init_reflist)
    __swig_getmethods__["write_asu"] = lambda x: _pycrysfml.FortFuncs_write_asu
    if _newclass:write_asu = staticmethod(_pycrysfml.FortFuncs_write_asu)
    __swig_getmethods__["write_reflist_info"] = lambda x: _pycrysfml.FortFuncs_write_reflist_info
    if _newclass:write_reflist_info = staticmethod(_pycrysfml.FortFuncs_write_reflist_info)
    __swig_getmethods__["angs_4c_bisecting"] = lambda x: _pycrysfml.FortFuncs_angs_4c_bisecting
    if _newclass:angs_4c_bisecting = staticmethod(_pycrysfml.FortFuncs_angs_4c_bisecting)
    __swig_getmethods__["calang"] = lambda x: _pycrysfml.FortFuncs_calang
    if _newclass:calang = staticmethod(_pycrysfml.FortFuncs_calang)
    __swig_getmethods__["calc_om_chi_phi"] = lambda x: _pycrysfml.FortFuncs_calc_om_chi_phi
    if _newclass:calc_om_chi_phi = staticmethod(_pycrysfml.FortFuncs_calc_om_chi_phi)
    __swig_getmethods__["calc_psi"] = lambda x: _pycrysfml.FortFuncs_calc_psi
    if _newclass:calc_psi = staticmethod(_pycrysfml.FortFuncs_calc_psi)
    __swig_getmethods__["cell_fr_ub"] = lambda x: _pycrysfml.FortFuncs_cell_fr_ub
    if _newclass:cell_fr_ub = staticmethod(_pycrysfml.FortFuncs_cell_fr_ub)
    __swig_getmethods__["chi_mat"] = lambda x: _pycrysfml.FortFuncs_chi_mat
    if _newclass:chi_mat = staticmethod(_pycrysfml.FortFuncs_chi_mat)
    __swig_getmethods__["psd_convert"] = lambda x: _pycrysfml.FortFuncs_psd_convert
    if _newclass:psd_convert = staticmethod(_pycrysfml.FortFuncs_psd_convert)
    __swig_getmethods__["d19psd"] = lambda x: _pycrysfml.FortFuncs_d19psd
    if _newclass:d19psd = staticmethod(_pycrysfml.FortFuncs_d19psd)
    __swig_getmethods__["dspace"] = lambda x: _pycrysfml.FortFuncs_dspace
    if _newclass:dspace = staticmethod(_pycrysfml.FortFuncs_dspace)
    __swig_getmethods__["equatorial_chi_phi"] = lambda x: _pycrysfml.FortFuncs_equatorial_chi_phi
    if _newclass:equatorial_chi_phi = staticmethod(_pycrysfml.FortFuncs_equatorial_chi_phi)
    __swig_getmethods__["fixdnu"] = lambda x: _pycrysfml.FortFuncs_fixdnu
    if _newclass:fixdnu = staticmethod(_pycrysfml.FortFuncs_fixdnu)
    __swig_getmethods__["flat_cone_vertdet"] = lambda x: _pycrysfml.FortFuncs_flat_cone_vertdet
    if _newclass:flat_cone_vertdet = staticmethod(_pycrysfml.FortFuncs_flat_cone_vertdet)
    __swig_getmethods__["genb"] = lambda x: _pycrysfml.FortFuncs_genb
    if _newclass:genb = staticmethod(_pycrysfml.FortFuncs_genb)
    __swig_getmethods__["genub"] = lambda x: _pycrysfml.FortFuncs_genub
    if _newclass:genub = staticmethod(_pycrysfml.FortFuncs_genub)
    __swig_getmethods__["get_angs_nb"] = lambda x: _pycrysfml.FortFuncs_get_angs_nb
    if _newclass:get_angs_nb = staticmethod(_pycrysfml.FortFuncs_get_angs_nb)
    __swig_getmethods__["get_dspacing_theta"] = lambda x: _pycrysfml.FortFuncs_get_dspacing_theta
    if _newclass:get_dspacing_theta = staticmethod(_pycrysfml.FortFuncs_get_dspacing_theta)
    __swig_getmethods__["get_gaomnu_frchiphi"] = lambda x: _pycrysfml.FortFuncs_get_gaomnu_frchiphi
    if _newclass:get_gaomnu_frchiphi = staticmethod(_pycrysfml.FortFuncs_get_gaomnu_frchiphi)
    __swig_getmethods__["get_ub_from_hkl_hkl_omega"] = lambda x: _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega
    if _newclass:get_ub_from_hkl_hkl_omega = staticmethod(_pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega)
    __swig_getmethods__["get_ub_from_uvw_hkl_omega"] = lambda x: _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega
    if _newclass:get_ub_from_uvw_hkl_omega = staticmethod(_pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega)
    __swig_getmethods__["get_waveganu_frz4"] = lambda x: _pycrysfml.FortFuncs_get_waveganu_frz4
    if _newclass:get_waveganu_frz4 = staticmethod(_pycrysfml.FortFuncs_get_waveganu_frz4)
    __swig_getmethods__["get_z1_d9angls"] = lambda x: _pycrysfml.FortFuncs_get_z1_d9angls
    if _newclass:get_z1_d9angls = staticmethod(_pycrysfml.FortFuncs_get_z1_d9angls)
    __swig_getmethods__["normal"] = lambda x: _pycrysfml.FortFuncs_normal
    if _newclass:normal = staticmethod(_pycrysfml.FortFuncs_normal)
    __swig_getmethods__["phi_mat"] = lambda x: _pycrysfml.FortFuncs_phi_mat
    if _newclass:phi_mat = staticmethod(_pycrysfml.FortFuncs_phi_mat)
    __swig_getmethods__["psi_mat"] = lambda x: _pycrysfml.FortFuncs_psi_mat
    if _newclass:psi_mat = staticmethod(_pycrysfml.FortFuncs_psi_mat)
    __swig_getmethods__["read_twinlaw"] = lambda x: _pycrysfml.FortFuncs_read_twinlaw
    if _newclass:read_twinlaw = staticmethod(_pycrysfml.FortFuncs_read_twinlaw)
    __swig_getmethods__["refvec"] = lambda x: _pycrysfml.FortFuncs_refvec
    if _newclass:refvec = staticmethod(_pycrysfml.FortFuncs_refvec)
    __swig_getmethods__["s4cnb"] = lambda x: _pycrysfml.FortFuncs_s4cnb
    if _newclass:s4cnb = staticmethod(_pycrysfml.FortFuncs_s4cnb)
    __swig_getmethods__["set_psd"] = lambda x: _pycrysfml.FortFuncs_set_psd
    if _newclass:set_psd = staticmethod(_pycrysfml.FortFuncs_set_psd)
    __swig_getmethods__["snb4c"] = lambda x: _pycrysfml.FortFuncs_snb4c
    if _newclass:snb4c = staticmethod(_pycrysfml.FortFuncs_snb4c)
    __swig_getmethods__["sxdpsd"] = lambda x: _pycrysfml.FortFuncs_sxdpsd
    if _newclass:sxdpsd = staticmethod(_pycrysfml.FortFuncs_sxdpsd)
    __swig_getmethods__["triple"] = lambda x: _pycrysfml.FortFuncs_triple
    if _newclass:triple = staticmethod(_pycrysfml.FortFuncs_triple)
    __swig_getmethods__["write_twinlaw"] = lambda x: _pycrysfml.FortFuncs_write_twinlaw
    if _newclass:write_twinlaw = staticmethod(_pycrysfml.FortFuncs_write_twinlaw)
    __swig_getmethods__["z1frfc"] = lambda x: _pycrysfml.FortFuncs_z1frfc
    if _newclass:z1frfc = staticmethod(_pycrysfml.FortFuncs_z1frfc)
    __swig_getmethods__["z1frmd"] = lambda x: _pycrysfml.FortFuncs_z1frmd
    if _newclass:z1frmd = staticmethod(_pycrysfml.FortFuncs_z1frmd)
    __swig_getmethods__["z1frnb"] = lambda x: _pycrysfml.FortFuncs_z1frnb
    if _newclass:z1frnb = staticmethod(_pycrysfml.FortFuncs_z1frnb)
    __swig_getmethods__["z1frz2"] = lambda x: _pycrysfml.FortFuncs_z1frz2
    if _newclass:z1frz2 = staticmethod(_pycrysfml.FortFuncs_z1frz2)
    __swig_getmethods__["z1frz3"] = lambda x: _pycrysfml.FortFuncs_z1frz3
    if _newclass:z1frz3 = staticmethod(_pycrysfml.FortFuncs_z1frz3)
    __swig_getmethods__["z1frz4"] = lambda x: _pycrysfml.FortFuncs_z1frz4
    if _newclass:z1frz4 = staticmethod(_pycrysfml.FortFuncs_z1frz4)
    __swig_getmethods__["z2frz1"] = lambda x: _pycrysfml.FortFuncs_z2frz1
    if _newclass:z2frz1 = staticmethod(_pycrysfml.FortFuncs_z2frz1)
    __swig_getmethods__["z3frz1"] = lambda x: _pycrysfml.FortFuncs_z3frz1
    if _newclass:z3frz1 = staticmethod(_pycrysfml.FortFuncs_z3frz1)
    __swig_getmethods__["z4frgn"] = lambda x: _pycrysfml.FortFuncs_z4frgn
    if _newclass:z4frgn = staticmethod(_pycrysfml.FortFuncs_z4frgn)
    __swig_getmethods__["z4frz1"] = lambda x: _pycrysfml.FortFuncs_z4frz1
    if _newclass:z4frz1 = staticmethod(_pycrysfml.FortFuncs_z4frz1)
    __swig_getmethods__["additional_scattering_factors"] = lambda x: _pycrysfml.FortFuncs_additional_scattering_factors
    if _newclass:additional_scattering_factors = staticmethod(_pycrysfml.FortFuncs_additional_scattering_factors)
    __swig_getmethods__["allocate_scattering_species"] = lambda x: _pycrysfml.FortFuncs_allocate_scattering_species
    if _newclass:allocate_scattering_species = staticmethod(_pycrysfml.FortFuncs_allocate_scattering_species)
    __swig_getmethods__["calc_strfactor"] = lambda x: _pycrysfml.FortFuncs_calc_strfactor
    if _newclass:calc_strfactor = staticmethod(_pycrysfml.FortFuncs_calc_strfactor)
    __swig_getmethods__["calc_hkl_strfactor"] = lambda x: _pycrysfml.FortFuncs_calc_hkl_strfactor
    if _newclass:calc_hkl_strfactor = staticmethod(_pycrysfml.FortFuncs_calc_hkl_strfactor)
    __swig_getmethods__["init_calc_hkl_strfactors"] = lambda x: _pycrysfml.FortFuncs_init_calc_hkl_strfactors
    if _newclass:init_calc_hkl_strfactors = staticmethod(_pycrysfml.FortFuncs_init_calc_hkl_strfactors)
    __swig_getmethods__["init_calc_strfactors"] = lambda x: _pycrysfml.FortFuncs_init_calc_strfactors
    if _newclass:init_calc_strfactors = staticmethod(_pycrysfml.FortFuncs_init_calc_strfactors)
    __swig_getmethods__["init_structure_factors"] = lambda x: _pycrysfml.FortFuncs_init_structure_factors
    if _newclass:init_structure_factors = staticmethod(_pycrysfml.FortFuncs_init_structure_factors)
    __swig_getmethods__["structure_factors"] = lambda x: _pycrysfml.FortFuncs_structure_factors
    if _newclass:structure_factors = staticmethod(_pycrysfml.FortFuncs_structure_factors)
    __swig_getmethods__["write_structure_factors"] = lambda x: _pycrysfml.FortFuncs_write_structure_factors
    if _newclass:write_structure_factors = staticmethod(_pycrysfml.FortFuncs_write_structure_factors)
    __swig_getmethods__["cubic_harm_ang"] = lambda x: _pycrysfml.FortFuncs_cubic_harm_ang
    if _newclass:cubic_harm_ang = staticmethod(_pycrysfml.FortFuncs_cubic_harm_ang)
    __swig_getmethods__["cubic_harm_ucvec"] = lambda x: _pycrysfml.FortFuncs_cubic_harm_ucvec
    if _newclass:cubic_harm_ucvec = staticmethod(_pycrysfml.FortFuncs_cubic_harm_ucvec)
    __swig_getmethods__["int_slater_bessel"] = lambda x: _pycrysfml.FortFuncs_int_slater_bessel
    if _newclass:int_slater_bessel = staticmethod(_pycrysfml.FortFuncs_int_slater_bessel)
    __swig_getmethods__["real_spher_harm_ang"] = lambda x: _pycrysfml.FortFuncs_real_spher_harm_ang
    if _newclass:real_spher_harm_ang = staticmethod(_pycrysfml.FortFuncs_real_spher_harm_ang)
    __swig_getmethods__["real_spher_harm_ucvec"] = lambda x: _pycrysfml.FortFuncs_real_spher_harm_ucvec
    if _newclass:real_spher_harm_ucvec = staticmethod(_pycrysfml.FortFuncs_real_spher_harm_ucvec)
    __swig_getmethods__["real_spher_harmcharge_ucvec"] = lambda x: _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec
    if _newclass:real_spher_harmcharge_ucvec = staticmethod(_pycrysfml.FortFuncs_real_spher_harmcharge_ucvec)
    __swig_getmethods__["init_err_spher"] = lambda x: _pycrysfml.FortFuncs_init_err_spher
    if _newclass:init_err_spher = staticmethod(_pycrysfml.FortFuncs_init_err_spher)
    __swig_getmethods__["pikout_lj_cubic"] = lambda x: _pycrysfml.FortFuncs_pikout_lj_cubic
    if _newclass:pikout_lj_cubic = staticmethod(_pycrysfml.FortFuncs_pikout_lj_cubic)
    __swig_getmethods__["get_generators"] = lambda x: _pycrysfml.FortFuncs_get_generators
    if _newclass:get_generators = staticmethod(_pycrysfml.FortFuncs_get_generators)
    __swig_getmethods__["remove_spgr_info"] = lambda x: _pycrysfml.FortFuncs_remove_spgr_info
    if _newclass:remove_spgr_info = staticmethod(_pycrysfml.FortFuncs_remove_spgr_info)
    __swig_getmethods__["remove_system_equiv"] = lambda x: _pycrysfml.FortFuncs_remove_system_equiv
    if _newclass:remove_system_equiv = staticmethod(_pycrysfml.FortFuncs_remove_system_equiv)
    __swig_getmethods__["remove_wyckoff_info"] = lambda x: _pycrysfml.FortFuncs_remove_wyckoff_info
    if _newclass:remove_wyckoff_info = staticmethod(_pycrysfml.FortFuncs_remove_wyckoff_info)
    __swig_getmethods__["set_spgr_info"] = lambda x: _pycrysfml.FortFuncs_set_spgr_info
    if _newclass:set_spgr_info = staticmethod(_pycrysfml.FortFuncs_set_spgr_info)
    __swig_getmethods__["set_system_equiv"] = lambda x: _pycrysfml.FortFuncs_set_system_equiv
    if _newclass:set_system_equiv = staticmethod(_pycrysfml.FortFuncs_set_system_equiv)
    __swig_getmethods__["set_wyckoff_info"] = lambda x: _pycrysfml.FortFuncs_set_wyckoff_info
    if _newclass:set_wyckoff_info = staticmethod(_pycrysfml.FortFuncs_set_wyckoff_info)
    __swig_getmethods__["axes_rotation"] = lambda x: _pycrysfml.FortFuncs_axes_rotation
    if _newclass:axes_rotation = staticmethod(_pycrysfml.FortFuncs_axes_rotation)
    __swig_getmethods__["get_laue_num"] = lambda x: _pycrysfml.FortFuncs_get_laue_num
    if _newclass:get_laue_num = staticmethod(_pycrysfml.FortFuncs_get_laue_num)
    __swig_getmethods__["get_multip_pos"] = lambda x: _pycrysfml.FortFuncs_get_multip_pos
    if _newclass:get_multip_pos = staticmethod(_pycrysfml.FortFuncs_get_multip_pos)
    __swig_getmethods__["get_occ_site"] = lambda x: _pycrysfml.FortFuncs_get_occ_site
    if _newclass:get_occ_site = staticmethod(_pycrysfml.FortFuncs_get_occ_site)
    __swig_getmethods__["get_pointgroup_num"] = lambda x: _pycrysfml.FortFuncs_get_pointgroup_num
    if _newclass:get_pointgroup_num = staticmethod(_pycrysfml.FortFuncs_get_pointgroup_num)
    __swig_getmethods__["lattice_trans"] = lambda x: _pycrysfml.FortFuncs_lattice_trans
    if _newclass:lattice_trans = staticmethod(_pycrysfml.FortFuncs_lattice_trans)
    __swig_getmethods__["spgr_equal"] = lambda x: _pycrysfml.FortFuncs_spgr_equal
    if _newclass:spgr_equal = staticmethod(_pycrysfml.FortFuncs_spgr_equal)
    __swig_getmethods__["allocate_lattice_centring"] = lambda x: _pycrysfml.FortFuncs_allocate_lattice_centring
    if _newclass:allocate_lattice_centring = staticmethod(_pycrysfml.FortFuncs_allocate_lattice_centring)
    __swig_getmethods__["check_generator"] = lambda x: _pycrysfml.FortFuncs_check_generator
    if _newclass:check_generator = staticmethod(_pycrysfml.FortFuncs_check_generator)
    __swig_getmethods__["decodmatmag"] = lambda x: _pycrysfml.FortFuncs_decodmatmag
    if _newclass:decodmatmag = staticmethod(_pycrysfml.FortFuncs_decodmatmag)
    __swig_getmethods__["get_laue_str"] = lambda x: _pycrysfml.FortFuncs_get_laue_str
    if _newclass:get_laue_str = staticmethod(_pycrysfml.FortFuncs_get_laue_str)
    __swig_getmethods__["get_pointgroup_str"] = lambda x: _pycrysfml.FortFuncs_get_pointgroup_str
    if _newclass:get_pointgroup_str = staticmethod(_pycrysfml.FortFuncs_get_pointgroup_str)
    __swig_getmethods__["get_seitz_symbol"] = lambda x: _pycrysfml.FortFuncs_get_seitz_symbol
    if _newclass:get_seitz_symbol = staticmethod(_pycrysfml.FortFuncs_get_seitz_symbol)
    __swig_getmethods__["get_setting_info"] = lambda x: _pycrysfml.FortFuncs_get_setting_info
    if _newclass:get_setting_info = staticmethod(_pycrysfml.FortFuncs_get_setting_info)
    __swig_getmethods__["get_shubnikov_operator_symbol"] = lambda x: _pycrysfml.FortFuncs_get_shubnikov_operator_symbol
    if _newclass:get_shubnikov_operator_symbol = staticmethod(_pycrysfml.FortFuncs_get_shubnikov_operator_symbol)
    __swig_getmethods__["get_string_resolv"] = lambda x: _pycrysfml.FortFuncs_get_string_resolv
    if _newclass:get_string_resolv = staticmethod(_pycrysfml.FortFuncs_get_string_resolv)
    __swig_getmethods__["get_symel"] = lambda x: _pycrysfml.FortFuncs_get_symel
    if _newclass:get_symel = staticmethod(_pycrysfml.FortFuncs_get_symel)
    __swig_getmethods__["get_symkov"] = lambda x: _pycrysfml.FortFuncs_get_symkov
    if _newclass:get_symkov = staticmethod(_pycrysfml.FortFuncs_get_symkov)
    __swig_getmethods__["get_trasfm_symbol"] = lambda x: _pycrysfml.FortFuncs_get_trasfm_symbol
    if _newclass:get_trasfm_symbol = staticmethod(_pycrysfml.FortFuncs_get_trasfm_symbol)
    __swig_getmethods__["get_transl_symbol"] = lambda x: _pycrysfml.FortFuncs_get_transl_symbol
    if _newclass:get_transl_symbol = staticmethod(_pycrysfml.FortFuncs_get_transl_symbol)
    __swig_getmethods__["init_err_symm"] = lambda x: _pycrysfml.FortFuncs_init_err_symm
    if _newclass:init_err_symm = staticmethod(_pycrysfml.FortFuncs_init_err_symm)
    __swig_getmethods__["inverse_symm"] = lambda x: _pycrysfml.FortFuncs_inverse_symm
    if _newclass:inverse_symm = staticmethod(_pycrysfml.FortFuncs_inverse_symm)
    __swig_getmethods__["latsym"] = lambda x: _pycrysfml.FortFuncs_latsym
    if _newclass:latsym = staticmethod(_pycrysfml.FortFuncs_latsym)
    __swig_getmethods__["read_bin_spacegroup"] = lambda x: _pycrysfml.FortFuncs_read_bin_spacegroup
    if _newclass:read_bin_spacegroup = staticmethod(_pycrysfml.FortFuncs_read_bin_spacegroup)
    __swig_getmethods__["read_msymm"] = lambda x: _pycrysfml.FortFuncs_read_msymm
    if _newclass:read_msymm = staticmethod(_pycrysfml.FortFuncs_read_msymm)
    __swig_getmethods__["read_symtrans_code"] = lambda x: _pycrysfml.FortFuncs_read_symtrans_code
    if _newclass:read_symtrans_code = staticmethod(_pycrysfml.FortFuncs_read_symtrans_code)
    __swig_getmethods__["read_xsym"] = lambda x: _pycrysfml.FortFuncs_read_xsym
    if _newclass:read_xsym = staticmethod(_pycrysfml.FortFuncs_read_xsym)
    __swig_getmethods__["searchop"] = lambda x: _pycrysfml.FortFuncs_searchop
    if _newclass:searchop = staticmethod(_pycrysfml.FortFuncs_searchop)
    __swig_getmethods__["set_spacegroup"] = lambda x: _pycrysfml.FortFuncs_set_spacegroup
    if _newclass:set_spacegroup = staticmethod(_pycrysfml.FortFuncs_set_spacegroup)
    __swig_getmethods__["similar_transf_sg"] = lambda x: _pycrysfml.FortFuncs_similar_transf_sg
    if _newclass:similar_transf_sg = staticmethod(_pycrysfml.FortFuncs_similar_transf_sg)
    __swig_getmethods__["sym_prod_st"] = lambda x: _pycrysfml.FortFuncs_sym_prod_st
    if _newclass:sym_prod_st = staticmethod(_pycrysfml.FortFuncs_sym_prod_st)
    __swig_getmethods__["write_bin_spacegroup"] = lambda x: _pycrysfml.FortFuncs_write_bin_spacegroup
    if _newclass:write_bin_spacegroup = staticmethod(_pycrysfml.FortFuncs_write_bin_spacegroup)
    __swig_getmethods__["write_magnetic_space_group"] = lambda x: _pycrysfml.FortFuncs_write_magnetic_space_group
    if _newclass:write_magnetic_space_group = staticmethod(_pycrysfml.FortFuncs_write_magnetic_space_group)
    __swig_getmethods__["write_spacegroup"] = lambda x: _pycrysfml.FortFuncs_write_spacegroup
    if _newclass:write_spacegroup = staticmethod(_pycrysfml.FortFuncs_write_spacegroup)
    __swig_getmethods__["write_sym"] = lambda x: _pycrysfml.FortFuncs_write_sym
    if _newclass:write_sym = staticmethod(_pycrysfml.FortFuncs_write_sym)
    __swig_getmethods__["write_symtrans_code"] = lambda x: _pycrysfml.FortFuncs_write_symtrans_code
    if _newclass:write_symtrans_code = staticmethod(_pycrysfml.FortFuncs_write_symtrans_code)
    __swig_getmethods__["write_wyckoff"] = lambda x: _pycrysfml.FortFuncs_write_wyckoff
    if _newclass:write_wyckoff = staticmethod(_pycrysfml.FortFuncs_write_wyckoff)
    __swig_getmethods__["copy_ns_spg_to_spg"] = lambda x: _pycrysfml.FortFuncs_copy_ns_spg_to_spg
    if _newclass:copy_ns_spg_to_spg = staticmethod(_pycrysfml.FortFuncs_copy_ns_spg_to_spg)
    __swig_getmethods__["alloc_mhlist_array"] = lambda x: _pycrysfml.FortFuncs_alloc_mhlist_array
    if _newclass:alloc_mhlist_array = staticmethod(_pycrysfml.FortFuncs_alloc_mhlist_array)
    __swig_getmethods__["alloc_refllist_array"] = lambda x: _pycrysfml.FortFuncs_alloc_refllist_array
    if _newclass:alloc_refllist_array = staticmethod(_pycrysfml.FortFuncs_alloc_refllist_array)
    __swig_getmethods__["reflct_array_ctor"] = lambda x: _pycrysfml.FortFuncs_reflct_array_ctor
    if _newclass:reflct_array_ctor = staticmethod(_pycrysfml.FortFuncs_reflct_array_ctor)
    __swig_getmethods__["reflct_append"] = lambda x: _pycrysfml.FortFuncs_reflct_append
    if _newclass:reflct_append = staticmethod(_pycrysfml.FortFuncs_reflct_append)
    __swig_getmethods__["readxtal_structure_file"] = lambda x: _pycrysfml.FortFuncs_readxtal_structure_file
    if _newclass:readxtal_structure_file = staticmethod(_pycrysfml.FortFuncs_readxtal_structure_file)
    __swig_getmethods__["hkls_r"] = lambda x: _pycrysfml.FortFuncs_hkls_r
    if _newclass:hkls_r = staticmethod(_pycrysfml.FortFuncs_hkls_r)
    __swig_getmethods__["hklgen_sxtal_reflection"] = lambda x: _pycrysfml.FortFuncs_hklgen_sxtal_reflection
    if _newclass:hklgen_sxtal_reflection = staticmethod(_pycrysfml.FortFuncs_hklgen_sxtal_reflection)
    __swig_getmethods__["hklgen_sxtal_list"] = lambda x: _pycrysfml.FortFuncs_hklgen_sxtal_list
    if _newclass:hklgen_sxtal_list = staticmethod(_pycrysfml.FortFuncs_hklgen_sxtal_list)
    __swig_getmethods__["hkluni_reflection"] = lambda x: _pycrysfml.FortFuncs_hkluni_reflection
    if _newclass:hkluni_reflection = staticmethod(_pycrysfml.FortFuncs_hkluni_reflection)
    __swig_getmethods__["hkluni_refllist"] = lambda x: _pycrysfml.FortFuncs_hkluni_refllist
    if _newclass:hkluni_refllist = staticmethod(_pycrysfml.FortFuncs_hkluni_refllist)
    __swig_getmethods__["read_mag_cfl_file"] = lambda x: _pycrysfml.FortFuncs_read_mag_cfl_file
    if _newclass:read_mag_cfl_file = staticmethod(_pycrysfml.FortFuncs_read_mag_cfl_file)
    __swig_getmethods__["read_mag_mcif_file"] = lambda x: _pycrysfml.FortFuncs_read_mag_mcif_file
    if _newclass:read_mag_mcif_file = staticmethod(_pycrysfml.FortFuncs_read_mag_mcif_file)
    __swig_getmethods__["calcgaussian"] = lambda x: _pycrysfml.FortFuncs_calcgaussian
    if _newclass:calcgaussian = staticmethod(_pycrysfml.FortFuncs_calcgaussian)
    __swig_getmethods__["calchat"] = lambda x: _pycrysfml.FortFuncs_calchat
    if _newclass:calchat = staticmethod(_pycrysfml.FortFuncs_calchat)
    __swig_getmethods__["calclorentzian"] = lambda x: _pycrysfml.FortFuncs_calclorentzian
    if _newclass:calclorentzian = staticmethod(_pycrysfml.FortFuncs_calclorentzian)
    __swig_getmethods__["calcpseudovoigt"] = lambda x: _pycrysfml.FortFuncs_calcpseudovoigt
    if _newclass:calcpseudovoigt = staticmethod(_pycrysfml.FortFuncs_calcpseudovoigt)
    __swig_getmethods__["gausspeak"] = lambda x: _pycrysfml.FortFuncs_gausspeak
    if _newclass:gausspeak = staticmethod(_pycrysfml.FortFuncs_gausspeak)
    __swig_getmethods__["read_ill_data"] = lambda x: _pycrysfml.FortFuncs_read_ill_data
    if _newclass:read_ill_data = staticmethod(_pycrysfml.FortFuncs_read_ill_data)
    __swig_getmethods__["printbasis"] = lambda x: _pycrysfml.FortFuncs_printbasis
    if _newclass:printbasis = staticmethod(_pycrysfml.FortFuncs_printbasis)
    __swig_getmethods__["atom_type_ctor"] = lambda x: _pycrysfml.FortFuncs_atom_type_ctor
    if _newclass:atom_type_ctor = staticmethod(_pycrysfml.FortFuncs_atom_type_ctor)
    __swig_getmethods__["matom_type_ctor"] = lambda x: _pycrysfml.FortFuncs_matom_type_ctor
    if _newclass:matom_type_ctor = staticmethod(_pycrysfml.FortFuncs_matom_type_ctor)
    __swig_getmethods__["crystal_cell_type_ctor"] = lambda x: _pycrysfml.FortFuncs_crystal_cell_type_ctor
    if _newclass:crystal_cell_type_ctor = staticmethod(_pycrysfml.FortFuncs_crystal_cell_type_ctor)
    __swig_getmethods__["get_twofold_axes_a"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_a
    if _newclass:get_twofold_axes_a = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_a)
    __swig_getmethods__["set_twofold_axes_a"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_a
    if _newclass:set_twofold_axes_a = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_a)
    __swig_getmethods__["get_twofold_axes_c"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_c
    if _newclass:get_twofold_axes_c = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_c)
    __swig_getmethods__["set_twofold_axes_c"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_c
    if _newclass:set_twofold_axes_c = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_c)
    __swig_getmethods__["get_twofold_axes_b"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_b
    if _newclass:get_twofold_axes_b = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_b)
    __swig_getmethods__["set_twofold_axes_b"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_b
    if _newclass:set_twofold_axes_b = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_b)
    __swig_getmethods__["get_twofold_axes_maxes"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_maxes
    if _newclass:get_twofold_axes_maxes = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_maxes)
    __swig_getmethods__["set_twofold_axes_maxes"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_maxes
    if _newclass:set_twofold_axes_maxes = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_maxes)
    __swig_getmethods__["get_twofold_axes_ntwo"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_ntwo
    if _newclass:get_twofold_axes_ntwo = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_ntwo)
    __swig_getmethods__["set_twofold_axes_ntwo"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_ntwo
    if _newclass:set_twofold_axes_ntwo = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_ntwo)
    __swig_getmethods__["get_twofold_axes_cross"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_cross
    if _newclass:get_twofold_axes_cross = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_cross)
    __swig_getmethods__["set_twofold_axes_cross"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_cross
    if _newclass:set_twofold_axes_cross = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_cross)
    __swig_getmethods__["get_twofold_axes_tol"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_tol
    if _newclass:get_twofold_axes_tol = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_tol)
    __swig_getmethods__["set_twofold_axes_tol"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_tol
    if _newclass:set_twofold_axes_tol = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_tol)
    __swig_getmethods__["get_twofold_axes_rtwofold"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_rtwofold
    if _newclass:get_twofold_axes_rtwofold = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_rtwofold)
    __swig_getmethods__["set_twofold_axes_rtwofold"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_rtwofold
    if _newclass:set_twofold_axes_rtwofold = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_rtwofold)
    __swig_getmethods__["get_twofold_axes_caxes"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_caxes
    if _newclass:get_twofold_axes_caxes = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_caxes)
    __swig_getmethods__["set_twofold_axes_caxes"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_caxes
    if _newclass:set_twofold_axes_caxes = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_caxes)
    __swig_getmethods__["get_twofold_axes_dot"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_dot
    if _newclass:get_twofold_axes_dot = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_dot)
    __swig_getmethods__["set_twofold_axes_dot"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_dot
    if _newclass:set_twofold_axes_dot = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_dot)
    __swig_getmethods__["get_twofold_axes_dtwofold"] = lambda x: _pycrysfml.FortFuncs_get_twofold_axes_dtwofold
    if _newclass:get_twofold_axes_dtwofold = staticmethod(_pycrysfml.FortFuncs_get_twofold_axes_dtwofold)
    __swig_getmethods__["set_twofold_axes_dtwofold"] = lambda x: _pycrysfml.FortFuncs_set_twofold_axes_dtwofold
    if _newclass:set_twofold_axes_dtwofold = staticmethod(_pycrysfml.FortFuncs_set_twofold_axes_dtwofold)
    __swig_getmethods__["twofold_axes_type_ctor"] = lambda x: _pycrysfml.FortFuncs_twofold_axes_type_ctor
    if _newclass:twofold_axes_type_ctor = staticmethod(_pycrysfml.FortFuncs_twofold_axes_type_ctor)
    __swig_getmethods__["zone_axis_type_ctor"] = lambda x: _pycrysfml.FortFuncs_zone_axis_type_ctor
    if _newclass:zone_axis_type_ctor = staticmethod(_pycrysfml.FortFuncs_zone_axis_type_ctor)
    __swig_getmethods__["interval_type_ctor"] = lambda x: _pycrysfml.FortFuncs_interval_type_ctor
    if _newclass:interval_type_ctor = staticmethod(_pycrysfml.FortFuncs_interval_type_ctor)
    __swig_getmethods__["msym_oper_type_ctor"] = lambda x: _pycrysfml.FortFuncs_msym_oper_type_ctor
    if _newclass:msym_oper_type_ctor = staticmethod(_pycrysfml.FortFuncs_msym_oper_type_ctor)
    __swig_getmethods__["magnetic_group_type_ctor"] = lambda x: _pycrysfml.FortFuncs_magnetic_group_type_ctor
    if _newclass:magnetic_group_type_ctor = staticmethod(_pycrysfml.FortFuncs_magnetic_group_type_ctor)
    __swig_getmethods__["reflect_type_ctor"] = lambda x: _pycrysfml.FortFuncs_reflect_type_ctor
    if _newclass:reflect_type_ctor = staticmethod(_pycrysfml.FortFuncs_reflect_type_ctor)
    __swig_getmethods__["reflection_type_ctor"] = lambda x: _pycrysfml.FortFuncs_reflection_type_ctor
    if _newclass:reflection_type_ctor = staticmethod(_pycrysfml.FortFuncs_reflection_type_ctor)
    __swig_getmethods__["ns_sym_oper_type_ctor"] = lambda x: _pycrysfml.FortFuncs_ns_sym_oper_type_ctor
    if _newclass:ns_sym_oper_type_ctor = staticmethod(_pycrysfml.FortFuncs_ns_sym_oper_type_ctor)
    __swig_getmethods__["sym_oper_type_ctor"] = lambda x: _pycrysfml.FortFuncs_sym_oper_type_ctor
    if _newclass:sym_oper_type_ctor = staticmethod(_pycrysfml.FortFuncs_sym_oper_type_ctor)
    __swig_getmethods__["get_command"] = lambda x: _pycrysfml.FortFuncs_get_command
    if _newclass:get_command = staticmethod(_pycrysfml.FortFuncs_get_command)
    __swig_getmethods__["get_command_argument"] = lambda x: _pycrysfml.FortFuncs_get_command_argument
    if _newclass:get_command_argument = staticmethod(_pycrysfml.FortFuncs_get_command_argument)
    __swig_getmethods__["get_environment_variable"] = lambda x: _pycrysfml.FortFuncs_get_environment_variable
    if _newclass:get_environment_variable = staticmethod(_pycrysfml.FortFuncs_get_environment_variable)
    def __init__(self): 
        this = _pycrysfml.new_FortFuncs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_FortFuncs
    __del__ = lambda self : None;
FortFuncs_swigregister = _pycrysfml.FortFuncs_swigregister
FortFuncs_swigregister(FortFuncs)

def FortFuncs_equiv_atm(*args):
  return _pycrysfml.FortFuncs_equiv_atm(*args)
FortFuncs_equiv_atm = _pycrysfml.FortFuncs_equiv_atm

def FortFuncs_allocate_atoms_cell(*args):
  return _pycrysfml.FortFuncs_allocate_atoms_cell(*args)
FortFuncs_allocate_atoms_cell = _pycrysfml.FortFuncs_allocate_atoms_cell

def FortFuncs_allocate_atom_list(*args):
  return _pycrysfml.FortFuncs_allocate_atom_list(*args)
FortFuncs_allocate_atom_list = _pycrysfml.FortFuncs_allocate_atom_list

def FortFuncs_allocate_matom_list(*args):
  return _pycrysfml.FortFuncs_allocate_matom_list(*args)
FortFuncs_allocate_matom_list = _pycrysfml.FortFuncs_allocate_matom_list

def FortFuncs_atlist1_extencell_atlist2(*args):
  return _pycrysfml.FortFuncs_atlist1_extencell_atlist2(*args)
FortFuncs_atlist1_extencell_atlist2 = _pycrysfml.FortFuncs_atlist1_extencell_atlist2

def FortFuncs_atoms_cell_to_list(*args):
  return _pycrysfml.FortFuncs_atoms_cell_to_list(*args)
FortFuncs_atoms_cell_to_list = _pycrysfml.FortFuncs_atoms_cell_to_list

def FortFuncs_atom_list_to_cell(*args):
  return _pycrysfml.FortFuncs_atom_list_to_cell(*args)
FortFuncs_atom_list_to_cell = _pycrysfml.FortFuncs_atom_list_to_cell

def FortFuncs_atom_uequi_list(*args):
  return _pycrysfml.FortFuncs_atom_uequi_list(*args)
FortFuncs_atom_uequi_list = _pycrysfml.FortFuncs_atom_uequi_list

def FortFuncs_copy_atom_list(*args):
  return _pycrysfml.FortFuncs_copy_atom_list(*args)
FortFuncs_copy_atom_list = _pycrysfml.FortFuncs_copy_atom_list

def FortFuncs_deallocate_atoms_cell(*args):
  return _pycrysfml.FortFuncs_deallocate_atoms_cell(*args)
FortFuncs_deallocate_atoms_cell = _pycrysfml.FortFuncs_deallocate_atoms_cell

def FortFuncs_deallocate_atom_list(*args):
  return _pycrysfml.FortFuncs_deallocate_atom_list(*args)
FortFuncs_deallocate_atom_list = _pycrysfml.FortFuncs_deallocate_atom_list

def FortFuncs_deallocate_matom_list(*args):
  return _pycrysfml.FortFuncs_deallocate_matom_list(*args)
FortFuncs_deallocate_matom_list = _pycrysfml.FortFuncs_deallocate_matom_list

def FortFuncs_get_atom_2nd_tensor_ctr(*args):
  return _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr(*args)
FortFuncs_get_atom_2nd_tensor_ctr = _pycrysfml.FortFuncs_get_atom_2nd_tensor_ctr

def FortFuncs_init_atom_type(*args):
  return _pycrysfml.FortFuncs_init_atom_type(*args)
FortFuncs_init_atom_type = _pycrysfml.FortFuncs_init_atom_type

def FortFuncs_init_matom_type(*args):
  return _pycrysfml.FortFuncs_init_matom_type(*args)
FortFuncs_init_matom_type = _pycrysfml.FortFuncs_init_matom_type

def FortFuncs_init_err_atmd():
  return _pycrysfml.FortFuncs_init_err_atmd()
FortFuncs_init_err_atmd = _pycrysfml.FortFuncs_init_err_atmd

def FortFuncs_multi(*args):
  return _pycrysfml.FortFuncs_multi(*args)
FortFuncs_multi = _pycrysfml.FortFuncs_multi

def FortFuncs_read_bin_atom_list(*args):
  return _pycrysfml.FortFuncs_read_bin_atom_list(*args)
FortFuncs_read_bin_atom_list = _pycrysfml.FortFuncs_read_bin_atom_list

def FortFuncs_write_atom_list(*args):
  return _pycrysfml.FortFuncs_write_atom_list(*args)
FortFuncs_write_atom_list = _pycrysfml.FortFuncs_write_atom_list

def FortFuncs_write_bin_atom_list(*args):
  return _pycrysfml.FortFuncs_write_bin_atom_list(*args)
FortFuncs_write_bin_atom_list = _pycrysfml.FortFuncs_write_bin_atom_list

def FortFuncs_deallocate_ap_table():
  return _pycrysfml.FortFuncs_deallocate_ap_table()
FortFuncs_deallocate_ap_table = _pycrysfml.FortFuncs_deallocate_ap_table

def FortFuncs_deallocate_bvel_table():
  return _pycrysfml.FortFuncs_deallocate_bvel_table()
FortFuncs_deallocate_bvel_table = _pycrysfml.FortFuncs_deallocate_bvel_table

def FortFuncs_deallocate_bvs_table():
  return _pycrysfml.FortFuncs_deallocate_bvs_table()
FortFuncs_deallocate_bvs_table = _pycrysfml.FortFuncs_deallocate_bvs_table

def FortFuncs_deallocate_sbvs_table():
  return _pycrysfml.FortFuncs_deallocate_sbvs_table()
FortFuncs_deallocate_sbvs_table = _pycrysfml.FortFuncs_deallocate_sbvs_table

def FortFuncs_set_atomic_properties():
  return _pycrysfml.FortFuncs_set_atomic_properties()
FortFuncs_set_atomic_properties = _pycrysfml.FortFuncs_set_atomic_properties

def FortFuncs_set_bvel_table():
  return _pycrysfml.FortFuncs_set_bvel_table()
FortFuncs_set_bvel_table = _pycrysfml.FortFuncs_set_bvel_table

def FortFuncs_set_bvs_table():
  return _pycrysfml.FortFuncs_set_bvs_table()
FortFuncs_set_bvs_table = _pycrysfml.FortFuncs_set_bvs_table

def FortFuncs_set_sbvs_table():
  return _pycrysfml.FortFuncs_set_sbvs_table()
FortFuncs_set_sbvs_table = _pycrysfml.FortFuncs_set_sbvs_table

def FortFuncs_set_common_oxidation_states_table():
  return _pycrysfml.FortFuncs_set_common_oxidation_states_table()
FortFuncs_set_common_oxidation_states_table = _pycrysfml.FortFuncs_set_common_oxidation_states_table

def FortFuncs_set_oxidation_states_table():
  return _pycrysfml.FortFuncs_set_oxidation_states_table()
FortFuncs_set_oxidation_states_table = _pycrysfml.FortFuncs_set_oxidation_states_table

def FortFuncs_set_pauling_electronegativity():
  return _pycrysfml.FortFuncs_set_pauling_electronegativity()
FortFuncs_set_pauling_electronegativity = _pycrysfml.FortFuncs_set_pauling_electronegativity

def FortFuncs_init_err_bond():
  return _pycrysfml.FortFuncs_init_err_bond()
FortFuncs_init_err_bond = _pycrysfml.FortFuncs_init_err_bond

def FortFuncs_remove_bonds_table():
  return _pycrysfml.FortFuncs_remove_bonds_table()
FortFuncs_remove_bonds_table = _pycrysfml.FortFuncs_remove_bonds_table

def FortFuncs_set_bonds_table():
  return _pycrysfml.FortFuncs_set_bonds_table()
FortFuncs_set_bonds_table = _pycrysfml.FortFuncs_set_bonds_table

def FortFuncs_get_atomic_mass(*args):
  return _pycrysfml.FortFuncs_get_atomic_mass(*args)
FortFuncs_get_atomic_mass = _pycrysfml.FortFuncs_get_atomic_mass

def FortFuncs_get_atomic_vol(*args):
  return _pycrysfml.FortFuncs_get_atomic_vol(*args)
FortFuncs_get_atomic_vol = _pycrysfml.FortFuncs_get_atomic_vol

def FortFuncs_get_chemsymb(*args):
  return _pycrysfml.FortFuncs_get_chemsymb(*args)
FortFuncs_get_chemsymb = _pycrysfml.FortFuncs_get_chemsymb

def FortFuncs_get_covalent_radius(*args):
  return _pycrysfml.FortFuncs_get_covalent_radius(*args)
FortFuncs_get_covalent_radius = _pycrysfml.FortFuncs_get_covalent_radius

def FortFuncs_get_fermi_length(*args):
  return _pycrysfml.FortFuncs_get_fermi_length(*args)
FortFuncs_get_fermi_length = _pycrysfml.FortFuncs_get_fermi_length

def FortFuncs_get_inc_xs(*args):
  return _pycrysfml.FortFuncs_get_inc_xs(*args)
FortFuncs_get_inc_xs = _pycrysfml.FortFuncs_get_inc_xs

def FortFuncs_get_abs_xs(*args):
  return _pycrysfml.FortFuncs_get_abs_xs(*args)
FortFuncs_get_abs_xs = _pycrysfml.FortFuncs_get_abs_xs

def FortFuncs_get_ionic_radius(*args):
  return _pycrysfml.FortFuncs_get_ionic_radius(*args)
FortFuncs_get_ionic_radius = _pycrysfml.FortFuncs_get_ionic_radius

def FortFuncs_remove_chem_info():
  return _pycrysfml.FortFuncs_remove_chem_info()
FortFuncs_remove_chem_info = _pycrysfml.FortFuncs_remove_chem_info

def FortFuncs_remove_delta_fp_fpp():
  return _pycrysfml.FortFuncs_remove_delta_fp_fpp()
FortFuncs_remove_delta_fp_fpp = _pycrysfml.FortFuncs_remove_delta_fp_fpp

def FortFuncs_remove_magnetic_form():
  return _pycrysfml.FortFuncs_remove_magnetic_form()
FortFuncs_remove_magnetic_form = _pycrysfml.FortFuncs_remove_magnetic_form

def FortFuncs_remove_xray_form():
  return _pycrysfml.FortFuncs_remove_xray_form()
FortFuncs_remove_xray_form = _pycrysfml.FortFuncs_remove_xray_form

def FortFuncs_set_chem_info():
  return _pycrysfml.FortFuncs_set_chem_info()
FortFuncs_set_chem_info = _pycrysfml.FortFuncs_set_chem_info

def FortFuncs_set_delta_fp_fpp():
  return _pycrysfml.FortFuncs_set_delta_fp_fpp()
FortFuncs_set_delta_fp_fpp = _pycrysfml.FortFuncs_set_delta_fp_fpp

def FortFuncs_set_magnetic_form():
  return _pycrysfml.FortFuncs_set_magnetic_form()
FortFuncs_set_magnetic_form = _pycrysfml.FortFuncs_set_magnetic_form

def FortFuncs_set_xray_form():
  return _pycrysfml.FortFuncs_set_xray_form()
FortFuncs_set_xray_form = _pycrysfml.FortFuncs_set_xray_form

def FortFuncs_allocate_atoms_conf_list(*args):
  return _pycrysfml.FortFuncs_allocate_atoms_conf_list(*args)
FortFuncs_allocate_atoms_conf_list = _pycrysfml.FortFuncs_allocate_atoms_conf_list

def FortFuncs_calc_bvs(*args):
  return _pycrysfml.FortFuncs_calc_bvs(*args)
FortFuncs_calc_bvs = _pycrysfml.FortFuncs_calc_bvs

def FortFuncs_calc_map_bvel(*args):
  return _pycrysfml.FortFuncs_calc_map_bvel(*args)
FortFuncs_calc_map_bvel = _pycrysfml.FortFuncs_calc_map_bvel

def FortFuncs_calc_map_bvs(*args):
  return _pycrysfml.FortFuncs_calc_map_bvs(*args)
FortFuncs_calc_map_bvs = _pycrysfml.FortFuncs_calc_map_bvs

def FortFuncs_cost_bvs(*args):
  return _pycrysfml.FortFuncs_cost_bvs(*args)
FortFuncs_cost_bvs = _pycrysfml.FortFuncs_cost_bvs

def FortFuncs_cost_bvs_coulombrep(*args):
  return _pycrysfml.FortFuncs_cost_bvs_coulombrep(*args)
FortFuncs_cost_bvs_coulombrep = _pycrysfml.FortFuncs_cost_bvs_coulombrep

def FortFuncs_deallocate_atoms_conf_list(*args):
  return _pycrysfml.FortFuncs_deallocate_atoms_conf_list(*args)
FortFuncs_deallocate_atoms_conf_list = _pycrysfml.FortFuncs_deallocate_atoms_conf_list

def FortFuncs_ewald(*args):
  return _pycrysfml.FortFuncs_ewald(*args)
FortFuncs_ewald = _pycrysfml.FortFuncs_ewald

def FortFuncs_init_err_conf():
  return _pycrysfml.FortFuncs_init_err_conf()
FortFuncs_init_err_conf = _pycrysfml.FortFuncs_init_err_conf

def FortFuncs_species_on_list(*args):
  return _pycrysfml.FortFuncs_species_on_list(*args)
FortFuncs_species_on_list = _pycrysfml.FortFuncs_species_on_list

def FortFuncs_cell_volume_sigma(*args):
  return _pycrysfml.FortFuncs_cell_volume_sigma(*args)
FortFuncs_cell_volume_sigma = _pycrysfml.FortFuncs_cell_volume_sigma

def FortFuncs_u_equiv(*args):
  return _pycrysfml.FortFuncs_u_equiv(*args)
FortFuncs_u_equiv = _pycrysfml.FortFuncs_u_equiv

def FortFuncs_volume_from_cell(*args):
  return _pycrysfml.FortFuncs_volume_from_cell(*args)
FortFuncs_volume_from_cell = _pycrysfml.FortFuncs_volume_from_cell

def FortFuncs_calc_cell_strain(*args):
  return _pycrysfml.FortFuncs_calc_cell_strain(*args)
FortFuncs_calc_cell_strain = _pycrysfml.FortFuncs_calc_cell_strain

def FortFuncs_get_basis_from_uvw(*args):
  return _pycrysfml.FortFuncs_get_basis_from_uvw(*args)
FortFuncs_get_basis_from_uvw = _pycrysfml.FortFuncs_get_basis_from_uvw

def FortFuncs_get_conventional_cell(*args):
  return _pycrysfml.FortFuncs_get_conventional_cell(*args)
FortFuncs_get_conventional_cell = _pycrysfml.FortFuncs_get_conventional_cell

def FortFuncs_get_cryst_orthog_matrix(*args):
  return _pycrysfml.FortFuncs_get_cryst_orthog_matrix(*args)
FortFuncs_get_cryst_orthog_matrix = _pycrysfml.FortFuncs_get_cryst_orthog_matrix

def FortFuncs_get_primitive_cell(*args):
  return _pycrysfml.FortFuncs_get_primitive_cell(*args)
FortFuncs_get_primitive_cell = _pycrysfml.FortFuncs_get_primitive_cell

def FortFuncs_init_err_crys():
  return _pycrysfml.FortFuncs_init_err_crys()
FortFuncs_init_err_crys = _pycrysfml.FortFuncs_init_err_crys

def FortFuncs_orient_eigenvectors(*args):
  return _pycrysfml.FortFuncs_orient_eigenvectors(*args)
FortFuncs_orient_eigenvectors = _pycrysfml.FortFuncs_orient_eigenvectors

def FortFuncs_read_bin_crystal_cell(*args):
  return _pycrysfml.FortFuncs_read_bin_crystal_cell(*args)
FortFuncs_read_bin_crystal_cell = _pycrysfml.FortFuncs_read_bin_crystal_cell

def FortFuncs_set_crystal_cell(*args):
  return _pycrysfml.FortFuncs_set_crystal_cell(*args)
FortFuncs_set_crystal_cell = _pycrysfml.FortFuncs_set_crystal_cell

def FortFuncs_volume_sigma_from_cell(*args):
  return _pycrysfml.FortFuncs_volume_sigma_from_cell(*args)
FortFuncs_volume_sigma_from_cell = _pycrysfml.FortFuncs_volume_sigma_from_cell

def FortFuncs_write_bin_crystal_cell(*args):
  return _pycrysfml.FortFuncs_write_bin_crystal_cell(*args)
FortFuncs_write_bin_crystal_cell = _pycrysfml.FortFuncs_write_bin_crystal_cell

def FortFuncs_write_crystal_cell(*args):
  return _pycrysfml.FortFuncs_write_crystal_cell(*args)
FortFuncs_write_crystal_cell = _pycrysfml.FortFuncs_write_crystal_cell

def FortFuncs_calc_fwhm_peak(*args):
  return _pycrysfml.FortFuncs_calc_fwhm_peak(*args)
FortFuncs_calc_fwhm_peak = _pycrysfml.FortFuncs_calc_fwhm_peak

def FortFuncs_allocate_diffraction_pattern(*args):
  return _pycrysfml.FortFuncs_allocate_diffraction_pattern(*args)
FortFuncs_allocate_diffraction_pattern = _pycrysfml.FortFuncs_allocate_diffraction_pattern

def FortFuncs_calc_background(*args):
  return _pycrysfml.FortFuncs_calc_background(*args)
FortFuncs_calc_background = _pycrysfml.FortFuncs_calc_background

def FortFuncs_delete_noisy_points(*args):
  return _pycrysfml.FortFuncs_delete_noisy_points(*args)
FortFuncs_delete_noisy_points = _pycrysfml.FortFuncs_delete_noisy_points

def FortFuncs_init_err_diffpatt():
  return _pycrysfml.FortFuncs_init_err_diffpatt()
FortFuncs_init_err_diffpatt = _pycrysfml.FortFuncs_init_err_diffpatt

def FortFuncs_purge_diffraction_pattern(*args):
  return _pycrysfml.FortFuncs_purge_diffraction_pattern(*args)
FortFuncs_purge_diffraction_pattern = _pycrysfml.FortFuncs_purge_diffraction_pattern

def FortFuncs_read_background_file(*args):
  return _pycrysfml.FortFuncs_read_background_file(*args)
FortFuncs_read_background_file = _pycrysfml.FortFuncs_read_background_file

def FortFuncs_write_pattern_freeformat(*args):
  return _pycrysfml.FortFuncs_write_pattern_freeformat(*args)
FortFuncs_write_pattern_freeformat = _pycrysfml.FortFuncs_write_pattern_freeformat

def FortFuncs_write_pattern_instrm5(*args):
  return _pycrysfml.FortFuncs_write_pattern_instrm5(*args)
FortFuncs_write_pattern_instrm5 = _pycrysfml.FortFuncs_write_pattern_instrm5

def FortFuncs_write_pattern_xysig(*args):
  return _pycrysfml.FortFuncs_write_pattern_xysig(*args)
FortFuncs_write_pattern_xysig = _pycrysfml.FortFuncs_write_pattern_xysig

def FortFuncs_unitcell_to_pdbfile(*args):
  return _pycrysfml.FortFuncs_unitcell_to_pdbfile(*args)
FortFuncs_unitcell_to_pdbfile = _pycrysfml.FortFuncs_unitcell_to_pdbfile

def FortFuncs_ag_theta(*args):
  return _pycrysfml.FortFuncs_ag_theta(*args)
FortFuncs_ag_theta = _pycrysfml.FortFuncs_ag_theta

def FortFuncs_al_theta(*args):
  return _pycrysfml.FortFuncs_al_theta(*args)
FortFuncs_al_theta = _pycrysfml.FortFuncs_al_theta

def FortFuncs_bg_theta(*args):
  return _pycrysfml.FortFuncs_bg_theta(*args)
FortFuncs_bg_theta = _pycrysfml.FortFuncs_bg_theta

def FortFuncs_bl_theta(*args):
  return _pycrysfml.FortFuncs_bl_theta(*args)
FortFuncs_bl_theta = _pycrysfml.FortFuncs_bl_theta

def FortFuncs_becker_coppens(*args):
  return _pycrysfml.FortFuncs_becker_coppens(*args)
FortFuncs_becker_coppens = _pycrysfml.FortFuncs_becker_coppens

def FortFuncs_shelx_extinction(*args):
  return _pycrysfml.FortFuncs_shelx_extinction(*args)
FortFuncs_shelx_extinction = _pycrysfml.FortFuncs_shelx_extinction

def FortFuncs_correct_flippingratios(*args):
  return _pycrysfml.FortFuncs_correct_flippingratios(*args)
FortFuncs_correct_flippingratios = _pycrysfml.FortFuncs_correct_flippingratios

def FortFuncs_file_to_filelist(*args):
  return _pycrysfml.FortFuncs_file_to_filelist(*args)
FortFuncs_file_to_filelist = _pycrysfml.FortFuncs_file_to_filelist

def FortFuncs_init_err_form():
  return _pycrysfml.FortFuncs_init_err_form()
FortFuncs_init_err_form = _pycrysfml.FortFuncs_init_err_form

def FortFuncs_read_uvals(*args):
  return _pycrysfml.FortFuncs_read_uvals(*args)
FortFuncs_read_uvals = _pycrysfml.FortFuncs_read_uvals

def FortFuncs_write_cif_powder_profile(*args):
  return _pycrysfml.FortFuncs_write_cif_powder_profile(*args)
FortFuncs_write_cif_powder_profile = _pycrysfml.FortFuncs_write_cif_powder_profile

def FortFuncs_write_cif_template(*args):
  return _pycrysfml.FortFuncs_write_cif_template(*args)
FortFuncs_write_cif_template = _pycrysfml.FortFuncs_write_cif_template

def FortFuncs_write_shx_template(*args):
  return _pycrysfml.FortFuncs_write_shx_template(*args)
FortFuncs_write_shx_template = _pycrysfml.FortFuncs_write_shx_template

def FortFuncs_allocate_coordination_type(*args):
  return _pycrysfml.FortFuncs_allocate_coordination_type(*args)
FortFuncs_allocate_coordination_type = _pycrysfml.FortFuncs_allocate_coordination_type

def FortFuncs_allocate_point_list(*args):
  return _pycrysfml.FortFuncs_allocate_point_list(*args)
FortFuncs_allocate_point_list = _pycrysfml.FortFuncs_allocate_point_list

def FortFuncs_angle_and_sigma(*args):
  return _pycrysfml.FortFuncs_angle_and_sigma(*args)
FortFuncs_angle_and_sigma = _pycrysfml.FortFuncs_angle_and_sigma

def FortFuncs_calc_dist_angle(*args):
  return _pycrysfml.FortFuncs_calc_dist_angle(*args)
FortFuncs_calc_dist_angle = _pycrysfml.FortFuncs_calc_dist_angle

def FortFuncs_calc_dist_angle_sigma(*args):
  return _pycrysfml.FortFuncs_calc_dist_angle_sigma(*args)
FortFuncs_calc_dist_angle_sigma = _pycrysfml.FortFuncs_calc_dist_angle_sigma

def FortFuncs_deallocate_coordination_type():
  return _pycrysfml.FortFuncs_deallocate_coordination_type()
FortFuncs_deallocate_coordination_type = _pycrysfml.FortFuncs_deallocate_coordination_type

def FortFuncs_deallocate_point_list(*args):
  return _pycrysfml.FortFuncs_deallocate_point_list(*args)
FortFuncs_deallocate_point_list = _pycrysfml.FortFuncs_deallocate_point_list

def FortFuncs_distance_and_sigma(*args):
  return _pycrysfml.FortFuncs_distance_and_sigma(*args)
FortFuncs_distance_and_sigma = _pycrysfml.FortFuncs_distance_and_sigma

def FortFuncs_get_anglen_axis_from_rotmat(*args):
  return _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat(*args)
FortFuncs_get_anglen_axis_from_rotmat = _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat

def FortFuncs_get_euler_from_fract(*args):
  return _pycrysfml.FortFuncs_get_euler_from_fract(*args)
FortFuncs_get_euler_from_fract = _pycrysfml.FortFuncs_get_euler_from_fract

def FortFuncs_get_matrix_moving_v_to_u(*args):
  return _pycrysfml.FortFuncs_get_matrix_moving_v_to_u(*args)
FortFuncs_get_matrix_moving_v_to_u = _pycrysfml.FortFuncs_get_matrix_moving_v_to_u

def FortFuncs_get_omegachiphi(*args):
  return _pycrysfml.FortFuncs_get_omegachiphi(*args)
FortFuncs_get_omegachiphi = _pycrysfml.FortFuncs_get_omegachiphi

def FortFuncs_get_phithechi(*args):
  return _pycrysfml.FortFuncs_get_phithechi(*args)
FortFuncs_get_phithechi = _pycrysfml.FortFuncs_get_phithechi

def FortFuncs_get_transf_list(*args):
  return _pycrysfml.FortFuncs_get_transf_list(*args)
FortFuncs_get_transf_list = _pycrysfml.FortFuncs_get_transf_list

def FortFuncs_init_err_geom():
  return _pycrysfml.FortFuncs_init_err_geom()
FortFuncs_init_err_geom = _pycrysfml.FortFuncs_init_err_geom

def FortFuncs_p1_dist(*args):
  return _pycrysfml.FortFuncs_p1_dist(*args)
FortFuncs_p1_dist = _pycrysfml.FortFuncs_p1_dist

def FortFuncs_print_distances(*args):
  return _pycrysfml.FortFuncs_print_distances(*args)
FortFuncs_print_distances = _pycrysfml.FortFuncs_print_distances

def FortFuncs_set_rotation_matrix(*args):
  return _pycrysfml.FortFuncs_set_rotation_matrix(*args)
FortFuncs_set_rotation_matrix = _pycrysfml.FortFuncs_set_rotation_matrix

def FortFuncs_set_tdist_coordination(*args):
  return _pycrysfml.FortFuncs_set_tdist_coordination(*args)
FortFuncs_set_tdist_coordination = _pycrysfml.FortFuncs_set_tdist_coordination

def FortFuncs_set_tdist_partial_coordination(*args):
  return _pycrysfml.FortFuncs_set_tdist_partial_coordination(*args)
FortFuncs_set_tdist_partial_coordination = _pycrysfml.FortFuncs_set_tdist_partial_coordination

def FortFuncs_torsion_and_sigma(*args):
  return _pycrysfml.FortFuncs_torsion_and_sigma(*args)
FortFuncs_torsion_and_sigma = _pycrysfml.FortFuncs_torsion_and_sigma

def FortFuncs_directory_exists(*args):
  return _pycrysfml.FortFuncs_directory_exists(*args)
FortFuncs_directory_exists = _pycrysfml.FortFuncs_directory_exists

def FortFuncs_write_date_time(lun=None, dtim=None):
  return _pycrysfml.FortFuncs_write_date_time(lun, dtim)
FortFuncs_write_date_time = _pycrysfml.FortFuncs_write_date_time

def FortFuncs_define_uncompress_program(*args):
  return _pycrysfml.FortFuncs_define_uncompress_program(*args)
FortFuncs_define_uncompress_program = _pycrysfml.FortFuncs_define_uncompress_program

def FortFuncs_get_absolute_data_path(*args):
  return _pycrysfml.FortFuncs_get_absolute_data_path(*args)
FortFuncs_get_absolute_data_path = _pycrysfml.FortFuncs_get_absolute_data_path

def FortFuncs_get_next_yearcycle(*args):
  return _pycrysfml.FortFuncs_get_next_yearcycle(*args)
FortFuncs_get_next_yearcycle = _pycrysfml.FortFuncs_get_next_yearcycle

def FortFuncs_init_err_illdata():
  return _pycrysfml.FortFuncs_init_err_illdata()
FortFuncs_init_err_illdata = _pycrysfml.FortFuncs_init_err_illdata

def FortFuncs_init_sxtal_numor(*args):
  return _pycrysfml.FortFuncs_init_sxtal_numor(*args)
FortFuncs_init_sxtal_numor = _pycrysfml.FortFuncs_init_sxtal_numor

def FortFuncs_initialize_data_directory():
  return _pycrysfml.FortFuncs_initialize_data_directory()
FortFuncs_initialize_data_directory = _pycrysfml.FortFuncs_initialize_data_directory

def FortFuncs_read_current_instrm(*args):
  return _pycrysfml.FortFuncs_read_current_instrm(*args)
FortFuncs_read_current_instrm = _pycrysfml.FortFuncs_read_current_instrm

def FortFuncs_set_current_orient(*args):
  return _pycrysfml.FortFuncs_set_current_orient(*args)
FortFuncs_set_current_orient = _pycrysfml.FortFuncs_set_current_orient

def FortFuncs_set_default_instrument(typ=None, wav=None):
  return _pycrysfml.FortFuncs_set_default_instrument(typ, wav)
FortFuncs_set_default_instrument = _pycrysfml.FortFuncs_set_default_instrument

def FortFuncs_set_ill_data_directory(*args):
  return _pycrysfml.FortFuncs_set_ill_data_directory(*args)
FortFuncs_set_ill_data_directory = _pycrysfml.FortFuncs_set_ill_data_directory

def FortFuncs_set_instrm_directory(working_dir=None, instrm=None, iyear=None, icycle=None):
  return _pycrysfml.FortFuncs_set_instrm_directory(working_dir, instrm, iyear, icycle)
FortFuncs_set_instrm_directory = _pycrysfml.FortFuncs_set_instrm_directory

def FortFuncs_set_instrm_geometry_directory(env_var=None):
  return _pycrysfml.FortFuncs_set_instrm_geometry_directory(env_var)
FortFuncs_set_instrm_geometry_directory = _pycrysfml.FortFuncs_set_instrm_geometry_directory

def FortFuncs_update_current_instrm_ub(*args):
  return _pycrysfml.FortFuncs_update_current_instrm_ub(*args)
FortFuncs_update_current_instrm_ub = _pycrysfml.FortFuncs_update_current_instrm_ub

def FortFuncs_write_current_instrm_data(lun=None, fil=None):
  return _pycrysfml.FortFuncs_write_current_instrm_data(lun, fil)
FortFuncs_write_current_instrm_data = _pycrysfml.FortFuncs_write_current_instrm_data

def FortFuncs_write_generic_numor(*args):
  return _pycrysfml.FortFuncs_write_generic_numor(*args)
FortFuncs_write_generic_numor = _pycrysfml.FortFuncs_write_generic_numor

def FortFuncs_write_headerinfo_sxtal_numor(*args):
  return _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor(*args)
FortFuncs_write_headerinfo_sxtal_numor = _pycrysfml.FortFuncs_write_headerinfo_sxtal_numor

def FortFuncs_write_sxtal_numor(*args):
  return _pycrysfml.FortFuncs_write_sxtal_numor(*args)
FortFuncs_write_sxtal_numor = _pycrysfml.FortFuncs_write_sxtal_numor

def FortFuncs_read_calibration_file(*args):
  return _pycrysfml.FortFuncs_read_calibration_file(*args)
FortFuncs_read_calibration_file = _pycrysfml.FortFuncs_read_calibration_file

def FortFuncs_error_message(*args):
  return _pycrysfml.FortFuncs_error_message(*args)
FortFuncs_error_message = _pycrysfml.FortFuncs_error_message

def FortFuncs_info_message(*args):
  return _pycrysfml.FortFuncs_info_message(*args)
FortFuncs_info_message = _pycrysfml.FortFuncs_info_message

def FortFuncs_print_message(*args):
  return _pycrysfml.FortFuncs_print_message(*args)
FortFuncs_print_message = _pycrysfml.FortFuncs_print_message

def FortFuncs_wait_message(mess=None):
  return _pycrysfml.FortFuncs_wait_message(mess)
FortFuncs_wait_message = _pycrysfml.FortFuncs_wait_message

def FortFuncs_write_scroll_text(*args):
  return _pycrysfml.FortFuncs_write_scroll_text(*args)
FortFuncs_write_scroll_text = _pycrysfml.FortFuncs_write_scroll_text

def FortFuncs_calc_induced_sk(*args):
  return _pycrysfml.FortFuncs_calc_induced_sk(*args)
FortFuncs_calc_induced_sk = _pycrysfml.FortFuncs_calc_induced_sk

def FortFuncs_cleanup_symmetry_operators(*args):
  return _pycrysfml.FortFuncs_cleanup_symmetry_operators(*args)
FortFuncs_cleanup_symmetry_operators = _pycrysfml.FortFuncs_cleanup_symmetry_operators

def FortFuncs_init_magsymm_k_type(*args):
  return _pycrysfml.FortFuncs_init_magsymm_k_type(*args)
FortFuncs_init_magsymm_k_type = _pycrysfml.FortFuncs_init_magsymm_k_type

def FortFuncs_get_moment_ctr(*args):
  return _pycrysfml.FortFuncs_get_moment_ctr(*args)
FortFuncs_get_moment_ctr = _pycrysfml.FortFuncs_get_moment_ctr

def FortFuncs_set_magnetic_space_group(*args):
  return _pycrysfml.FortFuncs_set_magnetic_space_group(*args)
FortFuncs_set_magnetic_space_group = _pycrysfml.FortFuncs_set_magnetic_space_group

def FortFuncs_set_shubnikov_group(*args):
  return _pycrysfml.FortFuncs_set_shubnikov_group(*args)
FortFuncs_set_shubnikov_group = _pycrysfml.FortFuncs_set_shubnikov_group

def FortFuncs_setting_change_maggroup(*args):
  return _pycrysfml.FortFuncs_setting_change_maggroup(*args)
FortFuncs_setting_change_maggroup = _pycrysfml.FortFuncs_setting_change_maggroup

def FortFuncs_write_magnetic_structure(*args):
  return _pycrysfml.FortFuncs_write_magnetic_structure(*args)
FortFuncs_write_magnetic_structure = _pycrysfml.FortFuncs_write_magnetic_structure

def FortFuncs_write_mcif(*args):
  return _pycrysfml.FortFuncs_write_mcif(*args)
FortFuncs_write_mcif = _pycrysfml.FortFuncs_write_mcif

def FortFuncs_write_shubnikov_group(*args):
  return _pycrysfml.FortFuncs_write_shubnikov_group(*args)
FortFuncs_write_shubnikov_group = _pycrysfml.FortFuncs_write_shubnikov_group

def FortFuncs_index_cube(*args):
  return _pycrysfml.FortFuncs_index_cube(*args)
FortFuncs_index_cube = _pycrysfml.FortFuncs_index_cube

def FortFuncs_vpoint_in_cube(*args):
  return _pycrysfml.FortFuncs_vpoint_in_cube(*args)
FortFuncs_vpoint_in_cube = _pycrysfml.FortFuncs_vpoint_in_cube

def FortFuncs_vpoint_in_line(*args):
  return _pycrysfml.FortFuncs_vpoint_in_line(*args)
FortFuncs_vpoint_in_line = _pycrysfml.FortFuncs_vpoint_in_line

def FortFuncs_vpoint_in_square(*args):
  return _pycrysfml.FortFuncs_vpoint_in_square(*args)
FortFuncs_vpoint_in_square = _pycrysfml.FortFuncs_vpoint_in_square

def FortFuncs_init_err_maps():
  return _pycrysfml.FortFuncs_init_err_maps()
FortFuncs_init_err_maps = _pycrysfml.FortFuncs_init_err_maps

def FortFuncs_set_cube_info():
  return _pycrysfml.FortFuncs_set_cube_info()
FortFuncs_set_cube_info = _pycrysfml.FortFuncs_set_cube_info

def FortFuncs_veclength(*args):
  return _pycrysfml.FortFuncs_veclength(*args)
FortFuncs_veclength = _pycrysfml.FortFuncs_veclength

def FortFuncs_init_err_math3d():
  return _pycrysfml.FortFuncs_init_err_math3d()
FortFuncs_init_err_math3d = _pycrysfml.FortFuncs_init_err_math3d

def FortFuncs_set_eps(*args):
  return _pycrysfml.FortFuncs_set_eps(*args)
FortFuncs_set_eps = _pycrysfml.FortFuncs_set_eps

def FortFuncs_set_eps_default():
  return _pycrysfml.FortFuncs_set_eps_default()
FortFuncs_set_eps_default = _pycrysfml.FortFuncs_set_eps_default

def FortFuncs_get_plane_from_3points(*args):
  return _pycrysfml.FortFuncs_get_plane_from_3points(*args)
FortFuncs_get_plane_from_3points = _pycrysfml.FortFuncs_get_plane_from_3points

def FortFuncs_matrix_diageigen(*args):
  return _pycrysfml.FortFuncs_matrix_diageigen(*args)
FortFuncs_matrix_diageigen = _pycrysfml.FortFuncs_matrix_diageigen

def FortFuncs_matrix_inverse(*args):
  return _pycrysfml.FortFuncs_matrix_inverse(*args)
FortFuncs_matrix_inverse = _pycrysfml.FortFuncs_matrix_inverse

def FortFuncs_resolv_sist_1x2(*args):
  return _pycrysfml.FortFuncs_resolv_sist_1x2(*args)
FortFuncs_resolv_sist_1x2 = _pycrysfml.FortFuncs_resolv_sist_1x2

def FortFuncs_resolv_sist_1x3(*args):
  return _pycrysfml.FortFuncs_resolv_sist_1x3(*args)
FortFuncs_resolv_sist_1x3 = _pycrysfml.FortFuncs_resolv_sist_1x3

def FortFuncs_resolv_sist_2x2(*args):
  return _pycrysfml.FortFuncs_resolv_sist_2x2(*args)
FortFuncs_resolv_sist_2x2 = _pycrysfml.FortFuncs_resolv_sist_2x2

def FortFuncs_resolv_sist_2x3(*args):
  return _pycrysfml.FortFuncs_resolv_sist_2x3(*args)
FortFuncs_resolv_sist_2x3 = _pycrysfml.FortFuncs_resolv_sist_2x3

def FortFuncs_resolv_sist_3x3(*args):
  return _pycrysfml.FortFuncs_resolv_sist_3x3(*args)
FortFuncs_resolv_sist_3x3 = _pycrysfml.FortFuncs_resolv_sist_3x3

def FortFuncs_bessj0(*args):
  return _pycrysfml.FortFuncs_bessj0(*args)
FortFuncs_bessj0 = _pycrysfml.FortFuncs_bessj0

def FortFuncs_bessj1(*args):
  return _pycrysfml.FortFuncs_bessj1(*args)
FortFuncs_bessj1 = _pycrysfml.FortFuncs_bessj1

def FortFuncs_bessj(*args):
  return _pycrysfml.FortFuncs_bessj(*args)
FortFuncs_bessj = _pycrysfml.FortFuncs_bessj

def FortFuncs_pgcd(*args):
  return _pycrysfml.FortFuncs_pgcd(*args)
FortFuncs_pgcd = _pycrysfml.FortFuncs_pgcd

def FortFuncs_ppcm(*args):
  return _pycrysfml.FortFuncs_ppcm(*args)
FortFuncs_ppcm = _pycrysfml.FortFuncs_ppcm

def FortFuncs_epss_val():
  return _pycrysfml.FortFuncs_epss_val()
FortFuncs_epss_val = _pycrysfml.FortFuncs_epss_val

def FortFuncs_ep_ss_val():
  return _pycrysfml.FortFuncs_ep_ss_val()
FortFuncs_ep_ss_val = _pycrysfml.FortFuncs_ep_ss_val

def FortFuncs_init_err_mathgen():
  return _pycrysfml.FortFuncs_init_err_mathgen()
FortFuncs_init_err_mathgen = _pycrysfml.FortFuncs_init_err_mathgen

def FortFuncs_set_epsg_default():
  return _pycrysfml.FortFuncs_set_epsg_default()
FortFuncs_set_epsg_default = _pycrysfml.FortFuncs_set_epsg_default

def FortFuncs_cartesian_to_fractional(*args):
  return _pycrysfml.FortFuncs_cartesian_to_fractional(*args)
FortFuncs_cartesian_to_fractional = _pycrysfml.FortFuncs_cartesian_to_fractional

def FortFuncs_cartesian_to_spherical(*args):
  return _pycrysfml.FortFuncs_cartesian_to_spherical(*args)
FortFuncs_cartesian_to_spherical = _pycrysfml.FortFuncs_cartesian_to_spherical

def FortFuncs_cartesian_to_zmatrix(*args):
  return _pycrysfml.FortFuncs_cartesian_to_zmatrix(*args)
FortFuncs_cartesian_to_zmatrix = _pycrysfml.FortFuncs_cartesian_to_zmatrix

def FortFuncs_fix_reference(*args):
  return _pycrysfml.FortFuncs_fix_reference(*args)
FortFuncs_fix_reference = _pycrysfml.FortFuncs_fix_reference

def FortFuncs_fix_orient_cartesian(*args):
  return _pycrysfml.FortFuncs_fix_orient_cartesian(*args)
FortFuncs_fix_orient_cartesian = _pycrysfml.FortFuncs_fix_orient_cartesian

def FortFuncs_fractional_to_cartesian(*args):
  return _pycrysfml.FortFuncs_fractional_to_cartesian(*args)
FortFuncs_fractional_to_cartesian = _pycrysfml.FortFuncs_fractional_to_cartesian

def FortFuncs_fractional_to_spherical(*args):
  return _pycrysfml.FortFuncs_fractional_to_spherical(*args)
FortFuncs_fractional_to_spherical = _pycrysfml.FortFuncs_fractional_to_spherical

def FortFuncs_fractional_to_zmatrix(*args):
  return _pycrysfml.FortFuncs_fractional_to_zmatrix(*args)
FortFuncs_fractional_to_zmatrix = _pycrysfml.FortFuncs_fractional_to_zmatrix

def FortFuncs_init_err_molec():
  return _pycrysfml.FortFuncs_init_err_molec()
FortFuncs_init_err_molec = _pycrysfml.FortFuncs_init_err_molec

def FortFuncs_init_molecule(*args):
  return _pycrysfml.FortFuncs_init_molecule(*args)
FortFuncs_init_molecule = _pycrysfml.FortFuncs_init_molecule

def FortFuncs_init_mol_crys(*args):
  return _pycrysfml.FortFuncs_init_mol_crys(*args)
FortFuncs_init_mol_crys = _pycrysfml.FortFuncs_init_mol_crys

def FortFuncs_molcrys_to_atomlist(*args):
  return _pycrysfml.FortFuncs_molcrys_to_atomlist(*args)
FortFuncs_molcrys_to_atomlist = _pycrysfml.FortFuncs_molcrys_to_atomlist

def FortFuncs_molec_to_atomlist(*args):
  return _pycrysfml.FortFuncs_molec_to_atomlist(*args)
FortFuncs_molec_to_atomlist = _pycrysfml.FortFuncs_molec_to_atomlist

def FortFuncs_set_euler_matrix(*args):
  return _pycrysfml.FortFuncs_set_euler_matrix(*args)
FortFuncs_set_euler_matrix = _pycrysfml.FortFuncs_set_euler_matrix

def FortFuncs_spherical_to_cartesian(*args):
  return _pycrysfml.FortFuncs_spherical_to_cartesian(*args)
FortFuncs_spherical_to_cartesian = _pycrysfml.FortFuncs_spherical_to_cartesian

def FortFuncs_spherical_to_fractional(*args):
  return _pycrysfml.FortFuncs_spherical_to_fractional(*args)
FortFuncs_spherical_to_fractional = _pycrysfml.FortFuncs_spherical_to_fractional

def FortFuncs_spherical_to_zmatrix(*args):
  return _pycrysfml.FortFuncs_spherical_to_zmatrix(*args)
FortFuncs_spherical_to_zmatrix = _pycrysfml.FortFuncs_spherical_to_zmatrix

def FortFuncs_write_molecular_crystal(*args):
  return _pycrysfml.FortFuncs_write_molecular_crystal(*args)
FortFuncs_write_molecular_crystal = _pycrysfml.FortFuncs_write_molecular_crystal

def FortFuncs_write_molecule(*args):
  return _pycrysfml.FortFuncs_write_molecule(*args)
FortFuncs_write_molecule = _pycrysfml.FortFuncs_write_molecule

def FortFuncs_zmatrix_to_cartesian(*args):
  return _pycrysfml.FortFuncs_zmatrix_to_cartesian(*args)
FortFuncs_zmatrix_to_cartesian = _pycrysfml.FortFuncs_zmatrix_to_cartesian

def FortFuncs_zmatrix_to_fractional(*args):
  return _pycrysfml.FortFuncs_zmatrix_to_fractional(*args)
FortFuncs_zmatrix_to_fractional = _pycrysfml.FortFuncs_zmatrix_to_fractional

def FortFuncs_zmatrix_to_spherical(*args):
  return _pycrysfml.FortFuncs_zmatrix_to_spherical(*args)
FortFuncs_zmatrix_to_spherical = _pycrysfml.FortFuncs_zmatrix_to_spherical

def FortFuncs_calc_mag_interaction_vector(*args):
  return _pycrysfml.FortFuncs_calc_mag_interaction_vector(*args)
FortFuncs_calc_mag_interaction_vector = _pycrysfml.FortFuncs_calc_mag_interaction_vector

def FortFuncs_calc_magnetic_strf_miv(*args):
  return _pycrysfml.FortFuncs_calc_magnetic_strf_miv(*args)
FortFuncs_calc_magnetic_strf_miv = _pycrysfml.FortFuncs_calc_magnetic_strf_miv

def FortFuncs_calc_magnetic_strf_miv_dom(*args):
  return _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom(*args)
FortFuncs_calc_magnetic_strf_miv_dom = _pycrysfml.FortFuncs_calc_magnetic_strf_miv_dom

def FortFuncs_calc_magnetic_strf_tensor(*args):
  return _pycrysfml.FortFuncs_calc_magnetic_strf_tensor(*args)
FortFuncs_calc_magnetic_strf_tensor = _pycrysfml.FortFuncs_calc_magnetic_strf_tensor

def FortFuncs_gen_satellites(*args):
  return _pycrysfml.FortFuncs_gen_satellites(*args)
FortFuncs_gen_satellites = _pycrysfml.FortFuncs_gen_satellites

def FortFuncs_init_err_msfac():
  return _pycrysfml.FortFuncs_init_err_msfac()
FortFuncs_init_err_msfac = _pycrysfml.FortFuncs_init_err_msfac

def FortFuncs_init_mag_structure_factors(*args):
  return _pycrysfml.FortFuncs_init_mag_structure_factors(*args)
FortFuncs_init_mag_structure_factors = _pycrysfml.FortFuncs_init_mag_structure_factors

def FortFuncs_mag_structure_factors(*args):
  return _pycrysfml.FortFuncs_mag_structure_factors(*args)
FortFuncs_mag_structure_factors = _pycrysfml.FortFuncs_mag_structure_factors

def FortFuncs_write_mag_structure_factors(*args):
  return _pycrysfml.FortFuncs_write_mag_structure_factors(*args)
FortFuncs_write_mag_structure_factors = _pycrysfml.FortFuncs_write_mag_structure_factors

def FortFuncs_init_err_optim():
  return _pycrysfml.FortFuncs_init_err_optim()
FortFuncs_init_err_optim = _pycrysfml.FortFuncs_init_err_optim

def FortFuncs_init_opt_conditions(*args):
  return _pycrysfml.FortFuncs_init_opt_conditions(*args)
FortFuncs_init_opt_conditions = _pycrysfml.FortFuncs_init_opt_conditions

def FortFuncs_write_optimization_conditions(*args):
  return _pycrysfml.FortFuncs_write_optimization_conditions(*args)
FortFuncs_write_optimization_conditions = _pycrysfml.FortFuncs_write_optimization_conditions

def FortFuncs_write_polar_info(*args):
  return _pycrysfml.FortFuncs_write_polar_info(*args)
FortFuncs_write_polar_info = _pycrysfml.FortFuncs_write_polar_info

def FortFuncs_write_polar_line(*args):
  return _pycrysfml.FortFuncs_write_polar_line(*args)
FortFuncs_write_polar_line = _pycrysfml.FortFuncs_write_polar_line

def FortFuncs_init_prof_val():
  return _pycrysfml.FortFuncs_init_prof_val()
FortFuncs_init_prof_val = _pycrysfml.FortFuncs_init_prof_val

def FortFuncs_prof_val(*args):
  return _pycrysfml.FortFuncs_prof_val(*args)
FortFuncs_prof_val = _pycrysfml.FortFuncs_prof_val

def FortFuncs_tof_carpenter(*args):
  return _pycrysfml.FortFuncs_tof_carpenter(*args)
FortFuncs_tof_carpenter = _pycrysfml.FortFuncs_tof_carpenter

def FortFuncs_tof_jorgensen(*args):
  return _pycrysfml.FortFuncs_tof_jorgensen(*args)
FortFuncs_tof_jorgensen = _pycrysfml.FortFuncs_tof_jorgensen

def FortFuncs_tof_jorgensen_vondreele(*args):
  return _pycrysfml.FortFuncs_tof_jorgensen_vondreele(*args)
FortFuncs_tof_jorgensen_vondreele = _pycrysfml.FortFuncs_tof_jorgensen_vondreele

def FortFuncs_hk_equiv(*args):
  return _pycrysfml.FortFuncs_hk_equiv(*args)
FortFuncs_hk_equiv = _pycrysfml.FortFuncs_hk_equiv

def FortFuncs_k_equiv(*args):
  return _pycrysfml.FortFuncs_k_equiv(*args)
FortFuncs_k_equiv = _pycrysfml.FortFuncs_k_equiv

def FortFuncs_k_equiv_minus_k(*args):
  return _pycrysfml.FortFuncs_k_equiv_minus_k(*args)
FortFuncs_k_equiv_minus_k = _pycrysfml.FortFuncs_k_equiv_minus_k

def FortFuncs_k_star(*args):
  return _pycrysfml.FortFuncs_k_star(*args)
FortFuncs_k_star = _pycrysfml.FortFuncs_k_star

def FortFuncs_write_group_k(*args):
  return _pycrysfml.FortFuncs_write_group_k(*args)
FortFuncs_write_group_k = _pycrysfml.FortFuncs_write_group_k

def FortFuncs_init_err_random():
  return _pycrysfml.FortFuncs_init_err_random()
FortFuncs_init_err_random = _pycrysfml.FortFuncs_init_err_random

def FortFuncs_random_beta(*args):
  return _pycrysfml.FortFuncs_random_beta(*args)
FortFuncs_random_beta = _pycrysfml.FortFuncs_random_beta

def FortFuncs_random_binomial1(*args):
  return _pycrysfml.FortFuncs_random_binomial1(*args)
FortFuncs_random_binomial1 = _pycrysfml.FortFuncs_random_binomial1

def FortFuncs_random_binomial2(*args):
  return _pycrysfml.FortFuncs_random_binomial2(*args)
FortFuncs_random_binomial2 = _pycrysfml.FortFuncs_random_binomial2

def FortFuncs_random_cauchy(*args):
  return _pycrysfml.FortFuncs_random_cauchy(*args)
FortFuncs_random_cauchy = _pycrysfml.FortFuncs_random_cauchy

def FortFuncs_random_chisq(*args):
  return _pycrysfml.FortFuncs_random_chisq(*args)
FortFuncs_random_chisq = _pycrysfml.FortFuncs_random_chisq

def FortFuncs_random_exponential(*args):
  return _pycrysfml.FortFuncs_random_exponential(*args)
FortFuncs_random_exponential = _pycrysfml.FortFuncs_random_exponential

def FortFuncs_random_gamma(*args):
  return _pycrysfml.FortFuncs_random_gamma(*args)
FortFuncs_random_gamma = _pycrysfml.FortFuncs_random_gamma

def FortFuncs_random_gamma1(*args):
  return _pycrysfml.FortFuncs_random_gamma1(*args)
FortFuncs_random_gamma1 = _pycrysfml.FortFuncs_random_gamma1

def FortFuncs_random_gamma2(*args):
  return _pycrysfml.FortFuncs_random_gamma2(*args)
FortFuncs_random_gamma2 = _pycrysfml.FortFuncs_random_gamma2

def FortFuncs_random_inv_gauss(*args):
  return _pycrysfml.FortFuncs_random_inv_gauss(*args)
FortFuncs_random_inv_gauss = _pycrysfml.FortFuncs_random_inv_gauss

def FortFuncs_random_mvnorm(*args):
  return _pycrysfml.FortFuncs_random_mvnorm(*args)
FortFuncs_random_mvnorm = _pycrysfml.FortFuncs_random_mvnorm

def FortFuncs_random_neg_binomial(*args):
  return _pycrysfml.FortFuncs_random_neg_binomial(*args)
FortFuncs_random_neg_binomial = _pycrysfml.FortFuncs_random_neg_binomial

def FortFuncs_random_normal(*args):
  return _pycrysfml.FortFuncs_random_normal(*args)
FortFuncs_random_normal = _pycrysfml.FortFuncs_random_normal

def FortFuncs_random_order(*args):
  return _pycrysfml.FortFuncs_random_order(*args)
FortFuncs_random_order = _pycrysfml.FortFuncs_random_order

def FortFuncs_random_poisson(*args):
  return _pycrysfml.FortFuncs_random_poisson(*args)
FortFuncs_random_poisson = _pycrysfml.FortFuncs_random_poisson

def FortFuncs_random_t(*args):
  return _pycrysfml.FortFuncs_random_t(*args)
FortFuncs_random_t = _pycrysfml.FortFuncs_random_t

def FortFuncs_random_von_mises(*args):
  return _pycrysfml.FortFuncs_random_von_mises(*args)
FortFuncs_random_von_mises = _pycrysfml.FortFuncs_random_von_mises

def FortFuncs_random_weibull(*args):
  return _pycrysfml.FortFuncs_random_weibull(*args)
FortFuncs_random_weibull = _pycrysfml.FortFuncs_random_weibull

def FortFuncs_seed_random_number(i_input=None, i_output=None):
  return _pycrysfml.FortFuncs_seed_random_number(i_input, i_output)
FortFuncs_seed_random_number = _pycrysfml.FortFuncs_seed_random_number

def FortFuncs_allocate_vparam(*args):
  return _pycrysfml.FortFuncs_allocate_vparam(*args)
FortFuncs_allocate_vparam = _pycrysfml.FortFuncs_allocate_vparam

def FortFuncs_get_restang_line(*args):
  return _pycrysfml.FortFuncs_get_restang_line(*args)
FortFuncs_get_restang_line = _pycrysfml.FortFuncs_get_restang_line

def FortFuncs_get_restdis_line(*args):
  return _pycrysfml.FortFuncs_get_restdis_line(*args)
FortFuncs_get_restdis_line = _pycrysfml.FortFuncs_get_restdis_line

def FortFuncs_get_resttor_line(*args):
  return _pycrysfml.FortFuncs_get_resttor_line(*args)
FortFuncs_get_resttor_line = _pycrysfml.FortFuncs_get_resttor_line

def FortFuncs_init_err_refcodes():
  return _pycrysfml.FortFuncs_init_err_refcodes()
FortFuncs_init_err_refcodes = _pycrysfml.FortFuncs_init_err_refcodes

def FortFuncs_init_refcodes(fatom=None, fmatom=None, mag_dom=None, molcrys=None, molec=None, model=None):
  return _pycrysfml.FortFuncs_init_refcodes(fatom, fmatom, mag_dom, molcrys, molec, model)
FortFuncs_init_refcodes = _pycrysfml.FortFuncs_init_refcodes

def FortFuncs_read_refgcodes_file(*args):
  return _pycrysfml.FortFuncs_read_refgcodes_file(*args)
FortFuncs_read_refgcodes_file = _pycrysfml.FortFuncs_read_refgcodes_file

def FortFuncs_vstate_to_modelpar(*args):
  return _pycrysfml.FortFuncs_vstate_to_modelpar(*args)
FortFuncs_vstate_to_modelpar = _pycrysfml.FortFuncs_vstate_to_modelpar

def FortFuncs_write_info_refgcodes(*args):
  return _pycrysfml.FortFuncs_write_info_refgcodes(*args)
FortFuncs_write_info_refgcodes = _pycrysfml.FortFuncs_write_info_refgcodes

def FortFuncs_write_info_refparams(iunit=None):
  return _pycrysfml.FortFuncs_write_info_refparams(iunit)
FortFuncs_write_info_refparams = _pycrysfml.FortFuncs_write_info_refparams

def FortFuncs_write_restraints_obscalc(*args):
  return _pycrysfml.FortFuncs_write_restraints_obscalc(*args)
FortFuncs_write_restraints_obscalc = _pycrysfml.FortFuncs_write_restraints_obscalc

def FortFuncs_get_maxnumref(*args):
  return _pycrysfml.FortFuncs_get_maxnumref(*args)
FortFuncs_get_maxnumref = _pycrysfml.FortFuncs_get_maxnumref

def FortFuncs_mhkl_absent(*args):
  return _pycrysfml.FortFuncs_mhkl_absent(*args)
FortFuncs_mhkl_absent = _pycrysfml.FortFuncs_mhkl_absent

def FortFuncs_init_err_refl():
  return _pycrysfml.FortFuncs_init_err_refl()
FortFuncs_init_err_refl = _pycrysfml.FortFuncs_init_err_refl

def FortFuncs_init_reflist(*args):
  return _pycrysfml.FortFuncs_init_reflist(*args)
FortFuncs_init_reflist = _pycrysfml.FortFuncs_init_reflist

def FortFuncs_write_asu(*args):
  return _pycrysfml.FortFuncs_write_asu(*args)
FortFuncs_write_asu = _pycrysfml.FortFuncs_write_asu

def FortFuncs_write_reflist_info(*args):
  return _pycrysfml.FortFuncs_write_reflist_info(*args)
FortFuncs_write_reflist_info = _pycrysfml.FortFuncs_write_reflist_info

def FortFuncs_angs_4c_bisecting(*args):
  return _pycrysfml.FortFuncs_angs_4c_bisecting(*args)
FortFuncs_angs_4c_bisecting = _pycrysfml.FortFuncs_angs_4c_bisecting

def FortFuncs_calang(*args):
  return _pycrysfml.FortFuncs_calang(*args)
FortFuncs_calang = _pycrysfml.FortFuncs_calang

def FortFuncs_calc_om_chi_phi(*args):
  return _pycrysfml.FortFuncs_calc_om_chi_phi(*args)
FortFuncs_calc_om_chi_phi = _pycrysfml.FortFuncs_calc_om_chi_phi

def FortFuncs_calc_psi(*args):
  return _pycrysfml.FortFuncs_calc_psi(*args)
FortFuncs_calc_psi = _pycrysfml.FortFuncs_calc_psi

def FortFuncs_cell_fr_ub(*args):
  return _pycrysfml.FortFuncs_cell_fr_ub(*args)
FortFuncs_cell_fr_ub = _pycrysfml.FortFuncs_cell_fr_ub

def FortFuncs_chi_mat(*args):
  return _pycrysfml.FortFuncs_chi_mat(*args)
FortFuncs_chi_mat = _pycrysfml.FortFuncs_chi_mat

def FortFuncs_psd_convert(*args):
  return _pycrysfml.FortFuncs_psd_convert(*args)
FortFuncs_psd_convert = _pycrysfml.FortFuncs_psd_convert

def FortFuncs_d19psd(*args):
  return _pycrysfml.FortFuncs_d19psd(*args)
FortFuncs_d19psd = _pycrysfml.FortFuncs_d19psd

def FortFuncs_dspace(*args):
  return _pycrysfml.FortFuncs_dspace(*args)
FortFuncs_dspace = _pycrysfml.FortFuncs_dspace

def FortFuncs_equatorial_chi_phi(*args):
  return _pycrysfml.FortFuncs_equatorial_chi_phi(*args)
FortFuncs_equatorial_chi_phi = _pycrysfml.FortFuncs_equatorial_chi_phi

def FortFuncs_fixdnu(*args):
  return _pycrysfml.FortFuncs_fixdnu(*args)
FortFuncs_fixdnu = _pycrysfml.FortFuncs_fixdnu

def FortFuncs_flat_cone_vertdet(*args):
  return _pycrysfml.FortFuncs_flat_cone_vertdet(*args)
FortFuncs_flat_cone_vertdet = _pycrysfml.FortFuncs_flat_cone_vertdet

def FortFuncs_genb(*args):
  return _pycrysfml.FortFuncs_genb(*args)
FortFuncs_genb = _pycrysfml.FortFuncs_genb

def FortFuncs_genub(*args):
  return _pycrysfml.FortFuncs_genub(*args)
FortFuncs_genub = _pycrysfml.FortFuncs_genub

def FortFuncs_get_angs_nb(*args):
  return _pycrysfml.FortFuncs_get_angs_nb(*args)
FortFuncs_get_angs_nb = _pycrysfml.FortFuncs_get_angs_nb

def FortFuncs_get_dspacing_theta(*args):
  return _pycrysfml.FortFuncs_get_dspacing_theta(*args)
FortFuncs_get_dspacing_theta = _pycrysfml.FortFuncs_get_dspacing_theta

def FortFuncs_get_gaomnu_frchiphi(*args):
  return _pycrysfml.FortFuncs_get_gaomnu_frchiphi(*args)
FortFuncs_get_gaomnu_frchiphi = _pycrysfml.FortFuncs_get_gaomnu_frchiphi

def FortFuncs_get_ub_from_hkl_hkl_omega(*args):
  return _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega(*args)
FortFuncs_get_ub_from_hkl_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega

def FortFuncs_get_ub_from_uvw_hkl_omega(*args):
  return _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega(*args)
FortFuncs_get_ub_from_uvw_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega

def FortFuncs_get_waveganu_frz4(*args):
  return _pycrysfml.FortFuncs_get_waveganu_frz4(*args)
FortFuncs_get_waveganu_frz4 = _pycrysfml.FortFuncs_get_waveganu_frz4

def FortFuncs_get_z1_d9angls(*args):
  return _pycrysfml.FortFuncs_get_z1_d9angls(*args)
FortFuncs_get_z1_d9angls = _pycrysfml.FortFuncs_get_z1_d9angls

def FortFuncs_normal(*args):
  return _pycrysfml.FortFuncs_normal(*args)
FortFuncs_normal = _pycrysfml.FortFuncs_normal

def FortFuncs_phi_mat(*args):
  return _pycrysfml.FortFuncs_phi_mat(*args)
FortFuncs_phi_mat = _pycrysfml.FortFuncs_phi_mat

def FortFuncs_psi_mat(*args):
  return _pycrysfml.FortFuncs_psi_mat(*args)
FortFuncs_psi_mat = _pycrysfml.FortFuncs_psi_mat

def FortFuncs_read_twinlaw(*args):
  return _pycrysfml.FortFuncs_read_twinlaw(*args)
FortFuncs_read_twinlaw = _pycrysfml.FortFuncs_read_twinlaw

def FortFuncs_refvec(*args):
  return _pycrysfml.FortFuncs_refvec(*args)
FortFuncs_refvec = _pycrysfml.FortFuncs_refvec

def FortFuncs_s4cnb(*args):
  return _pycrysfml.FortFuncs_s4cnb(*args)
FortFuncs_s4cnb = _pycrysfml.FortFuncs_s4cnb

def FortFuncs_set_psd(dist=None, cg=None, ag=None, nh=None, nv=None, ip=None):
  return _pycrysfml.FortFuncs_set_psd(dist, cg, ag, nh, nv, ip)
FortFuncs_set_psd = _pycrysfml.FortFuncs_set_psd

def FortFuncs_snb4c(*args):
  return _pycrysfml.FortFuncs_snb4c(*args)
FortFuncs_snb4c = _pycrysfml.FortFuncs_snb4c

def FortFuncs_sxdpsd(*args):
  return _pycrysfml.FortFuncs_sxdpsd(*args)
FortFuncs_sxdpsd = _pycrysfml.FortFuncs_sxdpsd

def FortFuncs_triple(*args):
  return _pycrysfml.FortFuncs_triple(*args)
FortFuncs_triple = _pycrysfml.FortFuncs_triple

def FortFuncs_write_twinlaw(*args):
  return _pycrysfml.FortFuncs_write_twinlaw(*args)
FortFuncs_write_twinlaw = _pycrysfml.FortFuncs_write_twinlaw

def FortFuncs_z1frfc(*args):
  return _pycrysfml.FortFuncs_z1frfc(*args)
FortFuncs_z1frfc = _pycrysfml.FortFuncs_z1frfc

def FortFuncs_z1frmd(*args):
  return _pycrysfml.FortFuncs_z1frmd(*args)
FortFuncs_z1frmd = _pycrysfml.FortFuncs_z1frmd

def FortFuncs_z1frnb(*args):
  return _pycrysfml.FortFuncs_z1frnb(*args)
FortFuncs_z1frnb = _pycrysfml.FortFuncs_z1frnb

def FortFuncs_z1frz2(*args):
  return _pycrysfml.FortFuncs_z1frz2(*args)
FortFuncs_z1frz2 = _pycrysfml.FortFuncs_z1frz2

def FortFuncs_z1frz3(*args):
  return _pycrysfml.FortFuncs_z1frz3(*args)
FortFuncs_z1frz3 = _pycrysfml.FortFuncs_z1frz3

def FortFuncs_z1frz4(*args):
  return _pycrysfml.FortFuncs_z1frz4(*args)
FortFuncs_z1frz4 = _pycrysfml.FortFuncs_z1frz4

def FortFuncs_z2frz1(*args):
  return _pycrysfml.FortFuncs_z2frz1(*args)
FortFuncs_z2frz1 = _pycrysfml.FortFuncs_z2frz1

def FortFuncs_z3frz1(*args):
  return _pycrysfml.FortFuncs_z3frz1(*args)
FortFuncs_z3frz1 = _pycrysfml.FortFuncs_z3frz1

def FortFuncs_z4frgn(*args):
  return _pycrysfml.FortFuncs_z4frgn(*args)
FortFuncs_z4frgn = _pycrysfml.FortFuncs_z4frgn

def FortFuncs_z4frz1(*args):
  return _pycrysfml.FortFuncs_z4frz1(*args)
FortFuncs_z4frz1 = _pycrysfml.FortFuncs_z4frz1

def FortFuncs_additional_scattering_factors(*args):
  return _pycrysfml.FortFuncs_additional_scattering_factors(*args)
FortFuncs_additional_scattering_factors = _pycrysfml.FortFuncs_additional_scattering_factors

def FortFuncs_allocate_scattering_species(*args):
  return _pycrysfml.FortFuncs_allocate_scattering_species(*args)
FortFuncs_allocate_scattering_species = _pycrysfml.FortFuncs_allocate_scattering_species

def FortFuncs_calc_strfactor(*args):
  return _pycrysfml.FortFuncs_calc_strfactor(*args)
FortFuncs_calc_strfactor = _pycrysfml.FortFuncs_calc_strfactor

def FortFuncs_calc_hkl_strfactor(*args):
  return _pycrysfml.FortFuncs_calc_hkl_strfactor(*args)
FortFuncs_calc_hkl_strfactor = _pycrysfml.FortFuncs_calc_hkl_strfactor

def FortFuncs_init_calc_hkl_strfactors(*args):
  return _pycrysfml.FortFuncs_init_calc_hkl_strfactors(*args)
FortFuncs_init_calc_hkl_strfactors = _pycrysfml.FortFuncs_init_calc_hkl_strfactors

def FortFuncs_init_calc_strfactors(*args):
  return _pycrysfml.FortFuncs_init_calc_strfactors(*args)
FortFuncs_init_calc_strfactors = _pycrysfml.FortFuncs_init_calc_strfactors

def FortFuncs_init_structure_factors(*args):
  return _pycrysfml.FortFuncs_init_structure_factors(*args)
FortFuncs_init_structure_factors = _pycrysfml.FortFuncs_init_structure_factors

def FortFuncs_structure_factors(*args):
  return _pycrysfml.FortFuncs_structure_factors(*args)
FortFuncs_structure_factors = _pycrysfml.FortFuncs_structure_factors

def FortFuncs_write_structure_factors(*args):
  return _pycrysfml.FortFuncs_write_structure_factors(*args)
FortFuncs_write_structure_factors = _pycrysfml.FortFuncs_write_structure_factors

def FortFuncs_cubic_harm_ang(*args):
  return _pycrysfml.FortFuncs_cubic_harm_ang(*args)
FortFuncs_cubic_harm_ang = _pycrysfml.FortFuncs_cubic_harm_ang

def FortFuncs_cubic_harm_ucvec(*args):
  return _pycrysfml.FortFuncs_cubic_harm_ucvec(*args)
FortFuncs_cubic_harm_ucvec = _pycrysfml.FortFuncs_cubic_harm_ucvec

def FortFuncs_int_slater_bessel(*args):
  return _pycrysfml.FortFuncs_int_slater_bessel(*args)
FortFuncs_int_slater_bessel = _pycrysfml.FortFuncs_int_slater_bessel

def FortFuncs_real_spher_harm_ang(*args):
  return _pycrysfml.FortFuncs_real_spher_harm_ang(*args)
FortFuncs_real_spher_harm_ang = _pycrysfml.FortFuncs_real_spher_harm_ang

def FortFuncs_real_spher_harm_ucvec(*args):
  return _pycrysfml.FortFuncs_real_spher_harm_ucvec(*args)
FortFuncs_real_spher_harm_ucvec = _pycrysfml.FortFuncs_real_spher_harm_ucvec

def FortFuncs_real_spher_harmcharge_ucvec(*args):
  return _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec(*args)
FortFuncs_real_spher_harmcharge_ucvec = _pycrysfml.FortFuncs_real_spher_harmcharge_ucvec

def FortFuncs_init_err_spher():
  return _pycrysfml.FortFuncs_init_err_spher()
FortFuncs_init_err_spher = _pycrysfml.FortFuncs_init_err_spher

def FortFuncs_pikout_lj_cubic(*args):
  return _pycrysfml.FortFuncs_pikout_lj_cubic(*args)
FortFuncs_pikout_lj_cubic = _pycrysfml.FortFuncs_pikout_lj_cubic

def FortFuncs_get_generators(*args):
  return _pycrysfml.FortFuncs_get_generators(*args)
FortFuncs_get_generators = _pycrysfml.FortFuncs_get_generators

def FortFuncs_remove_spgr_info():
  return _pycrysfml.FortFuncs_remove_spgr_info()
FortFuncs_remove_spgr_info = _pycrysfml.FortFuncs_remove_spgr_info

def FortFuncs_remove_system_equiv():
  return _pycrysfml.FortFuncs_remove_system_equiv()
FortFuncs_remove_system_equiv = _pycrysfml.FortFuncs_remove_system_equiv

def FortFuncs_remove_wyckoff_info():
  return _pycrysfml.FortFuncs_remove_wyckoff_info()
FortFuncs_remove_wyckoff_info = _pycrysfml.FortFuncs_remove_wyckoff_info

def FortFuncs_set_spgr_info():
  return _pycrysfml.FortFuncs_set_spgr_info()
FortFuncs_set_spgr_info = _pycrysfml.FortFuncs_set_spgr_info

def FortFuncs_set_system_equiv():
  return _pycrysfml.FortFuncs_set_system_equiv()
FortFuncs_set_system_equiv = _pycrysfml.FortFuncs_set_system_equiv

def FortFuncs_set_wyckoff_info():
  return _pycrysfml.FortFuncs_set_wyckoff_info()
FortFuncs_set_wyckoff_info = _pycrysfml.FortFuncs_set_wyckoff_info

def FortFuncs_axes_rotation(*args):
  return _pycrysfml.FortFuncs_axes_rotation(*args)
FortFuncs_axes_rotation = _pycrysfml.FortFuncs_axes_rotation

def FortFuncs_get_laue_num(*args):
  return _pycrysfml.FortFuncs_get_laue_num(*args)
FortFuncs_get_laue_num = _pycrysfml.FortFuncs_get_laue_num

def FortFuncs_get_multip_pos(*args):
  return _pycrysfml.FortFuncs_get_multip_pos(*args)
FortFuncs_get_multip_pos = _pycrysfml.FortFuncs_get_multip_pos

def FortFuncs_get_occ_site(*args):
  return _pycrysfml.FortFuncs_get_occ_site(*args)
FortFuncs_get_occ_site = _pycrysfml.FortFuncs_get_occ_site

def FortFuncs_get_pointgroup_num(*args):
  return _pycrysfml.FortFuncs_get_pointgroup_num(*args)
FortFuncs_get_pointgroup_num = _pycrysfml.FortFuncs_get_pointgroup_num

def FortFuncs_lattice_trans(*args):
  return _pycrysfml.FortFuncs_lattice_trans(*args)
FortFuncs_lattice_trans = _pycrysfml.FortFuncs_lattice_trans

def FortFuncs_spgr_equal(*args):
  return _pycrysfml.FortFuncs_spgr_equal(*args)
FortFuncs_spgr_equal = _pycrysfml.FortFuncs_spgr_equal

def FortFuncs_allocate_lattice_centring(*args):
  return _pycrysfml.FortFuncs_allocate_lattice_centring(*args)
FortFuncs_allocate_lattice_centring = _pycrysfml.FortFuncs_allocate_lattice_centring

def FortFuncs_check_generator(*args):
  return _pycrysfml.FortFuncs_check_generator(*args)
FortFuncs_check_generator = _pycrysfml.FortFuncs_check_generator

def FortFuncs_decodmatmag(*args):
  return _pycrysfml.FortFuncs_decodmatmag(*args)
FortFuncs_decodmatmag = _pycrysfml.FortFuncs_decodmatmag

def FortFuncs_get_laue_str(*args):
  return _pycrysfml.FortFuncs_get_laue_str(*args)
FortFuncs_get_laue_str = _pycrysfml.FortFuncs_get_laue_str

def FortFuncs_get_pointgroup_str(*args):
  return _pycrysfml.FortFuncs_get_pointgroup_str(*args)
FortFuncs_get_pointgroup_str = _pycrysfml.FortFuncs_get_pointgroup_str

def FortFuncs_get_seitz_symbol(*args):
  return _pycrysfml.FortFuncs_get_seitz_symbol(*args)
FortFuncs_get_seitz_symbol = _pycrysfml.FortFuncs_get_seitz_symbol

def FortFuncs_get_setting_info(*args):
  return _pycrysfml.FortFuncs_get_setting_info(*args)
FortFuncs_get_setting_info = _pycrysfml.FortFuncs_get_setting_info

def FortFuncs_get_shubnikov_operator_symbol(*args):
  return _pycrysfml.FortFuncs_get_shubnikov_operator_symbol(*args)
FortFuncs_get_shubnikov_operator_symbol = _pycrysfml.FortFuncs_get_shubnikov_operator_symbol

def FortFuncs_get_string_resolv(*args):
  return _pycrysfml.FortFuncs_get_string_resolv(*args)
FortFuncs_get_string_resolv = _pycrysfml.FortFuncs_get_string_resolv

def FortFuncs_get_symel(*args):
  return _pycrysfml.FortFuncs_get_symel(*args)
FortFuncs_get_symel = _pycrysfml.FortFuncs_get_symel

def FortFuncs_get_symkov(*args):
  return _pycrysfml.FortFuncs_get_symkov(*args)
FortFuncs_get_symkov = _pycrysfml.FortFuncs_get_symkov

def FortFuncs_get_trasfm_symbol(*args):
  return _pycrysfml.FortFuncs_get_trasfm_symbol(*args)
FortFuncs_get_trasfm_symbol = _pycrysfml.FortFuncs_get_trasfm_symbol

def FortFuncs_get_transl_symbol(*args):
  return _pycrysfml.FortFuncs_get_transl_symbol(*args)
FortFuncs_get_transl_symbol = _pycrysfml.FortFuncs_get_transl_symbol

def FortFuncs_init_err_symm():
  return _pycrysfml.FortFuncs_init_err_symm()
FortFuncs_init_err_symm = _pycrysfml.FortFuncs_init_err_symm

def FortFuncs_inverse_symm(*args):
  return _pycrysfml.FortFuncs_inverse_symm(*args)
FortFuncs_inverse_symm = _pycrysfml.FortFuncs_inverse_symm

def FortFuncs_latsym(*args):
  return _pycrysfml.FortFuncs_latsym(*args)
FortFuncs_latsym = _pycrysfml.FortFuncs_latsym

def FortFuncs_read_bin_spacegroup(*args):
  return _pycrysfml.FortFuncs_read_bin_spacegroup(*args)
FortFuncs_read_bin_spacegroup = _pycrysfml.FortFuncs_read_bin_spacegroup

def FortFuncs_read_msymm(*args):
  return _pycrysfml.FortFuncs_read_msymm(*args)
FortFuncs_read_msymm = _pycrysfml.FortFuncs_read_msymm

def FortFuncs_read_symtrans_code(*args):
  return _pycrysfml.FortFuncs_read_symtrans_code(*args)
FortFuncs_read_symtrans_code = _pycrysfml.FortFuncs_read_symtrans_code

def FortFuncs_read_xsym(*args):
  return _pycrysfml.FortFuncs_read_xsym(*args)
FortFuncs_read_xsym = _pycrysfml.FortFuncs_read_xsym

def FortFuncs_searchop(*args):
  return _pycrysfml.FortFuncs_searchop(*args)
FortFuncs_searchop = _pycrysfml.FortFuncs_searchop

def FortFuncs_set_spacegroup(*args):
  return _pycrysfml.FortFuncs_set_spacegroup(*args)
FortFuncs_set_spacegroup = _pycrysfml.FortFuncs_set_spacegroup

def FortFuncs_similar_transf_sg(*args):
  return _pycrysfml.FortFuncs_similar_transf_sg(*args)
FortFuncs_similar_transf_sg = _pycrysfml.FortFuncs_similar_transf_sg

def FortFuncs_sym_prod_st(*args):
  return _pycrysfml.FortFuncs_sym_prod_st(*args)
FortFuncs_sym_prod_st = _pycrysfml.FortFuncs_sym_prod_st

def FortFuncs_write_bin_spacegroup(*args):
  return _pycrysfml.FortFuncs_write_bin_spacegroup(*args)
FortFuncs_write_bin_spacegroup = _pycrysfml.FortFuncs_write_bin_spacegroup

def FortFuncs_write_magnetic_space_group(*args):
  return _pycrysfml.FortFuncs_write_magnetic_space_group(*args)
FortFuncs_write_magnetic_space_group = _pycrysfml.FortFuncs_write_magnetic_space_group

def FortFuncs_write_spacegroup(*args):
  return _pycrysfml.FortFuncs_write_spacegroup(*args)
FortFuncs_write_spacegroup = _pycrysfml.FortFuncs_write_spacegroup

def FortFuncs_write_sym(*args):
  return _pycrysfml.FortFuncs_write_sym(*args)
FortFuncs_write_sym = _pycrysfml.FortFuncs_write_sym

def FortFuncs_write_symtrans_code(*args):
  return _pycrysfml.FortFuncs_write_symtrans_code(*args)
FortFuncs_write_symtrans_code = _pycrysfml.FortFuncs_write_symtrans_code

def FortFuncs_write_wyckoff(*args):
  return _pycrysfml.FortFuncs_write_wyckoff(*args)
FortFuncs_write_wyckoff = _pycrysfml.FortFuncs_write_wyckoff

def FortFuncs_copy_ns_spg_to_spg(*args):
  return _pycrysfml.FortFuncs_copy_ns_spg_to_spg(*args)
FortFuncs_copy_ns_spg_to_spg = _pycrysfml.FortFuncs_copy_ns_spg_to_spg

def FortFuncs_alloc_mhlist_array(*args):
  return _pycrysfml.FortFuncs_alloc_mhlist_array(*args)
FortFuncs_alloc_mhlist_array = _pycrysfml.FortFuncs_alloc_mhlist_array

def FortFuncs_alloc_refllist_array(*args):
  return _pycrysfml.FortFuncs_alloc_refllist_array(*args)
FortFuncs_alloc_refllist_array = _pycrysfml.FortFuncs_alloc_refllist_array

def FortFuncs_reflct_array_ctor(*args):
  return _pycrysfml.FortFuncs_reflct_array_ctor(*args)
FortFuncs_reflct_array_ctor = _pycrysfml.FortFuncs_reflct_array_ctor

def FortFuncs_reflct_append(*args):
  return _pycrysfml.FortFuncs_reflct_append(*args)
FortFuncs_reflct_append = _pycrysfml.FortFuncs_reflct_append

def FortFuncs_readxtal_structure_file(*args):
  return _pycrysfml.FortFuncs_readxtal_structure_file(*args)
FortFuncs_readxtal_structure_file = _pycrysfml.FortFuncs_readxtal_structure_file

def FortFuncs_hkls_r(*args):
  return _pycrysfml.FortFuncs_hkls_r(*args)
FortFuncs_hkls_r = _pycrysfml.FortFuncs_hkls_r

def FortFuncs_hklgen_sxtal_reflection(*args):
  return _pycrysfml.FortFuncs_hklgen_sxtal_reflection(*args)
FortFuncs_hklgen_sxtal_reflection = _pycrysfml.FortFuncs_hklgen_sxtal_reflection

def FortFuncs_hklgen_sxtal_list(*args):
  return _pycrysfml.FortFuncs_hklgen_sxtal_list(*args)
FortFuncs_hklgen_sxtal_list = _pycrysfml.FortFuncs_hklgen_sxtal_list

def FortFuncs_hkluni_reflection(*args):
  return _pycrysfml.FortFuncs_hkluni_reflection(*args)
FortFuncs_hkluni_reflection = _pycrysfml.FortFuncs_hkluni_reflection

def FortFuncs_hkluni_refllist(*args):
  return _pycrysfml.FortFuncs_hkluni_refllist(*args)
FortFuncs_hkluni_refllist = _pycrysfml.FortFuncs_hkluni_refllist

def FortFuncs_read_mag_cfl_file(*args):
  return _pycrysfml.FortFuncs_read_mag_cfl_file(*args)
FortFuncs_read_mag_cfl_file = _pycrysfml.FortFuncs_read_mag_cfl_file

def FortFuncs_read_mag_mcif_file(*args):
  return _pycrysfml.FortFuncs_read_mag_mcif_file(*args)
FortFuncs_read_mag_mcif_file = _pycrysfml.FortFuncs_read_mag_mcif_file

def FortFuncs_calcgaussian(*args):
  return _pycrysfml.FortFuncs_calcgaussian(*args)
FortFuncs_calcgaussian = _pycrysfml.FortFuncs_calcgaussian

def FortFuncs_calchat(*args):
  return _pycrysfml.FortFuncs_calchat(*args)
FortFuncs_calchat = _pycrysfml.FortFuncs_calchat

def FortFuncs_calclorentzian(*args):
  return _pycrysfml.FortFuncs_calclorentzian(*args)
FortFuncs_calclorentzian = _pycrysfml.FortFuncs_calclorentzian

def FortFuncs_calcpseudovoigt(*args):
  return _pycrysfml.FortFuncs_calcpseudovoigt(*args)
FortFuncs_calcpseudovoigt = _pycrysfml.FortFuncs_calcpseudovoigt

def FortFuncs_gausspeak(*args):
  return _pycrysfml.FortFuncs_gausspeak(*args)
FortFuncs_gausspeak = _pycrysfml.FortFuncs_gausspeak

def FortFuncs_read_ill_data(*args):
  return _pycrysfml.FortFuncs_read_ill_data(*args)
FortFuncs_read_ill_data = _pycrysfml.FortFuncs_read_ill_data

def FortFuncs_printbasis(*args):
  return _pycrysfml.FortFuncs_printbasis(*args)
FortFuncs_printbasis = _pycrysfml.FortFuncs_printbasis

def FortFuncs_atom_type_ctor(*args):
  return _pycrysfml.FortFuncs_atom_type_ctor(*args)
FortFuncs_atom_type_ctor = _pycrysfml.FortFuncs_atom_type_ctor

def FortFuncs_matom_type_ctor(*args):
  return _pycrysfml.FortFuncs_matom_type_ctor(*args)
FortFuncs_matom_type_ctor = _pycrysfml.FortFuncs_matom_type_ctor

def FortFuncs_crystal_cell_type_ctor(*args):
  return _pycrysfml.FortFuncs_crystal_cell_type_ctor(*args)
FortFuncs_crystal_cell_type_ctor = _pycrysfml.FortFuncs_crystal_cell_type_ctor

def FortFuncs_get_twofold_axes_a(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_a(*args)
FortFuncs_get_twofold_axes_a = _pycrysfml.FortFuncs_get_twofold_axes_a

def FortFuncs_set_twofold_axes_a(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_a(*args)
FortFuncs_set_twofold_axes_a = _pycrysfml.FortFuncs_set_twofold_axes_a

def FortFuncs_get_twofold_axes_c(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_c(*args)
FortFuncs_get_twofold_axes_c = _pycrysfml.FortFuncs_get_twofold_axes_c

def FortFuncs_set_twofold_axes_c(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_c(*args)
FortFuncs_set_twofold_axes_c = _pycrysfml.FortFuncs_set_twofold_axes_c

def FortFuncs_get_twofold_axes_b(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_b(*args)
FortFuncs_get_twofold_axes_b = _pycrysfml.FortFuncs_get_twofold_axes_b

def FortFuncs_set_twofold_axes_b(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_b(*args)
FortFuncs_set_twofold_axes_b = _pycrysfml.FortFuncs_set_twofold_axes_b

def FortFuncs_get_twofold_axes_maxes(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_maxes(*args)
FortFuncs_get_twofold_axes_maxes = _pycrysfml.FortFuncs_get_twofold_axes_maxes

def FortFuncs_set_twofold_axes_maxes(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_maxes(*args)
FortFuncs_set_twofold_axes_maxes = _pycrysfml.FortFuncs_set_twofold_axes_maxes

def FortFuncs_get_twofold_axes_ntwo(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_ntwo(*args)
FortFuncs_get_twofold_axes_ntwo = _pycrysfml.FortFuncs_get_twofold_axes_ntwo

def FortFuncs_set_twofold_axes_ntwo(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_ntwo(*args)
FortFuncs_set_twofold_axes_ntwo = _pycrysfml.FortFuncs_set_twofold_axes_ntwo

def FortFuncs_get_twofold_axes_cross(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_cross(*args)
FortFuncs_get_twofold_axes_cross = _pycrysfml.FortFuncs_get_twofold_axes_cross

def FortFuncs_set_twofold_axes_cross(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_cross(*args)
FortFuncs_set_twofold_axes_cross = _pycrysfml.FortFuncs_set_twofold_axes_cross

def FortFuncs_get_twofold_axes_tol(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_tol(*args)
FortFuncs_get_twofold_axes_tol = _pycrysfml.FortFuncs_get_twofold_axes_tol

def FortFuncs_set_twofold_axes_tol(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_tol(*args)
FortFuncs_set_twofold_axes_tol = _pycrysfml.FortFuncs_set_twofold_axes_tol

def FortFuncs_get_twofold_axes_rtwofold(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_rtwofold(*args)
FortFuncs_get_twofold_axes_rtwofold = _pycrysfml.FortFuncs_get_twofold_axes_rtwofold

def FortFuncs_set_twofold_axes_rtwofold(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_rtwofold(*args)
FortFuncs_set_twofold_axes_rtwofold = _pycrysfml.FortFuncs_set_twofold_axes_rtwofold

def FortFuncs_get_twofold_axes_caxes(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_caxes(*args)
FortFuncs_get_twofold_axes_caxes = _pycrysfml.FortFuncs_get_twofold_axes_caxes

def FortFuncs_set_twofold_axes_caxes(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_caxes(*args)
FortFuncs_set_twofold_axes_caxes = _pycrysfml.FortFuncs_set_twofold_axes_caxes

def FortFuncs_get_twofold_axes_dot(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_dot(*args)
FortFuncs_get_twofold_axes_dot = _pycrysfml.FortFuncs_get_twofold_axes_dot

def FortFuncs_set_twofold_axes_dot(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_dot(*args)
FortFuncs_set_twofold_axes_dot = _pycrysfml.FortFuncs_set_twofold_axes_dot

def FortFuncs_get_twofold_axes_dtwofold(*args):
  return _pycrysfml.FortFuncs_get_twofold_axes_dtwofold(*args)
FortFuncs_get_twofold_axes_dtwofold = _pycrysfml.FortFuncs_get_twofold_axes_dtwofold

def FortFuncs_set_twofold_axes_dtwofold(*args):
  return _pycrysfml.FortFuncs_set_twofold_axes_dtwofold(*args)
FortFuncs_set_twofold_axes_dtwofold = _pycrysfml.FortFuncs_set_twofold_axes_dtwofold

def FortFuncs_twofold_axes_type_ctor(*args):
  return _pycrysfml.FortFuncs_twofold_axes_type_ctor(*args)
FortFuncs_twofold_axes_type_ctor = _pycrysfml.FortFuncs_twofold_axes_type_ctor

def FortFuncs_zone_axis_type_ctor(*args):
  return _pycrysfml.FortFuncs_zone_axis_type_ctor(*args)
FortFuncs_zone_axis_type_ctor = _pycrysfml.FortFuncs_zone_axis_type_ctor

def FortFuncs_interval_type_ctor(*args):
  return _pycrysfml.FortFuncs_interval_type_ctor(*args)
FortFuncs_interval_type_ctor = _pycrysfml.FortFuncs_interval_type_ctor

def FortFuncs_msym_oper_type_ctor(*args):
  return _pycrysfml.FortFuncs_msym_oper_type_ctor(*args)
FortFuncs_msym_oper_type_ctor = _pycrysfml.FortFuncs_msym_oper_type_ctor

def FortFuncs_magnetic_group_type_ctor(*args):
  return _pycrysfml.FortFuncs_magnetic_group_type_ctor(*args)
FortFuncs_magnetic_group_type_ctor = _pycrysfml.FortFuncs_magnetic_group_type_ctor

def FortFuncs_reflect_type_ctor(*args):
  return _pycrysfml.FortFuncs_reflect_type_ctor(*args)
FortFuncs_reflect_type_ctor = _pycrysfml.FortFuncs_reflect_type_ctor

def FortFuncs_reflection_type_ctor(*args):
  return _pycrysfml.FortFuncs_reflection_type_ctor(*args)
FortFuncs_reflection_type_ctor = _pycrysfml.FortFuncs_reflection_type_ctor

def FortFuncs_ns_sym_oper_type_ctor(*args):
  return _pycrysfml.FortFuncs_ns_sym_oper_type_ctor(*args)
FortFuncs_ns_sym_oper_type_ctor = _pycrysfml.FortFuncs_ns_sym_oper_type_ctor

def FortFuncs_sym_oper_type_ctor(*args):
  return _pycrysfml.FortFuncs_sym_oper_type_ctor(*args)
FortFuncs_sym_oper_type_ctor = _pycrysfml.FortFuncs_sym_oper_type_ctor

def FortFuncs_get_command(command=None, length=None, status=None):
  return _pycrysfml.FortFuncs_get_command(command, length, status)
FortFuncs_get_command = _pycrysfml.FortFuncs_get_command

def FortFuncs_get_command_argument(*args):
  return _pycrysfml.FortFuncs_get_command_argument(*args)
FortFuncs_get_command_argument = _pycrysfml.FortFuncs_get_command_argument

def FortFuncs_get_environment_variable(*args):
  return _pycrysfml.FortFuncs_get_environment_variable(*args)
FortFuncs_get_environment_variable = _pycrysfml.FortFuncs_get_environment_variable

class generic_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, generic_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, generic_numor_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_generic_numor_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_generic_numor_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.generic_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.generic_numor_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.generic_numor_type_data_ptr_get, _pycrysfml.generic_numor_type_data_ptr_set)
generic_numor_type_swigregister = _pycrysfml.generic_numor_type_swigregister
generic_numor_type_swigregister(generic_numor_type)

class group_k_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, group_k_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, group_k_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_group_k_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_group_k_type
    __del__ = lambda self : None;
    def set_gk(self, *args): return _pycrysfml.group_k_type_set_gk(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.group_k_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.group_k_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.group_k_type_data_ptr_get, _pycrysfml.group_k_type_data_ptr_set)
group_k_type_swigregister = _pycrysfml.group_k_type_swigregister
group_k_type_swigregister(group_k_type)

class ill_data_record_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ill_data_record_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ill_data_record_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_ill_data_record_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_ill_data_record_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.ill_data_record_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ill_data_record_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.ill_data_record_type_data_ptr_get, _pycrysfml.ill_data_record_type_data_ptr_set)
ill_data_record_type_swigregister = _pycrysfml.ill_data_record_type_swigregister
ill_data_record_type_swigregister(ill_data_record_type)

class interval_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interval_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interval_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_interval_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_interval_type
    __del__ = lambda self : None;
    def get_interval_maxb(self): return _pycrysfml.interval_type_get_interval_maxb(self)
    def set_interval_maxb(self, *args): return _pycrysfml.interval_type_set_interval_maxb(self, *args)
    def get_interval_mina(self): return _pycrysfml.interval_type_get_interval_mina(self)
    def set_interval_mina(self, *args): return _pycrysfml.interval_type_set_interval_mina(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.interval_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.interval_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.interval_type_data_ptr_get, _pycrysfml.interval_type_data_ptr_set)
interval_type_swigregister = _pycrysfml.interval_type_swigregister
interval_type_swigregister(interval_type)

class job_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, job_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, job_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_job_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_job_info_type
    __del__ = lambda self : None;
    def get_job_info_title(self, *args): return _pycrysfml.job_info_type_get_job_info_title(self, *args)
    def set_job_info_title(self, *args): return _pycrysfml.job_info_type_set_job_info_title(self, *args)
    def get_job_info_num_phases(self): return _pycrysfml.job_info_type_get_job_info_num_phases(self)
    def set_job_info_num_phases(self, *args): return _pycrysfml.job_info_type_set_job_info_num_phases(self, *args)
    def get_job_info_num_patterns(self): return _pycrysfml.job_info_type_get_job_info_num_patterns(self)
    def set_job_info_num_patterns(self, *args): return _pycrysfml.job_info_type_set_job_info_num_patterns(self, *args)
    def get_job_info_num_cmd(self): return _pycrysfml.job_info_type_get_job_info_num_cmd(self)
    def set_job_info_num_cmd(self, *args): return _pycrysfml.job_info_type_set_job_info_num_cmd(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.job_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.job_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.job_info_type_data_ptr_get, _pycrysfml.job_info_type_data_ptr_set)
job_info_type_swigregister = _pycrysfml.job_info_type_swigregister
job_info_type_swigregister(job_info_type)

class lattice_centring_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lattice_centring_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lattice_centring_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_lattice_centring_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_lattice_centring_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.lattice_centring_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.lattice_centring_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.lattice_centring_type_data_ptr_get, _pycrysfml.lattice_centring_type_data_ptr_set)
lattice_centring_type_swigregister = _pycrysfml.lattice_centring_type_swigregister
lattice_centring_type_swigregister(lattice_centring_type)

class maghd_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maghd_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maghd_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_maghd_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_maghd_list_type
    __del__ = lambda self : None;
    def get_maghd_list_element(self, *args): return _pycrysfml.maghd_list_type_get_maghd_list_element(self, *args)
    def set_maghd_list_element(self, *args): return _pycrysfml.maghd_list_type_set_maghd_list_element(self, *args)
    def get_maghd_list_nref(self): return _pycrysfml.maghd_list_type_get_maghd_list_nref(self)
    def set_maghd_list_nref(self, *args): return _pycrysfml.maghd_list_type_set_maghd_list_nref(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.maghd_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.maghd_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.maghd_list_type_data_ptr_get, _pycrysfml.maghd_list_type_data_ptr_set)
maghd_list_type_swigregister = _pycrysfml.maghd_list_type_swigregister
maghd_list_type_swigregister(maghd_list_type)

class maghd_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maghd_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maghd_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_maghd_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_maghd_type
    __del__ = lambda self : None;
    def get_maghd_sqamiv(self): return _pycrysfml.maghd_type_get_maghd_sqamiv(self)
    def set_maghd_sqamiv(self, *args): return _pycrysfml.maghd_type_set_maghd_sqamiv(self, *args)
    def get_maghd_num_k(self): return _pycrysfml.maghd_type_get_maghd_num_k(self)
    def set_maghd_num_k(self, *args): return _pycrysfml.maghd_type_set_maghd_num_k(self, *args)
    def get_maghd_h(self, *args): return _pycrysfml.maghd_type_get_maghd_h(self, *args)
    def set_maghd_h(self, *args): return _pycrysfml.maghd_type_set_maghd_h(self, *args)
    def get_maghd_sqmiv(self): return _pycrysfml.maghd_type_get_maghd_sqmiv(self)
    def set_maghd_sqmiv(self, *args): return _pycrysfml.maghd_type_set_maghd_sqmiv(self, *args)
    def get_maghd_s(self): return _pycrysfml.maghd_type_get_maghd_s(self)
    def set_maghd_s(self, *args): return _pycrysfml.maghd_type_set_maghd_s(self, *args)
    def get_maghd_signp(self): return _pycrysfml.maghd_type_get_maghd_signp(self)
    def set_maghd_signp(self, *args): return _pycrysfml.maghd_type_set_maghd_signp(self, *args)
    def get_maghd_keqv_minus(self): return _pycrysfml.maghd_type_get_maghd_keqv_minus(self)
    def set_maghd_keqv_minus(self, *args): return _pycrysfml.maghd_type_set_maghd_keqv_minus(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.maghd_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.maghd_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.maghd_type_data_ptr_get, _pycrysfml.maghd_type_data_ptr_set)
maghd_type_swigregister = _pycrysfml.maghd_type_swigregister
maghd_type_swigregister(maghd_type)

class magh_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magh_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magh_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magh_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magh_list_type
    __del__ = lambda self : None;
    def get_magh_list_element(self, *args): return _pycrysfml.magh_list_type_get_magh_list_element(self, *args)
    def set_magh_list_element(self, *args): return _pycrysfml.magh_list_type_set_magh_list_element(self, *args)
    def get_magh_list_nref(self): return _pycrysfml.magh_list_type_get_magh_list_nref(self)
    def set_magh_list_nref(self, *args): return _pycrysfml.magh_list_type_set_magh_list_nref(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magh_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magh_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magh_list_type_data_ptr_get, _pycrysfml.magh_list_type_data_ptr_set)
magh_list_type_swigregister = _pycrysfml.magh_list_type_swigregister
magh_list_type_swigregister(magh_list_type)

class magh_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magh_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magh_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magh_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magh_type
    __del__ = lambda self : None;
    def get_msf(self, *args): return _pycrysfml.magh_type_get_msf(self, *args)
    def set_msf(self, *args): return _pycrysfml.magh_type_set_msf(self, *args)
    def get_miv(self, *args): return _pycrysfml.magh_type_get_miv(self, *args)
    def set_miv(self, *args): return _pycrysfml.magh_type_set_miv(self, *args)
    def get_magh_num_k(self): return _pycrysfml.magh_type_get_magh_num_k(self)
    def set_magh_num_k(self, *args): return _pycrysfml.magh_type_set_magh_num_k(self, *args)
    def get_magh_h(self, *args): return _pycrysfml.magh_type_get_magh_h(self, *args)
    def set_magh_h(self, *args): return _pycrysfml.magh_type_set_magh_h(self, *args)
    def get_magh_sqmiv(self): return _pycrysfml.magh_type_get_magh_sqmiv(self)
    def set_magh_sqmiv(self, *args): return _pycrysfml.magh_type_set_magh_sqmiv(self, *args)
    def get_magh_s(self): return _pycrysfml.magh_type_get_magh_s(self)
    def set_magh_s(self, *args): return _pycrysfml.magh_type_set_magh_s(self, *args)
    def get_magh_signp(self): return _pycrysfml.magh_type_get_magh_signp(self)
    def set_magh_signp(self, *args): return _pycrysfml.magh_type_set_magh_signp(self, *args)
    def get_magh_keqv_minus(self): return _pycrysfml.magh_type_get_magh_keqv_minus(self)
    def set_magh_keqv_minus(self, *args): return _pycrysfml.magh_type_set_magh_keqv_minus(self, *args)
    def get_magh_mult(self): return _pycrysfml.magh_type_get_magh_mult(self)
    def set_magh_mult(self, *args): return _pycrysfml.magh_type_set_magh_mult(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magh_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magh_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magh_type_data_ptr_get, _pycrysfml.magh_type_data_ptr_set)
magh_type_swigregister = _pycrysfml.magh_type_swigregister
magh_type_swigregister(magh_type)

class magnetic_domain_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_domain_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_domain_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_domain_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_domain_type
    __del__ = lambda self : None;
    def get_magnetic_domain_chir(self): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_chir(self)
    def set_magnetic_domain_chir(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_chir(self, *args)
    def get_magnetic_domain_pop_std(self, *args): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_pop_std(self, *args)
    def set_magnetic_domain_pop_std(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_pop_std(self, *args)
    def get_magnetic_domain_mpop(self, *args): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_mpop(self, *args)
    def set_magnetic_domain_mpop(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_mpop(self, *args)
    def get_magnetic_domain_nd(self): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_nd(self)
    def set_magnetic_domain_nd(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_nd(self, *args)
    def get_magnetic_domain_lpop(self, *args): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_lpop(self, *args)
    def set_magnetic_domain_lpop(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_lpop(self, *args)
    def get_magnetic_domain_pop(self, *args): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_pop(self, *args)
    def set_magnetic_domain_pop(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_pop(self, *args)
    def get_magnetic_domain_twin(self): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_twin(self)
    def set_magnetic_domain_twin(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_twin(self, *args)
    def get_magnetic_domain_dmat(self, *args): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_dmat(self, *args)
    def set_magnetic_domain_dmat(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_dmat(self, *args)
    def get_magnetic_domain_dt(self, *args): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_dt(self, *args)
    def set_magnetic_domain_dt(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_dt(self, *args)
    def get_magnetic_domain_trans(self): return _pycrysfml.magnetic_domain_type_get_magnetic_domain_trans(self)
    def set_magnetic_domain_trans(self, *args): return _pycrysfml.magnetic_domain_type_set_magnetic_domain_trans(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_domain_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_domain_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_domain_type_data_ptr_get, _pycrysfml.magnetic_domain_type_data_ptr_set)
magnetic_domain_type_swigregister = _pycrysfml.magnetic_domain_type_swigregister
magnetic_domain_type_swigregister(magnetic_domain_type)

class magnetic_form_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_form_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_form_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_form_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_form_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_form_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_form_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_form_type_data_ptr_get, _pycrysfml.magnetic_form_type_data_ptr_set)
magnetic_form_type_swigregister = _pycrysfml.magnetic_form_type_swigregister
magnetic_form_type_swigregister(magnetic_form_type)

class magnetic_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_group_type
    __del__ = lambda self : None;
    def get_magnetic_group_tinv(self, *args): return _pycrysfml.magnetic_group_type_get_magnetic_group_tinv(self, *args)
    def set_magnetic_group_tinv(self, *args): return _pycrysfml.magnetic_group_type_set_magnetic_group_tinv(self, *args)
    def get_magnetic_group_shubnikov(self, *args): return _pycrysfml.magnetic_group_type_get_magnetic_group_shubnikov(self, *args)
    def set_magnetic_group_shubnikov(self, *args): return _pycrysfml.magnetic_group_type_set_magnetic_group_shubnikov(self, *args)
    def get_magnetic_group_spg(self, *args): return _pycrysfml.magnetic_group_type_get_magnetic_group_spg(self, *args)
    def set_magnetic_group_spg(self, *args): return _pycrysfml.magnetic_group_type_set_magnetic_group_spg(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_group_type_data_ptr_get, _pycrysfml.magnetic_group_type_data_ptr_set)
magnetic_group_type_swigregister = _pycrysfml.magnetic_group_type_swigregister
magnetic_group_type_swigregister(magnetic_group_type)

class magnetic_space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_space_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_space_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_space_group_type
    __del__ = lambda self : None;
    def get_magnetic_space_group_m_constr(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_m_constr(self)
    def set_magnetic_space_group_m_constr(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_m_constr(self, *args)
    def get_magnetic_space_group_centre_coord(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centre_coord(self, *args)
    def set_magnetic_space_group_centre_coord(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centre_coord(self, *args)
    def get_magnetic_space_group_n_wyck(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_wyck(self)
    def set_magnetic_space_group_n_wyck(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_wyck(self, *args)
    def get_magnetic_space_group_bns_symbol(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_bns_symbol(self, *args)
    def set_magnetic_space_group_bns_symbol(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_bns_symbol(self, *args)
    def get_magnetic_space_group_bns_number(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_bns_number(self, *args)
    def set_magnetic_space_group_bns_number(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_bns_number(self, *args)
    def get_magnetic_space_group_sh_number(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_sh_number(self)
    def set_magnetic_space_group_sh_number(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_sh_number(self, *args)
    def get_magnetic_space_group_crystalsys(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_crystalsys(self, *args)
    def set_magnetic_space_group_crystalsys(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_crystalsys(self, *args)
    def get_magnetic_space_group_m_cell(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_m_cell(self)
    def set_magnetic_space_group_m_cell(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_m_cell(self, *args)
    def get_magnetic_space_group_num_lat(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_lat(self)
    def set_magnetic_space_group_num_lat(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_lat(self, *args)
    def get_magnetic_space_group_num_alat(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_alat(self)
    def set_magnetic_space_group_num_alat(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_alat(self, *args)
    def get_magnetic_space_group_centred(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centred(self)
    def set_magnetic_space_group_centred(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centred(self, *args)
    def get_magnetic_space_group_spg_lat(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_spg_lat(self, *args)
    def set_magnetic_space_group_spg_lat(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_spg_lat(self, *args)
    def get_magnetic_space_group_parent_num(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_parent_num(self)
    def set_magnetic_space_group_parent_num(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_parent_num(self, *args)
    def get_magnetic_space_group_magtype(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_magtype(self)
    def set_magnetic_space_group_magtype(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_magtype(self, *args)
    def get_magnetic_space_group_n_kv(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_kv(self)
    def set_magnetic_space_group_n_kv(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_kv(self, *args)
    def get_magnetic_space_group_og_number(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_og_number(self, *args)
    def set_magnetic_space_group_og_number(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_og_number(self, *args)
    def get_magnetic_space_group_n_irreps(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_n_irreps(self)
    def set_magnetic_space_group_n_irreps(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_n_irreps(self, *args)
    def get_magnetic_space_group_spg_latsy(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_spg_latsy(self, *args)
    def set_magnetic_space_group_spg_latsy(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_spg_latsy(self, *args)
    def get_magnetic_space_group_num_gen(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_num_gen(self)
    def set_magnetic_space_group_num_gen(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_num_gen(self, *args)
    def get_magnetic_space_group_standard_setting(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_standard_setting(self)
    def set_magnetic_space_group_standard_setting(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_standard_setting(self, *args)
    def get_magnetic_space_group_parent_spg(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_parent_spg(self, *args)
    def set_magnetic_space_group_parent_spg(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_parent_spg(self, *args)
    def get_magnetic_space_group_og_symbol(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_og_symbol(self, *args)
    def set_magnetic_space_group_og_symbol(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_og_symbol(self, *args)
    def get_magnetic_space_group_centre(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_centre(self, *args)
    def set_magnetic_space_group_centre(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_centre(self, *args)
    def get_magnetic_space_group_mcif(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_mcif(self)
    def set_magnetic_space_group_mcif(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_mcif(self, *args)
    def get_magnetic_space_group_numops(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_numops(self)
    def set_magnetic_space_group_numops(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_numops(self, *args)
    def get_magnetic_space_group_trn_to_standard(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_trn_to_standard(self, *args)
    def set_magnetic_space_group_trn_to_standard(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_trn_to_standard(self, *args)
    def get_magnetic_space_group_trn_from_parent(self, *args): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_trn_from_parent(self, *args)
    def set_magnetic_space_group_trn_from_parent(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_trn_from_parent(self, *args)
    def get_magnetic_space_group_multip(self): return _pycrysfml.magnetic_space_group_type_get_magnetic_space_group_multip(self)
    def set_magnetic_space_group_multip(self, *args): return _pycrysfml.magnetic_space_group_type_set_magnetic_space_group_multip(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_space_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_space_group_type_data_ptr_get, _pycrysfml.magnetic_space_group_type_data_ptr_set)
magnetic_space_group_type_swigregister = _pycrysfml.magnetic_space_group_type_swigregister
magnetic_space_group_type_swigregister(magnetic_space_group_type)

class magsymm_k_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magsymm_k_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magsymm_k_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magsymm_k_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magsymm_k_type
    __del__ = lambda self : None;
    def get_basis_element(self, *args): return _pycrysfml.magsymm_k_type_get_basis_element(self, *args)
    def get_kvector(self, *args): return _pycrysfml.magsymm_k_type_get_kvector(self, *args)
    def set_basis_element(self, *args): return _pycrysfml.magsymm_k_type_set_basis_element(self, *args)
    def get_magsymm_k_latt(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_latt(self, *args)
    def set_magsymm_k_latt(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_latt(self, *args)
    def get_magsymm_k_numops(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_numops(self)
    def set_magsymm_k_numops(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_numops(self, *args)
    def get_magsymm_k_bns_symbol(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_bns_symbol(self, *args)
    def set_magsymm_k_bns_symbol(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_bns_symbol(self, *args)
    def get_magsymm_k_bns_number(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_bns_number(self, *args)
    def set_magsymm_k_bns_number(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_bns_number(self, *args)
    def get_magsymm_k_mcentred(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_mcentred(self)
    def set_magsymm_k_mcentred(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_mcentred(self, *args)
    def get_magsymm_k_magmodel(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_magmodel(self, *args)
    def set_magsymm_k_magmodel(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_magmodel(self, *args)
    def get_magsymm_k_kvec(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_kvec(self, *args)
    def set_magsymm_k_kvec(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_kvec(self, *args)
    def get_magsymm_k_nmsym(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_nmsym(self)
    def set_magsymm_k_nmsym(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_nmsym(self, *args)
    def get_magsymm_k_num_lat(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_num_lat(self)
    def set_magsymm_k_num_lat(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_num_lat(self, *args)
    def get_magsymm_k_small_irrep_dim(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_small_irrep_dim(self, *args)
    def set_magsymm_k_small_irrep_dim(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_small_irrep_dim(self, *args)
    def get_magsymm_k_ltr(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_ltr(self, *args)
    def set_magsymm_k_ltr(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_ltr(self, *args)
    def get_magsymm_k_parent_num(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_parent_num(self)
    def set_magsymm_k_parent_num(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_parent_num(self, *args)
    def get_magsymm_k_sk_type(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_sk_type(self, *args)
    def set_magsymm_k_sk_type(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_sk_type(self, *args)
    def get_magsymm_k_nirreps(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_nirreps(self)
    def set_magsymm_k_nirreps(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_nirreps(self, *args)
    def get_magsymm_k_magtype(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_magtype(self)
    def set_magsymm_k_magtype(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_magtype(self, *args)
    def get_magsymm_k_og_number(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_og_number(self, *args)
    def set_magsymm_k_og_number(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_og_number(self, *args)
    def get_magsymm_k_irrep_dim(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_irrep_dim(self, *args)
    def set_magsymm_k_irrep_dim(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_irrep_dim(self, *args)
    def get_magsymm_k_irrep_modes_number(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_irrep_modes_number(self, *args)
    def set_magsymm_k_irrep_modes_number(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_irrep_modes_number(self, *args)
    def get_magsymm_k_nkv(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_nkv(self)
    def set_magsymm_k_nkv(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_nkv(self, *args)
    def get_magsymm_k_centred(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_centred(self)
    def set_magsymm_k_centred(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_centred(self, *args)
    def get_magsymm_k_parent_spg(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_parent_spg(self, *args)
    def set_magsymm_k_parent_spg(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_parent_spg(self, *args)
    def get_magsymm_k_og_symbol(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_og_symbol(self, *args)
    def set_magsymm_k_og_symbol(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_og_symbol(self, *args)
    def get_magsymm_k_nbas(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_nbas(self, *args)
    def set_magsymm_k_nbas(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_nbas(self, *args)
    def get_magsymm_k_icomp(self, *args): return _pycrysfml.magsymm_k_type_get_magsymm_k_icomp(self, *args)
    def set_magsymm_k_icomp(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_icomp(self, *args)
    def get_magsymm_k_multip(self): return _pycrysfml.magsymm_k_type_get_magsymm_k_multip(self)
    def set_magsymm_k_multip(self, *args): return _pycrysfml.magsymm_k_type_set_magsymm_k_multip(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magsymm_k_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magsymm_k_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magsymm_k_type_data_ptr_get, _pycrysfml.magsymm_k_type_data_ptr_set)
magsymm_k_type_swigregister = _pycrysfml.magsymm_k_type_swigregister
magsymm_k_type_swigregister(magsymm_k_type)

class matom_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matom_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matom_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_matom_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_matom_list_type
    __del__ = lambda self : None;
    def get_matom_list_element(self, *args): return _pycrysfml.matom_list_type_get_matom_list_element(self, *args)
    def set_matom_list_element(self, *args): return _pycrysfml.matom_list_type_set_matom_list_element(self, *args)
    def get_matom_list_natoms(self): return _pycrysfml.matom_list_type_get_matom_list_natoms(self)
    def set_matom_list_natoms(self, *args): return _pycrysfml.matom_list_type_set_matom_list_natoms(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.matom_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.matom_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.matom_list_type_data_ptr_get, _pycrysfml.matom_list_type_data_ptr_set)
matom_list_type_swigregister = _pycrysfml.matom_list_type_swigregister
matom_list_type_swigregister(matom_list_type)

class matom_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matom_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matom_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_matom_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_matom_type
    __del__ = lambda self : None;
    def get_matom_basis_element(self, *args): return _pycrysfml.matom_type_get_matom_basis_element(self, *args)
    def set_matom_basis_element(self, *args): return _pycrysfml.matom_type_set_matom_basis_element(self, *args)
    def get_matom_mmphas(self, *args): return _pycrysfml.matom_type_get_matom_mmphas(self, *args)
    def set_matom_mmphas(self, *args): return _pycrysfml.matom_type_set_matom_mmphas(self, *args)
    def get_matom_locc(self): return _pycrysfml.matom_type_get_matom_locc(self)
    def set_matom_locc(self, *args): return _pycrysfml.matom_type_set_matom_locc(self, *args)
    def get_matom_ski_std(self, *args): return _pycrysfml.matom_type_get_matom_ski_std(self, *args)
    def set_matom_ski_std(self, *args): return _pycrysfml.matom_type_set_matom_ski_std(self, *args)
    def get_matom_lvarf(self, *args): return _pycrysfml.matom_type_get_matom_lvarf(self, *args)
    def set_matom_lvarf(self, *args): return _pycrysfml.matom_type_set_matom_lvarf(self, *args)
    def get_matom_utype(self, *args): return _pycrysfml.matom_type_get_matom_utype(self, *args)
    def set_matom_utype(self, *args): return _pycrysfml.matom_type_set_matom_utype(self, *args)
    def get_matom_mbiso(self): return _pycrysfml.matom_type_get_matom_mbiso(self)
    def set_matom_mbiso(self, *args): return _pycrysfml.matom_type_set_matom_mbiso(self, *args)
    def get_matom_occ(self): return _pycrysfml.matom_type_get_matom_occ(self)
    def set_matom_occ(self, *args): return _pycrysfml.matom_type_set_matom_occ(self, *args)
    def get_matom_lbas(self, *args): return _pycrysfml.matom_type_get_matom_lbas(self, *args)
    def set_matom_lbas(self, *args): return _pycrysfml.matom_type_set_matom_lbas(self, *args)
    def get_matom_charge(self): return _pycrysfml.matom_type_get_matom_charge(self)
    def set_matom_charge(self, *args): return _pycrysfml.matom_type_set_matom_charge(self, *args)
    def get_matom_sfacsymb(self, *args): return _pycrysfml.matom_type_get_matom_sfacsymb(self, *args)
    def set_matom_sfacsymb(self, *args): return _pycrysfml.matom_type_set_matom_sfacsymb(self, *args)
    def get_matom_imat(self, *args): return _pycrysfml.matom_type_get_matom_imat(self, *args)
    def set_matom_imat(self, *args): return _pycrysfml.matom_type_set_matom_imat(self, *args)
    def get_matom_lmphas(self, *args): return _pycrysfml.matom_type_get_matom_lmphas(self, *args)
    def set_matom_lmphas(self, *args): return _pycrysfml.matom_type_set_matom_lmphas(self, *args)
    def get_matom_mphas(self, *args): return _pycrysfml.matom_type_get_matom_mphas(self, *args)
    def set_matom_mphas(self, *args): return _pycrysfml.matom_type_set_matom_mphas(self, *args)
    def get_matom_spher_ski(self, *args): return _pycrysfml.matom_type_get_matom_spher_ski(self, *args)
    def set_matom_spher_ski(self, *args): return _pycrysfml.matom_type_set_matom_spher_ski(self, *args)
    def get_matom_skr(self, *args): return _pycrysfml.matom_type_get_matom_skr(self, *args)
    def set_matom_skr(self, *args): return _pycrysfml.matom_type_set_matom_skr(self, *args)
    def get_matom_lskr(self, *args): return _pycrysfml.matom_type_get_matom_lskr(self, *args)
    def set_matom_lskr(self, *args): return _pycrysfml.matom_type_set_matom_lskr(self, *args)
    def get_matom_lab(self, *args): return _pycrysfml.matom_type_get_matom_lab(self, *args)
    def set_matom_lab(self, *args): return _pycrysfml.matom_type_set_matom_lab(self, *args)
    def get_matom_moment(self): return _pycrysfml.matom_type_get_matom_moment(self)
    def set_matom_moment(self, *args): return _pycrysfml.matom_type_set_matom_moment(self, *args)
    def get_matom_lu(self, *args): return _pycrysfml.matom_type_get_matom_lu(self, *args)
    def set_matom_lu(self, *args): return _pycrysfml.matom_type_set_matom_lu(self, *args)
    def get_matom_mocc(self): return _pycrysfml.matom_type_get_matom_mocc(self)
    def set_matom_mocc(self, *args): return _pycrysfml.matom_type_set_matom_mocc(self, *args)
    def get_matom_active(self): return _pycrysfml.matom_type_get_matom_active(self)
    def set_matom_active(self, *args): return _pycrysfml.matom_type_set_matom_active(self, *args)
    def get_matom_ski(self, *args): return _pycrysfml.matom_type_get_matom_ski(self, *args)
    def set_matom_ski(self, *args): return _pycrysfml.matom_type_set_matom_ski(self, *args)
    def get_matom_mult(self): return _pycrysfml.matom_type_get_matom_mult(self)
    def set_matom_mult(self, *args): return _pycrysfml.matom_type_set_matom_mult(self, *args)
    def get_matom_spher_skr_std(self, *args): return _pycrysfml.matom_type_get_matom_spher_skr_std(self, *args)
    def set_matom_spher_skr_std(self, *args): return _pycrysfml.matom_type_set_matom_spher_skr_std(self, *args)
    def get_matom_x_std(self, *args): return _pycrysfml.matom_type_get_matom_x_std(self, *args)
    def set_matom_x_std(self, *args): return _pycrysfml.matom_type_set_matom_x_std(self, *args)
    def get_matom_u_std(self, *args): return _pycrysfml.matom_type_get_matom_u_std(self, *args)
    def set_matom_u_std(self, *args): return _pycrysfml.matom_type_set_matom_u_std(self, *args)
    def get_matom_lski(self, *args): return _pycrysfml.matom_type_get_matom_lski(self, *args)
    def set_matom_lski(self, *args): return _pycrysfml.matom_type_set_matom_lski(self, *args)
    def get_matom_nvar(self): return _pycrysfml.matom_type_get_matom_nvar(self)
    def set_matom_nvar(self, *args): return _pycrysfml.matom_type_set_matom_nvar(self, *args)
    def get_matom_wyck(self, *args): return _pycrysfml.matom_type_get_matom_wyck(self, *args)
    def set_matom_wyck(self, *args): return _pycrysfml.matom_type_set_matom_wyck(self, *args)
    def get_matom_biso_std(self): return _pycrysfml.matom_type_get_matom_biso_std(self)
    def set_matom_biso_std(self, *args): return _pycrysfml.matom_type_set_matom_biso_std(self, *args)
    def get_matom_lbiso(self): return _pycrysfml.matom_type_get_matom_lbiso(self)
    def set_matom_lbiso(self, *args): return _pycrysfml.matom_type_set_matom_lbiso(self, *args)
    def get_matom_mphas_std(self, *args): return _pycrysfml.matom_type_get_matom_mphas_std(self, *args)
    def set_matom_mphas_std(self, *args): return _pycrysfml.matom_type_set_matom_mphas_std(self, *args)
    def get_matom_mvarf(self, *args): return _pycrysfml.matom_type_get_matom_mvarf(self, *args)
    def set_matom_mvarf(self, *args): return _pycrysfml.matom_type_set_matom_mvarf(self, *args)
    def get_matom_biso(self): return _pycrysfml.matom_type_get_matom_biso(self)
    def set_matom_biso(self, *args): return _pycrysfml.matom_type_set_matom_biso(self, *args)
    def get_matom_varf(self, *args): return _pycrysfml.matom_type_get_matom_varf(self, *args)
    def set_matom_varf(self, *args): return _pycrysfml.matom_type_set_matom_varf(self, *args)
    def get_matom_u(self, *args): return _pycrysfml.matom_type_get_matom_u(self, *args)
    def set_matom_u(self, *args): return _pycrysfml.matom_type_set_matom_u(self, *args)
    def get_matom_occ_std(self): return _pycrysfml.matom_type_get_matom_occ_std(self)
    def set_matom_occ_std(self, *args): return _pycrysfml.matom_type_set_matom_occ_std(self, *args)
    def get_matom_x(self, *args): return _pycrysfml.matom_type_get_matom_x(self, *args)
    def set_matom_x(self, *args): return _pycrysfml.matom_type_set_matom_x(self, *args)
    def get_matom_z(self): return _pycrysfml.matom_type_get_matom_z(self)
    def set_matom_z(self, *args): return _pycrysfml.matom_type_set_matom_z(self, *args)
    def get_matom_nvk(self): return _pycrysfml.matom_type_get_matom_nvk(self)
    def set_matom_nvk(self, *args): return _pycrysfml.matom_type_set_matom_nvk(self, *args)
    def get_matom_mbas(self, *args): return _pycrysfml.matom_type_get_matom_mbas(self, *args)
    def set_matom_mbas(self, *args): return _pycrysfml.matom_type_set_matom_mbas(self, *args)
    def get_matom_spher_ski_std(self, *args): return _pycrysfml.matom_type_get_matom_spher_ski_std(self, *args)
    def set_matom_spher_ski_std(self, *args): return _pycrysfml.matom_type_set_matom_spher_ski_std(self, *args)
    def get_matom_spher_skr(self, *args): return _pycrysfml.matom_type_get_matom_spher_skr(self, *args)
    def set_matom_spher_skr(self, *args): return _pycrysfml.matom_type_set_matom_spher_skr(self, *args)
    def get_matom_mski(self, *args): return _pycrysfml.matom_type_get_matom_mski(self, *args)
    def set_matom_mski(self, *args): return _pycrysfml.matom_type_set_matom_mski(self, *args)
    def get_matom_skr_std(self, *args): return _pycrysfml.matom_type_get_matom_skr_std(self, *args)
    def set_matom_skr_std(self, *args): return _pycrysfml.matom_type_set_matom_skr_std(self, *args)
    def get_matom_mu(self, *args): return _pycrysfml.matom_type_get_matom_mu(self, *args)
    def set_matom_mu(self, *args): return _pycrysfml.matom_type_set_matom_mu(self, *args)
    def get_matom_mskr(self, *args): return _pycrysfml.matom_type_get_matom_mskr(self, *args)
    def set_matom_mskr(self, *args): return _pycrysfml.matom_type_set_matom_mskr(self, *args)
    def get_matom_lx(self, *args): return _pycrysfml.matom_type_get_matom_lx(self, *args)
    def set_matom_lx(self, *args): return _pycrysfml.matom_type_set_matom_lx(self, *args)
    def get_matom_chemsymb(self, *args): return _pycrysfml.matom_type_get_matom_chemsymb(self, *args)
    def set_matom_chemsymb(self, *args): return _pycrysfml.matom_type_set_matom_chemsymb(self, *args)
    def get_matom_cbas(self, *args): return _pycrysfml.matom_type_get_matom_cbas(self, *args)
    def set_matom_cbas(self, *args): return _pycrysfml.matom_type_set_matom_cbas(self, *args)
    def get_matom_ind(self, *args): return _pycrysfml.matom_type_get_matom_ind(self, *args)
    def set_matom_ind(self, *args): return _pycrysfml.matom_type_set_matom_ind(self, *args)
    def get_matom_cbas_std(self, *args): return _pycrysfml.matom_type_get_matom_cbas_std(self, *args)
    def set_matom_cbas_std(self, *args): return _pycrysfml.matom_type_set_matom_cbas_std(self, *args)
    def get_matom_thtype(self, *args): return _pycrysfml.matom_type_get_matom_thtype(self, *args)
    def set_matom_thtype(self, *args): return _pycrysfml.matom_type_set_matom_thtype(self, *args)
    def get_matom_atminfo(self, *args): return _pycrysfml.matom_type_get_matom_atminfo(self, *args)
    def set_matom_atminfo(self, *args): return _pycrysfml.matom_type_set_matom_atminfo(self, *args)
    def get_matom_ueq(self): return _pycrysfml.matom_type_get_matom_ueq(self)
    def set_matom_ueq(self, *args): return _pycrysfml.matom_type_set_matom_ueq(self, *args)
    def get_matom_mx(self, *args): return _pycrysfml.matom_type_get_matom_mx(self, *args)
    def set_matom_mx(self, *args): return _pycrysfml.matom_type_set_matom_mx(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.matom_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.matom_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.matom_type_data_ptr_get, _pycrysfml.matom_type_data_ptr_set)
matom_type_swigregister = _pycrysfml.matom_type_swigregister
matom_type_swigregister(matom_type)

class molecular_crystal_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, molecular_crystal_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, molecular_crystal_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_molecular_crystal_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_molecular_crystal_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.molecular_crystal_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.molecular_crystal_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.molecular_crystal_type_data_ptr_get, _pycrysfml.molecular_crystal_type_data_ptr_set)
molecular_crystal_type_swigregister = _pycrysfml.molecular_crystal_type_swigregister
molecular_crystal_type_swigregister(molecular_crystal_type)

class molecule_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, molecule_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, molecule_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_molecule_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_molecule_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.molecule_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.molecule_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.molecule_type_data_ptr_get, _pycrysfml.molecule_type_data_ptr_set)
molecule_type_swigregister = _pycrysfml.molecule_type_swigregister
molecule_type_swigregister(molecule_type)

class msym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msym_oper_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_msym_oper_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_msym_oper_type
    __del__ = lambda self : None;
    def get_msym_oper_phas(self): return _pycrysfml.msym_oper_type_get_msym_oper_phas(self)
    def set_msym_oper_phas(self, *args): return _pycrysfml.msym_oper_type_set_msym_oper_phas(self, *args)
    def get_msym_oper_rot(self, *args): return _pycrysfml.msym_oper_type_get_msym_oper_rot(self, *args)
    def set_msym_oper_rot(self, *args): return _pycrysfml.msym_oper_type_set_msym_oper_rot(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.msym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.msym_oper_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.msym_oper_type_data_ptr_get, _pycrysfml.msym_oper_type_data_ptr_set)
msym_oper_type_swigregister = _pycrysfml.msym_oper_type_swigregister
msym_oper_type_swigregister(msym_oper_type)

class nonatomic_parameter_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonatomic_parameter_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonatomic_parameter_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_nonatomic_parameter_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.nonatomic_parameter_list_type_data_ptr_get, _pycrysfml.nonatomic_parameter_list_type_data_ptr_set)
nonatomic_parameter_list_type_swigregister = _pycrysfml.nonatomic_parameter_list_type_swigregister
nonatomic_parameter_list_type_swigregister(nonatomic_parameter_list_type)

class nonatomic_parameter_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonatomic_parameter_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonatomic_parameter_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_nonatomic_parameter_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.nonatomic_parameter_type_data_ptr_get, _pycrysfml.nonatomic_parameter_type_data_ptr_set)
nonatomic_parameter_type_swigregister = _pycrysfml.nonatomic_parameter_type_swigregister
nonatomic_parameter_type_swigregister(nonatomic_parameter_type)

class ns_space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ns_space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ns_space_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_ns_space_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_ns_space_group_type
    __del__ = lambda self : None;
    def get_ns_space_group_centred(self): return _pycrysfml.ns_space_group_type_get_ns_space_group_centred(self)
    def set_ns_space_group_centred(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_centred(self, *args)
    def get_ns_space_group_numspg(self): return _pycrysfml.ns_space_group_type_get_ns_space_group_numspg(self)
    def set_ns_space_group_numspg(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_numspg(self, *args)
    def get_ns_space_group_crystalsys(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_crystalsys(self, *args)
    def set_ns_space_group_crystalsys(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_crystalsys(self, *args)
    def get_ns_space_group_numlat(self): return _pycrysfml.ns_space_group_type_get_ns_space_group_numlat(self)
    def set_ns_space_group_numlat(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_numlat(self, *args)
    def get_ns_space_group_pg(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_pg(self, *args)
    def set_ns_space_group_pg(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_pg(self, *args)
    def get_ns_space_group_hall(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_hall(self, *args)
    def set_ns_space_group_hall(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_hall(self, *args)
    def get_ns_space_group_info(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_info(self, *args)
    def set_ns_space_group_info(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_info(self, *args)
    def get_ns_space_group_spg_lat(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_lat(self, *args)
    def set_ns_space_group_spg_lat(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_lat(self, *args)
    def get_ns_space_group_laue(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_laue(self, *args)
    def set_ns_space_group_laue(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_laue(self, *args)
    def get_ns_space_group_spg_latsy(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_latsy(self, *args)
    def set_ns_space_group_spg_latsy(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_latsy(self, *args)
    def get_ns_space_group_num_gen(self): return _pycrysfml.ns_space_group_type_get_ns_space_group_num_gen(self)
    def set_ns_space_group_num_gen(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_num_gen(self, *args)
    def get_ns_space_group_bravais(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_bravais(self, *args)
    def set_ns_space_group_bravais(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_bravais(self, *args)
    def get_ns_space_group_sg_setting(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_sg_setting(self, *args)
    def set_ns_space_group_sg_setting(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_sg_setting(self, *args)
    def get_ns_space_group_ghall(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_ghall(self, *args)
    def set_ns_space_group_ghall(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_ghall(self, *args)
    def get_ns_space_group_spg_symb(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_spg_symb(self, *args)
    def set_ns_space_group_spg_symb(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_spg_symb(self, *args)
    def get_ns_space_group_centre_coord(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_centre_coord(self, *args)
    def set_ns_space_group_centre_coord(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_centre_coord(self, *args)
    def get_ns_space_group_centre(self, *args): return _pycrysfml.ns_space_group_type_get_ns_space_group_centre(self, *args)
    def set_ns_space_group_centre(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_centre(self, *args)
    def get_ns_space_group_numops(self): return _pycrysfml.ns_space_group_type_get_ns_space_group_numops(self)
    def set_ns_space_group_numops(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_numops(self, *args)
    def get_ns_space_group_multip(self): return _pycrysfml.ns_space_group_type_get_ns_space_group_multip(self)
    def set_ns_space_group_multip(self, *args): return _pycrysfml.ns_space_group_type_set_ns_space_group_multip(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.ns_space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ns_space_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.ns_space_group_type_data_ptr_get, _pycrysfml.ns_space_group_type_data_ptr_set)
ns_space_group_type_swigregister = _pycrysfml.ns_space_group_type_swigregister
ns_space_group_type_swigregister(ns_space_group_type)

class ns_sym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ns_sym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ns_sym_oper_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_ns_sym_oper_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_ns_sym_oper_type
    __del__ = lambda self : None;
    def get_ns_sym_oper_tr(self, *args): return _pycrysfml.ns_sym_oper_type_get_ns_sym_oper_tr(self, *args)
    def set_ns_sym_oper_tr(self, *args): return _pycrysfml.ns_sym_oper_type_set_ns_sym_oper_tr(self, *args)
    def get_ns_sym_oper_rot(self, *args): return _pycrysfml.ns_sym_oper_type_get_ns_sym_oper_rot(self, *args)
    def set_ns_sym_oper_rot(self, *args): return _pycrysfml.ns_sym_oper_type_set_ns_sym_oper_rot(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.ns_sym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ns_sym_oper_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.ns_sym_oper_type_data_ptr_get, _pycrysfml.ns_sym_oper_type_data_ptr_set)
ns_sym_oper_type_swigregister = _pycrysfml.ns_sym_oper_type_swigregister
ns_sym_oper_type_swigregister(ns_sym_oper_type)

class opt_conditions_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_conditions_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_conditions_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_opt_conditions_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_opt_conditions_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.opt_conditions_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.opt_conditions_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.opt_conditions_type_data_ptr_get, _pycrysfml.opt_conditions_type_data_ptr_set)
opt_conditions_type_swigregister = _pycrysfml.opt_conditions_type_swigregister
opt_conditions_type_swigregister(opt_conditions_type)

class point_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_point_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_point_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.point_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.point_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.point_list_type_data_ptr_get, _pycrysfml.point_list_type_data_ptr_set)
point_list_type_swigregister = _pycrysfml.point_list_type_swigregister
point_list_type_swigregister(point_list_type)

class points_interval_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, points_interval_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, points_interval_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_points_interval_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_points_interval_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.points_interval_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.points_interval_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.points_interval_type_data_ptr_get, _pycrysfml.points_interval_type_data_ptr_set)
points_interval_type_swigregister = _pycrysfml.points_interval_type_swigregister
points_interval_type_swigregister(points_interval_type)

class polar_calc_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_list_type_data_ptr_get, _pycrysfml.polar_calc_list_type_data_ptr_set)
polar_calc_list_type_swigregister = _pycrysfml.polar_calc_list_type_swigregister
polar_calc_list_type_swigregister(polar_calc_list_type)

class polar_calcmulti_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calcmulti_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calcmulti_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calcmulti_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calcmulti_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_list_type_data_ptr_set)
polar_calcmulti_list_type_swigregister = _pycrysfml.polar_calcmulti_list_type_swigregister
polar_calcmulti_list_type_swigregister(polar_calcmulti_list_type)

class polar_calcmulti_svs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calcmulti_svs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calcmulti_svs_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calcmulti_svs_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_svs_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calcmulti_svs_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_set)
polar_calcmulti_svs_list_type_swigregister = _pycrysfml.polar_calcmulti_svs_list_type_swigregister
polar_calcmulti_svs_list_type_swigregister(polar_calcmulti_svs_list_type)

class polar_calc_svs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_svs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_svs_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_svs_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_svs_list_type_data_ptr_get, _pycrysfml.polar_calc_svs_list_type_data_ptr_set)
polar_calc_svs_list_type_swigregister = _pycrysfml.polar_calc_svs_list_type_swigregister
polar_calc_svs_list_type_swigregister(polar_calc_svs_list_type)

class polar_calc_svs_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_svs_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_svs_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_svs_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_svs_type_data_ptr_get, _pycrysfml.polar_calc_svs_type_data_ptr_set)
polar_calc_svs_type_swigregister = _pycrysfml.polar_calc_svs_type_swigregister
polar_calc_svs_type_swigregister(polar_calc_svs_type)

class polar_calc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_type_data_ptr_get, _pycrysfml.polar_calc_type_data_ptr_set)
polar_calc_type_swigregister = _pycrysfml.polar_calc_type_swigregister
polar_calc_type_swigregister(polar_calc_type)

class polar_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_info_type_data_ptr_get, _pycrysfml.polar_info_type_data_ptr_set)
polar_info_type_swigregister = _pycrysfml.polar_info_type_swigregister
polar_info_type_swigregister(polar_info_type)

class polar_obs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obs_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_obs_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obs_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obs_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_obs_list_type_data_ptr_get, _pycrysfml.polar_obs_list_type_data_ptr_set)
polar_obs_list_type_swigregister = _pycrysfml.polar_obs_list_type_swigregister
polar_obs_list_type_swigregister(polar_obs_list_type)

class polar_obsmulti_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obsmulti_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obsmulti_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_obsmulti_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obsmulti_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obsmulti_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obsmulti_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_obsmulti_list_type_data_ptr_get, _pycrysfml.polar_obsmulti_list_type_data_ptr_set)
polar_obsmulti_list_type_swigregister = _pycrysfml.polar_obsmulti_list_type_swigregister
polar_obsmulti_list_type_swigregister(polar_obsmulti_list_type)

class polar_obs_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obs_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obs_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_obs_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obs_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obs_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obs_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_obs_type_data_ptr_get, _pycrysfml.polar_obs_type_data_ptr_set)
polar_obs_type_swigregister = _pycrysfml.polar_obs_type_swigregister
polar_obs_type_swigregister(polar_obs_type)

class powder_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, powder_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, powder_numor_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_powder_numor_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_powder_numor_type
    __del__ = lambda self : None;
    def get_powder_numor_nbang(self): return _pycrysfml.powder_numor_type_get_powder_numor_nbang(self)
    def set_powder_numor_nbang(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_nbang(self, *args)
    def get_powder_numor_manip(self): return _pycrysfml.powder_numor_type_get_powder_numor_manip(self)
    def set_powder_numor_manip(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_manip(self, *args)
    def get_powder_numor_icalc(self): return _pycrysfml.powder_numor_type_get_powder_numor_icalc(self)
    def set_powder_numor_icalc(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_icalc(self, *args)
    def get_powder_numor_monitor(self): return _pycrysfml.powder_numor_type_get_powder_numor_monitor(self)
    def set_powder_numor_monitor(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_monitor(self, *args)
    def get_powder_numor_nbdata(self): return _pycrysfml.powder_numor_type_get_powder_numor_nbdata(self)
    def set_powder_numor_nbdata(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_nbdata(self, *args)
    def get_powder_numor_title(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_title(self, *args)
    def set_powder_numor_title(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_title(self, *args)
    def get_powder_numor_numor(self): return _pycrysfml.powder_numor_type_get_powder_numor_numor(self)
    def set_powder_numor_numor(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_numor(self, *args)
    def get_powder_numor_instrm(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_instrm(self, *args)
    def set_powder_numor_instrm(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_instrm(self, *args)
    def get_powder_numor_wave(self): return _pycrysfml.powder_numor_type_get_powder_numor_wave(self)
    def set_powder_numor_wave(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_wave(self, *args)
    def get_powder_numor_header(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_header(self, *args)
    def set_powder_numor_header(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_header(self, *args)
    def get_powder_numor_scantype(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_scantype(self, *args)
    def set_powder_numor_scantype(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_scantype(self, *args)
    def get_powder_numor_icdesc(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_icdesc(self, *args)
    def set_powder_numor_icdesc(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_icdesc(self, *args)
    def get_powder_numor_angles(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_angles(self, *args)
    def set_powder_numor_angles(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_angles(self, *args)
    def get_powder_numor_time(self): return _pycrysfml.powder_numor_type_get_powder_numor_time(self)
    def set_powder_numor_time(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_time(self, *args)
    def get_powder_numor_nframes(self): return _pycrysfml.powder_numor_type_get_powder_numor_nframes(self)
    def set_powder_numor_nframes(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_nframes(self, *args)
    def get_powder_numor_conditions(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_conditions(self, *args)
    def set_powder_numor_conditions(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_conditions(self, *args)
    def get_powder_numor_scans(self, *args): return _pycrysfml.powder_numor_type_get_powder_numor_scans(self, *args)
    def set_powder_numor_scans(self, *args): return _pycrysfml.powder_numor_type_set_powder_numor_scans(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.powder_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.powder_numor_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.powder_numor_type_data_ptr_get, _pycrysfml.powder_numor_type_data_ptr_set)
powder_numor_type_swigregister = _pycrysfml.powder_numor_type_swigregister
powder_numor_type_swigregister(powder_numor_type)

class psd_val_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, psd_val_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, psd_val_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_psd_val_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_psd_val_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.psd_val_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.psd_val_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.psd_val_type_data_ptr_get, _pycrysfml.psd_val_type_data_ptr_set)
psd_val_type_swigregister = _pycrysfml.psd_val_type_swigregister
psd_val_type_swigregister(psd_val_type)

class reflct_array_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflct_array_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflct_array_list, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_reflct_array_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflct_array_list
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflct_array_list_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflct_array_list_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.reflct_array_list_data_ptr_get, _pycrysfml.reflct_array_list_data_ptr_set)
reflct_array_list_swigregister = _pycrysfml.reflct_array_list_swigregister
reflct_array_list_swigregister(reflct_array_list)

class reflection_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflection_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflection_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_reflection_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflection_list_type
    __del__ = lambda self : None;
    def get_reflection_list_element(self, *args): return _pycrysfml.reflection_list_type_get_reflection_list_element(self, *args)
    def set_reflection_list_element(self, *args): return _pycrysfml.reflection_list_type_set_reflection_list_element(self, *args)
    def get_reflection_list_nref(self): return _pycrysfml.reflection_list_type_get_reflection_list_nref(self)
    def set_reflection_list_nref(self, *args): return _pycrysfml.reflection_list_type_set_reflection_list_nref(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflection_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflection_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.reflection_list_type_data_ptr_get, _pycrysfml.reflection_list_type_data_ptr_set)
reflection_list_type_swigregister = _pycrysfml.reflection_list_type_swigregister
reflection_list_type_swigregister(reflection_list_type)

class reflection_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflection_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflection_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_reflection_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflection_type
    __del__ = lambda self : None;
    def get_reflection_a(self): return _pycrysfml.reflection_type_get_reflection_a(self)
    def set_reflection_a(self, *args): return _pycrysfml.reflection_type_set_reflection_a(self, *args)
    def get_reflection_aa(self): return _pycrysfml.reflection_type_get_reflection_aa(self)
    def set_reflection_aa(self, *args): return _pycrysfml.reflection_type_set_reflection_aa(self, *args)
    def get_reflection_b(self): return _pycrysfml.reflection_type_get_reflection_b(self)
    def set_reflection_b(self, *args): return _pycrysfml.reflection_type_set_reflection_b(self, *args)
    def get_reflection_bb(self): return _pycrysfml.reflection_type_get_reflection_bb(self)
    def set_reflection_bb(self, *args): return _pycrysfml.reflection_type_set_reflection_bb(self, *args)
    def get_reflection_h(self, *args): return _pycrysfml.reflection_type_get_reflection_h(self, *args)
    def set_reflection_h(self, *args): return _pycrysfml.reflection_type_set_reflection_h(self, *args)
    def get_reflection_sfo(self): return _pycrysfml.reflection_type_get_reflection_sfo(self)
    def set_reflection_sfo(self, *args): return _pycrysfml.reflection_type_set_reflection_sfo(self, *args)
    def get_reflection_s(self): return _pycrysfml.reflection_type_get_reflection_s(self)
    def set_reflection_s(self, *args): return _pycrysfml.reflection_type_set_reflection_s(self, *args)
    def get_reflection_fc(self): return _pycrysfml.reflection_type_get_reflection_fc(self)
    def set_reflection_fc(self, *args): return _pycrysfml.reflection_type_set_reflection_fc(self, *args)
    def get_reflection_w(self): return _pycrysfml.reflection_type_get_reflection_w(self)
    def set_reflection_w(self, *args): return _pycrysfml.reflection_type_set_reflection_w(self, *args)
    def get_reflection_phase(self): return _pycrysfml.reflection_type_get_reflection_phase(self)
    def set_reflection_phase(self, *args): return _pycrysfml.reflection_type_set_reflection_phase(self, *args)
    def get_reflection_mult(self): return _pycrysfml.reflection_type_get_reflection_mult(self)
    def set_reflection_mult(self, *args): return _pycrysfml.reflection_type_set_reflection_mult(self, *args)
    def get_reflection_fo(self): return _pycrysfml.reflection_type_get_reflection_fo(self)
    def set_reflection_fo(self, *args): return _pycrysfml.reflection_type_set_reflection_fo(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflection_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflection_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.reflection_type_data_ptr_get, _pycrysfml.reflection_type_data_ptr_set)
reflection_type_swigregister = _pycrysfml.reflection_type_swigregister
reflection_type_swigregister(reflection_type)

class reflect_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflect_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflect_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_reflect_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflect_type
    __del__ = lambda self : None;
    def get_reflect_h(self, *args): return _pycrysfml.reflect_type_get_reflect_h(self, *args)
    def set_reflect_h(self, *args): return _pycrysfml.reflect_type_set_reflect_h(self, *args)
    def get_reflect_s(self): return _pycrysfml.reflect_type_get_reflect_s(self)
    def set_reflect_s(self, *args): return _pycrysfml.reflect_type_set_reflect_s(self, *args)
    def get_reflect_mult(self): return _pycrysfml.reflect_type_get_reflect_mult(self)
    def set_reflect_mult(self, *args): return _pycrysfml.reflect_type_set_reflect_mult(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflect_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflect_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.reflect_type_data_ptr_get, _pycrysfml.reflect_type_data_ptr_set)
reflect_type_swigregister = _pycrysfml.reflect_type_swigregister
reflect_type_swigregister(reflect_type)

class sbvs_par_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbvs_par_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbvs_par_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sbvs_par_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sbvs_par_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sbvs_par_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sbvs_par_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sbvs_par_type_data_ptr_get, _pycrysfml.sbvs_par_type_data_ptr_set)
sbvs_par_type_swigregister = _pycrysfml.sbvs_par_type_swigregister
sbvs_par_type_swigregister(sbvs_par_type)

class scattering_species_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scattering_species_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scattering_species_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_scattering_species_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_scattering_species_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.scattering_species_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.scattering_species_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.scattering_species_type_data_ptr_get, _pycrysfml.scattering_species_type_data_ptr_set)
scattering_species_type_swigregister = _pycrysfml.scattering_species_type_swigregister
scattering_species_type_swigregister(scattering_species_type)

class space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, space_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_space_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_space_group_type
    __del__ = lambda self : None;
    def set_atom_equiv_list(self, *args): return _pycrysfml.space_group_type_set_atom_equiv_list(self, *args)
    def set_formal_charges(self, *args): return _pycrysfml.space_group_type_set_formal_charges(self, *args)
    def set_new_asymunit(self, *args): return _pycrysfml.space_group_type_set_new_asymunit(self, *args)
    def set_orbits_inlist(self, *args): return _pycrysfml.space_group_type_set_orbits_inlist(self, *args)
    def get_hallsymb_from_gener(self, spaceh=None): return _pycrysfml.space_group_type_get_hallsymb_from_gener(self, spaceh)
    def get_laue_pg(self, *args): return _pycrysfml.space_group_type_get_laue_pg(self, *args)
    def get_space_group_centred(self): return _pycrysfml.space_group_type_get_space_group_centred(self)
    def set_space_group_centred(self, *args): return _pycrysfml.space_group_type_set_space_group_centred(self, *args)
    def get_space_group_centre_coord(self, *args): return _pycrysfml.space_group_type_get_space_group_centre_coord(self, *args)
    def set_space_group_centre_coord(self, *args): return _pycrysfml.space_group_type_set_space_group_centre_coord(self, *args)
    def get_space_group_hexa(self): return _pycrysfml.space_group_type_get_space_group_hexa(self)
    def set_space_group_hexa(self, *args): return _pycrysfml.space_group_type_set_space_group_hexa(self, *args)
    def get_space_group_numspg(self): return _pycrysfml.space_group_type_get_space_group_numspg(self)
    def set_space_group_numspg(self, *args): return _pycrysfml.space_group_type_set_space_group_numspg(self, *args)
    def get_space_group_crystalsys(self, *args): return _pycrysfml.space_group_type_get_space_group_crystalsys(self, *args)
    def set_space_group_crystalsys(self, *args): return _pycrysfml.space_group_type_set_space_group_crystalsys(self, *args)
    def get_space_group_numlat(self): return _pycrysfml.space_group_type_get_space_group_numlat(self)
    def set_space_group_numlat(self, *args): return _pycrysfml.space_group_type_set_space_group_numlat(self, *args)
    def get_space_group_pg(self, *args): return _pycrysfml.space_group_type_get_space_group_pg(self, *args)
    def set_space_group_pg(self, *args): return _pycrysfml.space_group_type_set_space_group_pg(self, *args)
    def get_space_group_wyckoff(self, *args): return _pycrysfml.space_group_type_get_space_group_wyckoff(self, *args)
    def set_space_group_wyckoff(self, *args): return _pycrysfml.space_group_type_set_space_group_wyckoff(self, *args)
    def get_space_group_hall(self, *args): return _pycrysfml.space_group_type_get_space_group_hall(self, *args)
    def set_space_group_hall(self, *args): return _pycrysfml.space_group_type_set_space_group_hall(self, *args)
    def get_space_group_info(self, *args): return _pycrysfml.space_group_type_get_space_group_info(self, *args)
    def set_space_group_info(self, *args): return _pycrysfml.space_group_type_set_space_group_info(self, *args)
    def get_space_group_spg_lat(self, *args): return _pycrysfml.space_group_type_get_space_group_spg_lat(self, *args)
    def set_space_group_spg_lat(self, *args): return _pycrysfml.space_group_type_set_space_group_spg_lat(self, *args)
    def get_space_group_laue(self, *args): return _pycrysfml.space_group_type_get_space_group_laue(self, *args)
    def set_space_group_laue(self, *args): return _pycrysfml.space_group_type_set_space_group_laue(self, *args)
    def get_space_group_spg_latsy(self, *args): return _pycrysfml.space_group_type_get_space_group_spg_latsy(self, *args)
    def set_space_group_spg_latsy(self, *args): return _pycrysfml.space_group_type_set_space_group_spg_latsy(self, *args)
    def get_space_group_num_gen(self): return _pycrysfml.space_group_type_get_space_group_num_gen(self)
    def set_space_group_num_gen(self, *args): return _pycrysfml.space_group_type_set_space_group_num_gen(self, *args)
    def get_space_group_bravais(self, *args): return _pycrysfml.space_group_type_get_space_group_bravais(self, *args)
    def set_space_group_bravais(self, *args): return _pycrysfml.space_group_type_set_space_group_bravais(self, *args)
    def get_space_group_sg_setting(self, *args): return _pycrysfml.space_group_type_get_space_group_sg_setting(self, *args)
    def set_space_group_sg_setting(self, *args): return _pycrysfml.space_group_type_set_space_group_sg_setting(self, *args)
    def get_space_group_ghall(self, *args): return _pycrysfml.space_group_type_get_space_group_ghall(self, *args)
    def set_space_group_ghall(self, *args): return _pycrysfml.space_group_type_set_space_group_ghall(self, *args)
    def get_space_group_spg_symb(self, *args): return _pycrysfml.space_group_type_get_space_group_spg_symb(self, *args)
    def set_space_group_spg_symb(self, *args): return _pycrysfml.space_group_type_set_space_group_spg_symb(self, *args)
    def get_space_group_centre(self, *args): return _pycrysfml.space_group_type_get_space_group_centre(self, *args)
    def set_space_group_centre(self, *args): return _pycrysfml.space_group_type_set_space_group_centre(self, *args)
    def get_space_group_numops(self): return _pycrysfml.space_group_type_get_space_group_numops(self)
    def set_space_group_numops(self, *args): return _pycrysfml.space_group_type_set_space_group_numops(self, *args)
    def get_space_group_r_asym_unit(self, *args): return _pycrysfml.space_group_type_get_space_group_r_asym_unit(self, *args)
    def set_space_group_r_asym_unit(self, *args): return _pycrysfml.space_group_type_set_space_group_r_asym_unit(self, *args)
    def get_space_group_multip(self): return _pycrysfml.space_group_type_get_space_group_multip(self)
    def set_space_group_multip(self, *args): return _pycrysfml.space_group_type_set_space_group_multip(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.space_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.space_group_type_data_ptr_get, _pycrysfml.space_group_type_data_ptr_set)
space_group_type_swigregister = _pycrysfml.space_group_type_swigregister
space_group_type_swigregister(space_group_type)

class spgr_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spgr_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spgr_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_spgr_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_spgr_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.spgr_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.spgr_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.spgr_info_type_data_ptr_get, _pycrysfml.spgr_info_type_data_ptr_set)
spgr_info_type_swigregister = _pycrysfml.spgr_info_type_swigregister
spgr_info_type_swigregister(spgr_info_type)


def getPowderNumor_title(*args):
  return _pycrysfml.getPowderNumor_title(*args)
getPowderNumor_title = _pycrysfml.getPowderNumor_title

def getPowderNumor_instrm(*args):
  return _pycrysfml.getPowderNumor_instrm(*args)
getPowderNumor_instrm = _pycrysfml.getPowderNumor_instrm

def getPowderNumor_header(*args):
  return _pycrysfml.getPowderNumor_header(*args)
getPowderNumor_header = _pycrysfml.getPowderNumor_header

def getPowderNumor_scantype(*args):
  return _pycrysfml.getPowderNumor_scantype(*args)
getPowderNumor_scantype = _pycrysfml.getPowderNumor_scantype

def getCrystalCell_carttype(*args):
  return _pycrysfml.getCrystalCell_carttype(*args)
getCrystalCell_carttype = _pycrysfml.getCrystalCell_carttype

def getAtomEquiv_chemsymb(*args):
  return _pycrysfml.getAtomEquiv_chemsymb(*args)
getAtomEquiv_chemsymb = _pycrysfml.getAtomEquiv_chemsymb

def getMagneticSpaceGroup_bns_symbol(*args):
  return _pycrysfml.getMagneticSpaceGroup_bns_symbol(*args)
getMagneticSpaceGroup_bns_symbol = _pycrysfml.getMagneticSpaceGroup_bns_symbol

def getMagneticSpaceGroup_bns_number(*args):
  return _pycrysfml.getMagneticSpaceGroup_bns_number(*args)
getMagneticSpaceGroup_bns_number = _pycrysfml.getMagneticSpaceGroup_bns_number

def getMagneticSpaceGroup_crystalsys(*args):
  return _pycrysfml.getMagneticSpaceGroup_crystalsys(*args)
getMagneticSpaceGroup_crystalsys = _pycrysfml.getMagneticSpaceGroup_crystalsys

def getMagneticSpaceGroup_spg_lat(*args):
  return _pycrysfml.getMagneticSpaceGroup_spg_lat(*args)
getMagneticSpaceGroup_spg_lat = _pycrysfml.getMagneticSpaceGroup_spg_lat

def getMagneticSpaceGroup_og_number(*args):
  return _pycrysfml.getMagneticSpaceGroup_og_number(*args)
getMagneticSpaceGroup_og_number = _pycrysfml.getMagneticSpaceGroup_og_number

def getMagneticSpaceGroup_spg_latsy(*args):
  return _pycrysfml.getMagneticSpaceGroup_spg_latsy(*args)
getMagneticSpaceGroup_spg_latsy = _pycrysfml.getMagneticSpaceGroup_spg_latsy

def getMagneticSpaceGroup_parent_spg(*args):
  return _pycrysfml.getMagneticSpaceGroup_parent_spg(*args)
getMagneticSpaceGroup_parent_spg = _pycrysfml.getMagneticSpaceGroup_parent_spg

def getMagneticSpaceGroup_og_symbol(*args):
  return _pycrysfml.getMagneticSpaceGroup_og_symbol(*args)
getMagneticSpaceGroup_og_symbol = _pycrysfml.getMagneticSpaceGroup_og_symbol

def getMagneticSpaceGroup_centre(*args):
  return _pycrysfml.getMagneticSpaceGroup_centre(*args)
getMagneticSpaceGroup_centre = _pycrysfml.getMagneticSpaceGroup_centre

def getMagneticSpaceGroup_trn_to_standard(*args):
  return _pycrysfml.getMagneticSpaceGroup_trn_to_standard(*args)
getMagneticSpaceGroup_trn_to_standard = _pycrysfml.getMagneticSpaceGroup_trn_to_standard

def getMagneticSpaceGroup_trn_from_parent(*args):
  return _pycrysfml.getMagneticSpaceGroup_trn_from_parent(*args)
getMagneticSpaceGroup_trn_from_parent = _pycrysfml.getMagneticSpaceGroup_trn_from_parent

def getJobInfo_title(*args):
  return _pycrysfml.getJobInfo_title(*args)
getJobInfo_title = _pycrysfml.getJobInfo_title

def getMagsymmK_latt(*args):
  return _pycrysfml.getMagsymmK_latt(*args)
getMagsymmK_latt = _pycrysfml.getMagsymmK_latt

def getMagsymmK_bns_symbol(*args):
  return _pycrysfml.getMagsymmK_bns_symbol(*args)
getMagsymmK_bns_symbol = _pycrysfml.getMagsymmK_bns_symbol

def getMagsymmK_bns_number(*args):
  return _pycrysfml.getMagsymmK_bns_number(*args)
getMagsymmK_bns_number = _pycrysfml.getMagsymmK_bns_number

def getMagsymmK_magmodel(*args):
  return _pycrysfml.getMagsymmK_magmodel(*args)
getMagsymmK_magmodel = _pycrysfml.getMagsymmK_magmodel

def getMagsymmK_sk_type(*args):
  return _pycrysfml.getMagsymmK_sk_type(*args)
getMagsymmK_sk_type = _pycrysfml.getMagsymmK_sk_type

def getMagsymmK_og_number(*args):
  return _pycrysfml.getMagsymmK_og_number(*args)
getMagsymmK_og_number = _pycrysfml.getMagsymmK_og_number

def getMagsymmK_parent_spg(*args):
  return _pycrysfml.getMagsymmK_parent_spg(*args)
getMagsymmK_parent_spg = _pycrysfml.getMagsymmK_parent_spg

def getMagsymmK_og_symbol(*args):
  return _pycrysfml.getMagsymmK_og_symbol(*args)
getMagsymmK_og_symbol = _pycrysfml.getMagsymmK_og_symbol

def getMatom_utype(*args):
  return _pycrysfml.getMatom_utype(*args)
getMatom_utype = _pycrysfml.getMatom_utype

def getMatom_sfacsymb(*args):
  return _pycrysfml.getMatom_sfacsymb(*args)
getMatom_sfacsymb = _pycrysfml.getMatom_sfacsymb

def getMatom_lab(*args):
  return _pycrysfml.getMatom_lab(*args)
getMatom_lab = _pycrysfml.getMatom_lab

def getMatom_wyck(*args):
  return _pycrysfml.getMatom_wyck(*args)
getMatom_wyck = _pycrysfml.getMatom_wyck

def getMatom_chemsymb(*args):
  return _pycrysfml.getMatom_chemsymb(*args)
getMatom_chemsymb = _pycrysfml.getMatom_chemsymb

def getMatom_thtype(*args):
  return _pycrysfml.getMatom_thtype(*args)
getMatom_thtype = _pycrysfml.getMatom_thtype

def getMatom_atminfo(*args):
  return _pycrysfml.getMatom_atminfo(*args)
getMatom_atminfo = _pycrysfml.getMatom_atminfo

def getWyckPos_str_orig(*args):
  return _pycrysfml.getWyckPos_str_orig(*args)
getWyckPos_str_orig = _pycrysfml.getWyckPos_str_orig

def getWyckPos_site(*args):
  return _pycrysfml.getWyckPos_site(*args)
getWyckPos_site = _pycrysfml.getWyckPos_site

def getAtom_utype(*args):
  return _pycrysfml.getAtom_utype(*args)
getAtom_utype = _pycrysfml.getAtom_utype

def getAtom_sfacsymb(*args):
  return _pycrysfml.getAtom_sfacsymb(*args)
getAtom_sfacsymb = _pycrysfml.getAtom_sfacsymb

def getAtom_lab(*args):
  return _pycrysfml.getAtom_lab(*args)
getAtom_lab = _pycrysfml.getAtom_lab

def getAtom_wyck(*args):
  return _pycrysfml.getAtom_wyck(*args)
getAtom_wyck = _pycrysfml.getAtom_wyck

def getAtom_chemsymb(*args):
  return _pycrysfml.getAtom_chemsymb(*args)
getAtom_chemsymb = _pycrysfml.getAtom_chemsymb

def getAtom_thtype(*args):
  return _pycrysfml.getAtom_thtype(*args)
getAtom_thtype = _pycrysfml.getAtom_thtype

def getAtom_atminfo(*args):
  return _pycrysfml.getAtom_atminfo(*args)
getAtom_atminfo = _pycrysfml.getAtom_atminfo

def getMagneticGroup_shubnikov(*args):
  return _pycrysfml.getMagneticGroup_shubnikov(*args)
getMagneticGroup_shubnikov = _pycrysfml.getMagneticGroup_shubnikov

def getDiffractionPattern_instr(*args):
  return _pycrysfml.getDiffractionPattern_instr(*args)
getDiffractionPattern_instr = _pycrysfml.getDiffractionPattern_instr

def getDiffractionPattern_yax_text(*args):
  return _pycrysfml.getDiffractionPattern_yax_text(*args)
getDiffractionPattern_yax_text = _pycrysfml.getDiffractionPattern_yax_text

def getDiffractionPattern_diff_kind(*args):
  return _pycrysfml.getDiffractionPattern_diff_kind(*args)
getDiffractionPattern_diff_kind = _pycrysfml.getDiffractionPattern_diff_kind

def getDiffractionPattern_filepath(*args):
  return _pycrysfml.getDiffractionPattern_filepath(*args)
getDiffractionPattern_filepath = _pycrysfml.getDiffractionPattern_filepath

def getDiffractionPattern_title(*args):
  return _pycrysfml.getDiffractionPattern_title(*args)
getDiffractionPattern_title = _pycrysfml.getDiffractionPattern_title

def getDiffractionPattern_filename(*args):
  return _pycrysfml.getDiffractionPattern_filename(*args)
getDiffractionPattern_filename = _pycrysfml.getDiffractionPattern_filename

def getDiffractionPattern_scat_var(*args):
  return _pycrysfml.getDiffractionPattern_scat_var(*args)
getDiffractionPattern_scat_var = _pycrysfml.getDiffractionPattern_scat_var

def getDiffractionPattern_xax_text(*args):
  return _pycrysfml.getDiffractionPattern_xax_text(*args)
getDiffractionPattern_xax_text = _pycrysfml.getDiffractionPattern_xax_text

def getNsSpaceGroup_crystalsys(*args):
  return _pycrysfml.getNsSpaceGroup_crystalsys(*args)
getNsSpaceGroup_crystalsys = _pycrysfml.getNsSpaceGroup_crystalsys

def getNsSpaceGroup_pg(*args):
  return _pycrysfml.getNsSpaceGroup_pg(*args)
getNsSpaceGroup_pg = _pycrysfml.getNsSpaceGroup_pg

def getNsSpaceGroup_hall(*args):
  return _pycrysfml.getNsSpaceGroup_hall(*args)
getNsSpaceGroup_hall = _pycrysfml.getNsSpaceGroup_hall

def getNsSpaceGroup_info(*args):
  return _pycrysfml.getNsSpaceGroup_info(*args)
getNsSpaceGroup_info = _pycrysfml.getNsSpaceGroup_info

def getNsSpaceGroup_spg_lat(*args):
  return _pycrysfml.getNsSpaceGroup_spg_lat(*args)
getNsSpaceGroup_spg_lat = _pycrysfml.getNsSpaceGroup_spg_lat

def getNsSpaceGroup_laue(*args):
  return _pycrysfml.getNsSpaceGroup_laue(*args)
getNsSpaceGroup_laue = _pycrysfml.getNsSpaceGroup_laue

def getNsSpaceGroup_spg_latsy(*args):
  return _pycrysfml.getNsSpaceGroup_spg_latsy(*args)
getNsSpaceGroup_spg_latsy = _pycrysfml.getNsSpaceGroup_spg_latsy

def getNsSpaceGroup_bravais(*args):
  return _pycrysfml.getNsSpaceGroup_bravais(*args)
getNsSpaceGroup_bravais = _pycrysfml.getNsSpaceGroup_bravais

def getNsSpaceGroup_sg_setting(*args):
  return _pycrysfml.getNsSpaceGroup_sg_setting(*args)
getNsSpaceGroup_sg_setting = _pycrysfml.getNsSpaceGroup_sg_setting

def getNsSpaceGroup_ghall(*args):
  return _pycrysfml.getNsSpaceGroup_ghall(*args)
getNsSpaceGroup_ghall = _pycrysfml.getNsSpaceGroup_ghall

def getNsSpaceGroup_spg_symb(*args):
  return _pycrysfml.getNsSpaceGroup_spg_symb(*args)
getNsSpaceGroup_spg_symb = _pycrysfml.getNsSpaceGroup_spg_symb

def getNsSpaceGroup_centre(*args):
  return _pycrysfml.getNsSpaceGroup_centre(*args)
getNsSpaceGroup_centre = _pycrysfml.getNsSpaceGroup_centre

def getSpaceGroup_crystalsys(*args):
  return _pycrysfml.getSpaceGroup_crystalsys(*args)
getSpaceGroup_crystalsys = _pycrysfml.getSpaceGroup_crystalsys

def getSpaceGroup_pg(*args):
  return _pycrysfml.getSpaceGroup_pg(*args)
getSpaceGroup_pg = _pycrysfml.getSpaceGroup_pg

def getSpaceGroup_hall(*args):
  return _pycrysfml.getSpaceGroup_hall(*args)
getSpaceGroup_hall = _pycrysfml.getSpaceGroup_hall

def getSpaceGroup_info(*args):
  return _pycrysfml.getSpaceGroup_info(*args)
getSpaceGroup_info = _pycrysfml.getSpaceGroup_info

def getSpaceGroup_spg_lat(*args):
  return _pycrysfml.getSpaceGroup_spg_lat(*args)
getSpaceGroup_spg_lat = _pycrysfml.getSpaceGroup_spg_lat

def getSpaceGroup_laue(*args):
  return _pycrysfml.getSpaceGroup_laue(*args)
getSpaceGroup_laue = _pycrysfml.getSpaceGroup_laue

def getSpaceGroup_spg_latsy(*args):
  return _pycrysfml.getSpaceGroup_spg_latsy(*args)
getSpaceGroup_spg_latsy = _pycrysfml.getSpaceGroup_spg_latsy

def getSpaceGroup_bravais(*args):
  return _pycrysfml.getSpaceGroup_bravais(*args)
getSpaceGroup_bravais = _pycrysfml.getSpaceGroup_bravais

def getSpaceGroup_sg_setting(*args):
  return _pycrysfml.getSpaceGroup_sg_setting(*args)
getSpaceGroup_sg_setting = _pycrysfml.getSpaceGroup_sg_setting

def getSpaceGroup_ghall(*args):
  return _pycrysfml.getSpaceGroup_ghall(*args)
getSpaceGroup_ghall = _pycrysfml.getSpaceGroup_ghall

def getSpaceGroup_spg_symb(*args):
  return _pycrysfml.getSpaceGroup_spg_symb(*args)
getSpaceGroup_spg_symb = _pycrysfml.getSpaceGroup_spg_symb

def getSpaceGroup_centre(*args):
  return _pycrysfml.getSpaceGroup_centre(*args)
getSpaceGroup_centre = _pycrysfml.getSpaceGroup_centre
class sxd_val_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxd_val_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxd_val_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sxd_val_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxd_val_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxd_val_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxd_val_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sxd_val_type_data_ptr_get, _pycrysfml.sxd_val_type_data_ptr_set)
sxd_val_type_swigregister = _pycrysfml.sxd_val_type_swigregister
sxd_val_type_swigregister(sxd_val_type)

class sxtal_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxtal_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxtal_numor_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sxtal_numor_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxtal_numor_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxtal_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxtal_numor_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sxtal_numor_type_data_ptr_get, _pycrysfml.sxtal_numor_type_data_ptr_set)
sxtal_numor_type_swigregister = _pycrysfml.sxtal_numor_type_swigregister
sxtal_numor_type_swigregister(sxtal_numor_type)

class sxtal_orient_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxtal_orient_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxtal_orient_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sxtal_orient_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxtal_orient_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxtal_orient_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxtal_orient_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sxtal_orient_type_data_ptr_get, _pycrysfml.sxtal_orient_type_data_ptr_set)
sxtal_orient_type_swigregister = _pycrysfml.sxtal_orient_type_swigregister
sxtal_orient_type_swigregister(sxtal_orient_type)

class sym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sym_oper_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sym_oper_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sym_oper_type
    __del__ = lambda self : None;
    def get_sym_oper_tr(self, *args): return _pycrysfml.sym_oper_type_get_sym_oper_tr(self, *args)
    def set_sym_oper_tr(self, *args): return _pycrysfml.sym_oper_type_set_sym_oper_tr(self, *args)
    def get_sym_oper_rot(self, *args): return _pycrysfml.sym_oper_type_get_sym_oper_rot(self, *args)
    def set_sym_oper_rot(self, *args): return _pycrysfml.sym_oper_type_set_sym_oper_rot(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.sym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sym_oper_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sym_oper_type_data_ptr_get, _pycrysfml.sym_oper_type_data_ptr_set)
sym_oper_type_swigregister = _pycrysfml.sym_oper_type_swigregister
sym_oper_type_swigregister(sym_oper_type)

class table_equiv_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_equiv_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_equiv_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_table_equiv_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_table_equiv_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.table_equiv_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.table_equiv_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.table_equiv_type_data_ptr_get, _pycrysfml.table_equiv_type_data_ptr_set)
table_equiv_type_swigregister = _pycrysfml.table_equiv_type_swigregister
table_equiv_type_swigregister(table_equiv_type)

class torsion_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, torsion_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, torsion_restraint_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_torsion_restraint_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_torsion_restraint_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.torsion_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.torsion_restraint_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.torsion_restraint_type_data_ptr_get, _pycrysfml.torsion_restraint_type_data_ptr_set)
torsion_restraint_type_swigregister = _pycrysfml.torsion_restraint_type_swigregister
torsion_restraint_type_swigregister(torsion_restraint_type)

class twin_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twin_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twin_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_twin_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_twin_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.twin_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.twin_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.twin_type_data_ptr_get, _pycrysfml.twin_type_data_ptr_set)
twin_type_swigregister = _pycrysfml.twin_type_swigregister
twin_type_swigregister(twin_type)

class twofold_axes_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twofold_axes_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twofold_axes_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_twofold_axes_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_twofold_axes_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.twofold_axes_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.twofold_axes_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.twofold_axes_type_data_ptr_get, _pycrysfml.twofold_axes_type_data_ptr_set)
twofold_axes_type_swigregister = _pycrysfml.twofold_axes_type_swigregister
twofold_axes_type_swigregister(twofold_axes_type)

class wyck_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyck_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyck_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_wyck_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyck_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyck_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyck_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.wyck_info_type_data_ptr_get, _pycrysfml.wyck_info_type_data_ptr_set)
wyck_info_type_swigregister = _pycrysfml.wyck_info_type_swigregister
wyck_info_type_swigregister(wyck_info_type)

class wyckoff_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyckoff_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyckoff_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_wyckoff_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyckoff_type
    __del__ = lambda self : None;
    def get_wyckoff_num_orbit(self): return _pycrysfml.wyckoff_type_get_wyckoff_num_orbit(self)
    def set_wyckoff_num_orbit(self, *args): return _pycrysfml.wyckoff_type_set_wyckoff_num_orbit(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyckoff_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyckoff_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.wyckoff_type_data_ptr_get, _pycrysfml.wyckoff_type_data_ptr_set)
wyckoff_type_swigregister = _pycrysfml.wyckoff_type_swigregister
wyckoff_type_swigregister(wyckoff_type)

class wyck_pos_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyck_pos_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyck_pos_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_wyck_pos_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyck_pos_type
    __del__ = lambda self : None;
    def get_wyck_pos_norb(self): return _pycrysfml.wyck_pos_type_get_wyck_pos_norb(self)
    def set_wyck_pos_norb(self, *args): return _pycrysfml.wyck_pos_type_set_wyck_pos_norb(self, *args)
    def get_wyck_pos_str_orig(self, *args): return _pycrysfml.wyck_pos_type_get_wyck_pos_str_orig(self, *args)
    def set_wyck_pos_str_orig(self, *args): return _pycrysfml.wyck_pos_type_set_wyck_pos_str_orig(self, *args)
    def get_wyck_pos_multp(self): return _pycrysfml.wyck_pos_type_get_wyck_pos_multp(self)
    def set_wyck_pos_multp(self, *args): return _pycrysfml.wyck_pos_type_set_wyck_pos_multp(self, *args)
    def get_wyck_pos_site(self, *args): return _pycrysfml.wyck_pos_type_get_wyck_pos_site(self, *args)
    def set_wyck_pos_site(self, *args): return _pycrysfml.wyck_pos_type_set_wyck_pos_site(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyck_pos_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyck_pos_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.wyck_pos_type_data_ptr_get, _pycrysfml.wyck_pos_type_data_ptr_set)
wyck_pos_type_swigregister = _pycrysfml.wyck_pos_type_swigregister
wyck_pos_type_swigregister(wyck_pos_type)

class xray_form_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xray_form_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xray_form_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_xray_form_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_xray_form_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.xray_form_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.xray_form_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.xray_form_type_data_ptr_get, _pycrysfml.xray_form_type_data_ptr_set)
xray_form_type_swigregister = _pycrysfml.xray_form_type_swigregister
xray_form_type_swigregister(xray_form_type)

class xray_wavelength_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xray_wavelength_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xray_wavelength_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_xray_wavelength_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_xray_wavelength_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.xray_wavelength_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.xray_wavelength_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.xray_wavelength_type_data_ptr_get, _pycrysfml.xray_wavelength_type_data_ptr_set)
xray_wavelength_type_swigregister = _pycrysfml.xray_wavelength_type_swigregister
xray_wavelength_type_swigregister(xray_wavelength_type)

class zone_axis_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, zone_axis_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, zone_axis_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_zone_axis_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_zone_axis_type
    __del__ = lambda self : None;
    def get_zone_axis_nlayer(self): return _pycrysfml.zone_axis_type_get_zone_axis_nlayer(self)
    def set_zone_axis_nlayer(self, *args): return _pycrysfml.zone_axis_type_set_zone_axis_nlayer(self, *args)
    def get_zone_axis_rx(self, *args): return _pycrysfml.zone_axis_type_get_zone_axis_rx(self, *args)
    def set_zone_axis_rx(self, *args): return _pycrysfml.zone_axis_type_set_zone_axis_rx(self, *args)
    def get_zone_axis_ry(self, *args): return _pycrysfml.zone_axis_type_get_zone_axis_ry(self, *args)
    def set_zone_axis_ry(self, *args): return _pycrysfml.zone_axis_type_set_zone_axis_ry(self, *args)
    def get_zone_axis_uvw(self, *args): return _pycrysfml.zone_axis_type_get_zone_axis_uvw(self, *args)
    def set_zone_axis_uvw(self, *args): return _pycrysfml.zone_axis_type_set_zone_axis_uvw(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.zone_axis_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.zone_axis_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.zone_axis_type_data_ptr_get, _pycrysfml.zone_axis_type_data_ptr_set)
zone_axis_type_swigregister = _pycrysfml.zone_axis_type_swigregister
zone_axis_type_swigregister(zone_axis_type)

# This file is compatible with both classic and new-style classes.


